--
-- PostgreSQL database dump
--

-- Dumped from database version 17.4
-- Dumped by pg_dump version 17.5 (Ubuntu 17.5-1.pgdg24.04+1)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET transaction_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Data for Name: audit_log_entries; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.audit_log_entries (instance_id, id, payload, created_at, ip_address) FROM stdin;
00000000-0000-0000-0000-000000000000	b418735a-e220-4244-93e5-0a69f6204996	{"action":"user_confirmation_requested","actor_id":"af889e9b-6ae9-4315-b634-12b08e05f874","actor_username":"brian.h.berge@gmail.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2025-08-12 06:31:00.956141+00	
00000000-0000-0000-0000-000000000000	269b3844-c7d5-45d6-a35b-4a03a59880ca	{"action":"user_signedup","actor_id":"af889e9b-6ae9-4315-b634-12b08e05f874","actor_username":"brian.h.berge@gmail.com","actor_via_sso":false,"log_type":"team","traits":{"provider":"email"}}	2025-08-12 06:31:24.758579+00	
00000000-0000-0000-0000-000000000000	6b93f585-7909-44fa-80d8-af4326932d80	{"action":"login","actor_id":"af889e9b-6ae9-4315-b634-12b08e05f874","actor_username":"brian.h.berge@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-08-12 06:34:20.298721+00	
00000000-0000-0000-0000-000000000000	6fa00e01-b01e-4eed-a3f7-88c5de8eccba	{"action":"login","actor_id":"af889e9b-6ae9-4315-b634-12b08e05f874","actor_username":"brian.h.berge@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-08-12 16:22:01.507503+00	
00000000-0000-0000-0000-000000000000	357f6dcd-e712-4973-a732-ac32f7eaa4d9	{"action":"token_refreshed","actor_id":"af889e9b-6ae9-4315-b634-12b08e05f874","actor_username":"brian.h.berge@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-08-12 17:20:17.325531+00	
00000000-0000-0000-0000-000000000000	d920f25a-1bec-4f92-baf6-b97ba852296b	{"action":"token_revoked","actor_id":"af889e9b-6ae9-4315-b634-12b08e05f874","actor_username":"brian.h.berge@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-08-12 17:20:17.32651+00	
00000000-0000-0000-0000-000000000000	3077485e-fbdc-47ee-9399-cfc5b82f7de3	{"action":"login","actor_id":"af889e9b-6ae9-4315-b634-12b08e05f874","actor_username":"brian.h.berge@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-08-12 17:42:17.45993+00	
00000000-0000-0000-0000-000000000000	1307d4f9-baf3-4435-9c4e-bb5c88429e8c	{"action":"login","actor_id":"af889e9b-6ae9-4315-b634-12b08e05f874","actor_username":"brian.h.berge@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-08-12 18:00:52.341211+00	
00000000-0000-0000-0000-000000000000	9002537f-c47c-46ca-ace5-39b6a364e894	{"action":"login","actor_id":"af889e9b-6ae9-4315-b634-12b08e05f874","actor_username":"brian.h.berge@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-08-12 18:20:22.145601+00	
00000000-0000-0000-0000-000000000000	efe2a795-c9c9-4631-a858-889b54ad9f98	{"action":"token_refreshed","actor_id":"af889e9b-6ae9-4315-b634-12b08e05f874","actor_username":"brian.h.berge@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-08-12 19:18:30.833954+00	
00000000-0000-0000-0000-000000000000	89f77c78-2343-4184-b0c8-85571c932929	{"action":"token_revoked","actor_id":"af889e9b-6ae9-4315-b634-12b08e05f874","actor_username":"brian.h.berge@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-08-12 19:18:30.834859+00	
00000000-0000-0000-0000-000000000000	c8979517-c06e-4fc2-a78b-de1cb9c7854c	{"action":"login","actor_id":"af889e9b-6ae9-4315-b634-12b08e05f874","actor_username":"brian.h.berge@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-08-12 19:26:57.089035+00	
00000000-0000-0000-0000-000000000000	ce0e0bce-69df-4780-8ee8-53a4e3418ec0	{"action":"login","actor_id":"af889e9b-6ae9-4315-b634-12b08e05f874","actor_username":"brian.h.berge@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-08-12 19:48:37.765848+00	
00000000-0000-0000-0000-000000000000	cfd43204-aef4-4f5e-bb10-744be4a41e3f	{"action":"login","actor_id":"af889e9b-6ae9-4315-b634-12b08e05f874","actor_username":"brian.h.berge@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-08-12 20:19:34.954824+00	
00000000-0000-0000-0000-000000000000	b66e46b2-f38c-438e-a087-1d169bc2f868	{"action":"token_refreshed","actor_id":"af889e9b-6ae9-4315-b634-12b08e05f874","actor_username":"brian.h.berge@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-08-12 21:18:22.675627+00	
00000000-0000-0000-0000-000000000000	f02aeec9-d92e-4733-a1e7-64c0d36b14b0	{"action":"token_revoked","actor_id":"af889e9b-6ae9-4315-b634-12b08e05f874","actor_username":"brian.h.berge@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-08-12 21:18:22.676562+00	
00000000-0000-0000-0000-000000000000	069d6312-6421-4509-a684-e19c22074097	{"action":"login","actor_id":"af889e9b-6ae9-4315-b634-12b08e05f874","actor_username":"brian.h.berge@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-08-12 21:59:37.399551+00	
00000000-0000-0000-0000-000000000000	6120b9e0-1006-43cf-9840-5ced218e2eb7	{"action":"login","actor_id":"af889e9b-6ae9-4315-b634-12b08e05f874","actor_username":"brian.h.berge@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-08-12 22:13:21.330147+00	
00000000-0000-0000-0000-000000000000	e1ecf5a0-c3e4-452b-b1db-63677e569903	{"action":"token_refreshed","actor_id":"af889e9b-6ae9-4315-b634-12b08e05f874","actor_username":"brian.h.berge@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-08-12 23:30:31.944163+00	
00000000-0000-0000-0000-000000000000	39b6732e-c88e-493c-b9d2-cda38798f05e	{"action":"token_revoked","actor_id":"af889e9b-6ae9-4315-b634-12b08e05f874","actor_username":"brian.h.berge@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-08-12 23:30:31.945042+00	
00000000-0000-0000-0000-000000000000	45f4a356-60c9-407b-8a4c-8be53c7571c8	{"action":"login","actor_id":"af889e9b-6ae9-4315-b634-12b08e05f874","actor_username":"brian.h.berge@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-08-12 23:31:45.934991+00	
00000000-0000-0000-0000-000000000000	62b52ffe-07ec-4d89-9fae-2f51846ae453	{"action":"token_refreshed","actor_id":"af889e9b-6ae9-4315-b634-12b08e05f874","actor_username":"brian.h.berge@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-08-13 00:08:32.938731+00	
00000000-0000-0000-0000-000000000000	847d27ee-6741-4d4c-b064-9496c04047dd	{"action":"token_revoked","actor_id":"af889e9b-6ae9-4315-b634-12b08e05f874","actor_username":"brian.h.berge@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-08-13 00:08:32.939635+00	
\.


--
-- Data for Name: flow_state; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.flow_state (id, user_id, auth_code, code_challenge_method, code_challenge, provider_type, provider_access_token, provider_refresh_token, created_at, updated_at, authentication_method, auth_code_issued_at) FROM stdin;
4796e65d-5e1b-4755-a40b-056a480da0a5	af889e9b-6ae9-4315-b634-12b08e05f874	5794bd45-005c-4e15-a9e7-21a9e2782741	s256	6qSu9rMc5yEc3gx-jW-pe_fWgWYOPwWDxaBPg72orZU	email			2025-08-12 06:31:00.958936+00	2025-08-12 06:31:24.764537+00	email/signup	2025-08-12 06:31:24.764494+00
\.


--
-- Data for Name: users; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.users (instance_id, id, aud, role, email, encrypted_password, email_confirmed_at, invited_at, confirmation_token, confirmation_sent_at, recovery_token, recovery_sent_at, email_change_token_new, email_change, email_change_sent_at, last_sign_in_at, raw_app_meta_data, raw_user_meta_data, is_super_admin, created_at, updated_at, phone, phone_confirmed_at, phone_change, phone_change_token, phone_change_sent_at, email_change_token_current, email_change_confirm_status, banned_until, reauthentication_token, reauthentication_sent_at, is_sso_user, deleted_at, is_anonymous) FROM stdin;
00000000-0000-0000-0000-000000000000	af889e9b-6ae9-4315-b634-12b08e05f874	authenticated	authenticated	brian.h.berge@gmail.com	$2a$10$1GvOBUq5imW8GkaVRVYgqe3cxPamDtKUZMBPsUGQ3uAKKjjHFIqZu	2025-08-12 06:31:24.759324+00	\N		2025-08-12 06:31:00.962087+00		\N			\N	2025-08-12 23:31:45.935744+00	{"provider": "email", "providers": ["email"]}	{"sub": "af889e9b-6ae9-4315-b634-12b08e05f874", "email": "brian.h.berge@gmail.com", "display_name": "Brian Berge", "email_verified": true, "phone_verified": false}	\N	2025-08-12 06:31:00.937752+00	2025-08-13 00:08:32.942101+00	\N	\N			\N		0	\N		\N	f	\N	f
\.


--
-- Data for Name: identities; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.identities (provider_id, user_id, identity_data, provider, last_sign_in_at, created_at, updated_at, id) FROM stdin;
af889e9b-6ae9-4315-b634-12b08e05f874	af889e9b-6ae9-4315-b634-12b08e05f874	{"sub": "af889e9b-6ae9-4315-b634-12b08e05f874", "email": "brian.h.berge@gmail.com", "display_name": "Brian Berge", "email_verified": true, "phone_verified": false}	email	2025-08-12 06:31:00.952243+00	2025-08-12 06:31:00.952298+00	2025-08-12 06:31:00.952298+00	c611997d-be25-4d33-8781-69949cfe735d
\.


--
-- Data for Name: instances; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.instances (id, uuid, raw_base_config, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: sessions; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.sessions (id, user_id, created_at, updated_at, factor_id, aal, not_after, refreshed_at, user_agent, ip, tag) FROM stdin;
47463c38-e398-4ecd-b928-9d359b435dea	af889e9b-6ae9-4315-b634-12b08e05f874	2025-08-12 06:34:20.30486+00	2025-08-12 06:34:20.30486+00	\N	aal1	\N	\N	Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36	23.234.119.221	\N
2c99cb09-17cc-4fe7-b1f4-7e658f91bae9	af889e9b-6ae9-4315-b634-12b08e05f874	2025-08-12 16:22:01.508773+00	2025-08-12 17:20:17.331725+00	\N	aal1	\N	2025-08-12 17:20:17.331628	Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36	146.70.211.172	\N
45bbdbd2-9e1c-4166-b23a-875f62eabd68	af889e9b-6ae9-4315-b634-12b08e05f874	2025-08-12 17:42:17.461059+00	2025-08-12 17:42:17.461059+00	\N	aal1	\N	\N	Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36	146.70.211.172	\N
51a96695-3227-4f0c-b99a-2230eda0f941	af889e9b-6ae9-4315-b634-12b08e05f874	2025-08-12 18:00:52.342326+00	2025-08-12 18:00:52.342326+00	\N	aal1	\N	\N	Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36	146.70.211.172	\N
27cfa3f0-e03d-4b70-ad1f-d21daff9b4c0	af889e9b-6ae9-4315-b634-12b08e05f874	2025-08-12 18:20:22.146818+00	2025-08-12 19:18:30.838992+00	\N	aal1	\N	2025-08-12 19:18:30.838924	Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36	146.70.211.172	\N
4ae8faaa-7158-4231-a1a3-266313b1caa8	af889e9b-6ae9-4315-b634-12b08e05f874	2025-08-12 19:26:57.090152+00	2025-08-12 19:26:57.090152+00	\N	aal1	\N	\N	Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36	146.70.211.172	\N
a1499d40-b8ab-4f28-9c76-45aec8229b88	af889e9b-6ae9-4315-b634-12b08e05f874	2025-08-12 19:48:37.767013+00	2025-08-12 19:48:37.767013+00	\N	aal1	\N	\N	Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36	146.70.211.172	\N
2df65f86-d396-4597-8da7-e71d703f947a	af889e9b-6ae9-4315-b634-12b08e05f874	2025-08-12 20:19:34.955982+00	2025-08-12 21:18:22.68169+00	\N	aal1	\N	2025-08-12 21:18:22.681615	Next.js Middleware	146.70.211.172	\N
585bc3e1-303f-44a1-a851-fb407c253a61	af889e9b-6ae9-4315-b634-12b08e05f874	2025-08-12 22:13:21.331291+00	2025-08-12 23:30:31.949027+00	\N	aal1	\N	2025-08-12 23:30:31.948953	Next.js Middleware	146.70.211.172	\N
1d795d81-e4c9-43be-a44b-93a7df7b19be	af889e9b-6ae9-4315-b634-12b08e05f874	2025-08-12 23:31:45.935818+00	2025-08-12 23:31:45.935818+00	\N	aal1	\N	\N	Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36	146.70.211.172	\N
84a41a78-4937-469b-b88a-19e6b313636a	af889e9b-6ae9-4315-b634-12b08e05f874	2025-08-12 21:59:37.400725+00	2025-08-13 00:08:32.943591+00	\N	aal1	\N	2025-08-13 00:08:32.943516	Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36	146.70.211.172	\N
\.


--
-- Data for Name: mfa_amr_claims; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.mfa_amr_claims (session_id, created_at, updated_at, authentication_method, id) FROM stdin;
47463c38-e398-4ecd-b928-9d359b435dea	2025-08-12 06:34:20.313984+00	2025-08-12 06:34:20.313984+00	password	09369b1b-9e57-4ae6-b814-ec5fd75487f4
2c99cb09-17cc-4fe7-b1f4-7e658f91bae9	2025-08-12 16:22:01.512681+00	2025-08-12 16:22:01.512681+00	password	a121c15f-a280-45be-888e-416bd922dd81
45bbdbd2-9e1c-4166-b23a-875f62eabd68	2025-08-12 17:42:17.464406+00	2025-08-12 17:42:17.464406+00	password	3003556d-6420-44f0-a613-0f5c08eb32f8
51a96695-3227-4f0c-b99a-2230eda0f941	2025-08-12 18:00:52.345588+00	2025-08-12 18:00:52.345588+00	password	6ea2402d-f0f7-4da0-a132-ebe4fa15266e
27cfa3f0-e03d-4b70-ad1f-d21daff9b4c0	2025-08-12 18:20:22.150272+00	2025-08-12 18:20:22.150272+00	password	46634689-ba8d-45f4-8f76-340fcc9b4fb9
4ae8faaa-7158-4231-a1a3-266313b1caa8	2025-08-12 19:26:57.093272+00	2025-08-12 19:26:57.093272+00	password	d28bfa0e-4093-465a-adbf-a70170391ad9
a1499d40-b8ab-4f28-9c76-45aec8229b88	2025-08-12 19:48:37.770556+00	2025-08-12 19:48:37.770556+00	password	a1a9aa3d-de67-4bd2-acb7-07208025d40b
2df65f86-d396-4597-8da7-e71d703f947a	2025-08-12 20:19:34.959547+00	2025-08-12 20:19:34.959547+00	password	ddfdf869-783c-4e55-a481-4f8566936813
84a41a78-4937-469b-b88a-19e6b313636a	2025-08-12 21:59:37.40414+00	2025-08-12 21:59:37.40414+00	password	79bd589c-6a95-4442-81fb-88dba849ac9c
585bc3e1-303f-44a1-a851-fb407c253a61	2025-08-12 22:13:21.334403+00	2025-08-12 22:13:21.334403+00	password	0fdc8d45-103d-48e3-9f1d-a98a92737993
1d795d81-e4c9-43be-a44b-93a7df7b19be	2025-08-12 23:31:45.938223+00	2025-08-12 23:31:45.938223+00	password	a0ae19e9-d6e7-4866-967b-f05de0b04722
\.


--
-- Data for Name: mfa_factors; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.mfa_factors (id, user_id, friendly_name, factor_type, status, created_at, updated_at, secret, phone, last_challenged_at, web_authn_credential, web_authn_aaguid) FROM stdin;
\.


--
-- Data for Name: mfa_challenges; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.mfa_challenges (id, factor_id, created_at, verified_at, ip_address, otp_code, web_authn_session_data) FROM stdin;
\.


--
-- Data for Name: one_time_tokens; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.one_time_tokens (id, user_id, token_type, token_hash, relates_to, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: refresh_tokens; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.refresh_tokens (instance_id, id, token, user_id, revoked, created_at, updated_at, parent, session_id) FROM stdin;
00000000-0000-0000-0000-000000000000	1	2otpkukqbwu6	af889e9b-6ae9-4315-b634-12b08e05f874	f	2025-08-12 06:34:20.308767+00	2025-08-12 06:34:20.308767+00	\N	47463c38-e398-4ecd-b928-9d359b435dea
00000000-0000-0000-0000-000000000000	2	3poqprmsl5s3	af889e9b-6ae9-4315-b634-12b08e05f874	t	2025-08-12 16:22:01.510088+00	2025-08-12 17:20:17.327183+00	\N	2c99cb09-17cc-4fe7-b1f4-7e658f91bae9
00000000-0000-0000-0000-000000000000	3	et5fitelyp5h	af889e9b-6ae9-4315-b634-12b08e05f874	f	2025-08-12 17:20:17.32868+00	2025-08-12 17:20:17.32868+00	3poqprmsl5s3	2c99cb09-17cc-4fe7-b1f4-7e658f91bae9
00000000-0000-0000-0000-000000000000	4	dxfn5ycujqwx	af889e9b-6ae9-4315-b634-12b08e05f874	f	2025-08-12 17:42:17.462213+00	2025-08-12 17:42:17.462213+00	\N	45bbdbd2-9e1c-4166-b23a-875f62eabd68
00000000-0000-0000-0000-000000000000	5	jpm5nlovxoaw	af889e9b-6ae9-4315-b634-12b08e05f874	f	2025-08-12 18:00:52.343397+00	2025-08-12 18:00:52.343397+00	\N	51a96695-3227-4f0c-b99a-2230eda0f941
00000000-0000-0000-0000-000000000000	6	cw2tbkvqo5br	af889e9b-6ae9-4315-b634-12b08e05f874	t	2025-08-12 18:20:22.147941+00	2025-08-12 19:18:30.835456+00	\N	27cfa3f0-e03d-4b70-ad1f-d21daff9b4c0
00000000-0000-0000-0000-000000000000	7	26mxa2ucpwwt	af889e9b-6ae9-4315-b634-12b08e05f874	f	2025-08-12 19:18:30.836192+00	2025-08-12 19:18:30.836192+00	cw2tbkvqo5br	27cfa3f0-e03d-4b70-ad1f-d21daff9b4c0
00000000-0000-0000-0000-000000000000	8	5hrchyo4f4gz	af889e9b-6ae9-4315-b634-12b08e05f874	f	2025-08-12 19:26:57.091157+00	2025-08-12 19:26:57.091157+00	\N	4ae8faaa-7158-4231-a1a3-266313b1caa8
00000000-0000-0000-0000-000000000000	9	qhuyg5cqky5u	af889e9b-6ae9-4315-b634-12b08e05f874	f	2025-08-12 19:48:37.768072+00	2025-08-12 19:48:37.768072+00	\N	a1499d40-b8ab-4f28-9c76-45aec8229b88
00000000-0000-0000-0000-000000000000	10	annp63umbbfk	af889e9b-6ae9-4315-b634-12b08e05f874	t	2025-08-12 20:19:34.957179+00	2025-08-12 21:18:22.677108+00	\N	2df65f86-d396-4597-8da7-e71d703f947a
00000000-0000-0000-0000-000000000000	11	ct6pp5dvvuqw	af889e9b-6ae9-4315-b634-12b08e05f874	f	2025-08-12 21:18:22.677824+00	2025-08-12 21:18:22.677824+00	annp63umbbfk	2df65f86-d396-4597-8da7-e71d703f947a
00000000-0000-0000-0000-000000000000	13	w2d6s7gzimzn	af889e9b-6ae9-4315-b634-12b08e05f874	t	2025-08-12 22:13:21.332288+00	2025-08-12 23:30:31.945623+00	\N	585bc3e1-303f-44a1-a851-fb407c253a61
00000000-0000-0000-0000-000000000000	14	a4jn2xkiox2e	af889e9b-6ae9-4315-b634-12b08e05f874	f	2025-08-12 23:30:31.946368+00	2025-08-12 23:30:31.946368+00	w2d6s7gzimzn	585bc3e1-303f-44a1-a851-fb407c253a61
00000000-0000-0000-0000-000000000000	15	cqvgsy4tiksq	af889e9b-6ae9-4315-b634-12b08e05f874	f	2025-08-12 23:31:45.936767+00	2025-08-12 23:31:45.936767+00	\N	1d795d81-e4c9-43be-a44b-93a7df7b19be
00000000-0000-0000-0000-000000000000	12	apnmkv7hex7r	af889e9b-6ae9-4315-b634-12b08e05f874	t	2025-08-12 21:59:37.401885+00	2025-08-13 00:08:32.940211+00	\N	84a41a78-4937-469b-b88a-19e6b313636a
00000000-0000-0000-0000-000000000000	16	vrvyyxw4khkv	af889e9b-6ae9-4315-b634-12b08e05f874	f	2025-08-13 00:08:32.940925+00	2025-08-13 00:08:32.940925+00	apnmkv7hex7r	84a41a78-4937-469b-b88a-19e6b313636a
\.


--
-- Data for Name: sso_providers; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.sso_providers (id, resource_id, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: saml_providers; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.saml_providers (id, sso_provider_id, entity_id, metadata_xml, metadata_url, attribute_mapping, created_at, updated_at, name_id_format) FROM stdin;
\.


--
-- Data for Name: saml_relay_states; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.saml_relay_states (id, sso_provider_id, request_id, for_email, redirect_to, created_at, updated_at, flow_state_id) FROM stdin;
\.


--
-- Data for Name: schema_migrations; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.schema_migrations (version) FROM stdin;
20171026211738
20171026211808
20171026211834
20180103212743
20180108183307
20180119214651
20180125194653
00
20210710035447
20210722035447
20210730183235
20210909172000
20210927181326
20211122151130
20211124214934
20211202183645
20220114185221
20220114185340
20220224000811
20220323170000
20220429102000
20220531120530
20220614074223
20220811173540
20221003041349
20221003041400
20221011041400
20221020193600
20221021073300
20221021082433
20221027105023
20221114143122
20221114143410
20221125140132
20221208132122
20221215195500
20221215195800
20221215195900
20230116124310
20230116124412
20230131181311
20230322519590
20230402418590
20230411005111
20230508135423
20230523124323
20230818113222
20230914180801
20231027141322
20231114161723
20231117164230
20240115144230
20240214120130
20240306115329
20240314092811
20240427152123
20240612123726
20240729123726
20240802193726
20240806073726
20241009103726
\.


--
-- Data for Name: sso_domains; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.sso_domains (id, sso_provider_id, domain, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: _version_info; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public._version_info (id, version, applied_at, description) FROM stdin;
1	1.0.0	2025-08-12 17:26:49.411702+00	Initial schema version
\.


--
-- Data for Name: users; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.users (id, email, full_name, avatar_url, role, phone_number, timezone, date_format, preferences, is_active, last_login_at, metadata, created_at, updated_at) FROM stdin;
af889e9b-6ae9-4315-b634-12b08e05f874	brian.h.berge@gmail.com	\N	\N	user	\N	America/Chicago	MM/DD/YYYY	{}	t	\N	{}	2025-08-12 06:31:00.937282+00	2025-08-12 06:31:00.937282+00
\.


--
-- Data for Name: campaigns; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.campaigns (id, name, description, campaign_type, status, start_date, end_date, budget, target_audience, goals, success_metrics, audience_filters, geographic_targeting, demographic_targeting, total_sent, total_delivered, total_opened, total_clicked, total_converted, total_cost, ai_optimization_enabled, ai_insights, ai_recommendations, metadata, tags, created_by, updated_by, created_at, updated_at) FROM stdin;
3905852a-3fa1-47b4-a036-e8a8833eceb9	New Lead Welcome Series	Automated email series for new insurance leads	Email	Active	2025-08-12 02:15:58.003175+00	2026-08-12 02:15:58.003175+00	5000.00	{"lead_status": ["New", "Contacted"], "demographics": "all", "insurance_types": ["Auto", "Home"]}	{"kpis": ["open_rate", "click_rate", "response_rate"], "primary": "engagement", "secondary": "conversion"}	{}	{}	{}	{}	0	0	0	0	0	0.00	f	{}	{}	{}	{}	\N	\N	2025-08-12 02:15:58.003175+00	2025-08-12 02:15:58.003175+00
d7fc1d53-60b1-49a6-94ce-cb469f029849	Quote Follow-up Campaign	Multi-channel follow-up for delivered quotes	Email	Active	2025-08-12 02:15:58.003175+00	2026-02-12 02:15:58.003175+00	3000.00	{"lead_status": ["Quoted"], "days_since_quote": [3, 7, 14]}	{"kpis": ["conversion_rate", "response_rate"], "primary": "conversion", "secondary": "objection_handling"}	{}	{}	{}	{}	0	0	0	0	0	0.00	f	{}	{}	{}	{}	\N	\N	2025-08-12 02:15:58.003175+00	2025-08-12 02:15:58.003175+00
26c12c6c-5cbc-4474-a967-64692407a99b	Referral Incentive Program	Campaign to encourage client referrals	Email	Draft	2025-09-12 02:15:58.003175+00	2026-08-12 02:15:58.003175+00	10000.00	{"policy_age": ">6 months", "client_status": "Active", "satisfaction_score": ">8"}	{"kpis": ["referral_count", "referral_conversion"], "primary": "referrals", "secondary": "retention"}	{}	{}	{}	{}	0	0	0	0	0	0.00	f	{}	{}	{}	{}	\N	\N	2025-08-12 02:15:58.003175+00	2025-08-12 02:15:58.003175+00
\.


--
-- Data for Name: ab_tests; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.ab_tests (id, name, description, campaign_id, test_type, status, start_date, end_date, traffic_split, sample_size, confidence_level, success_metric, minimum_effect_size, statistical_significance, winner_variant, variants, results, ai_analysis, ai_recommendations, metadata, created_by, updated_by, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: addresses; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.addresses (id, street, street2, city, state, zip_code, country, type, is_verified, verification_source, verification_date, geocode_lat, geocode_lng, geocode_accuracy, geocode_source, geocode_date, formatted_address, plus_code, place_id, metadata, notes, created_by, updated_by, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: ai_agents; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.ai_agents (id, name, description, role, agent_type, model_provider, model_name, temperature, max_tokens, capabilities, tools, system_prompt, config, settings, total_interactions, successful_interactions, average_response_time, last_performance_review, is_active, is_learning, version, metadata, tags, created_by, updated_by, created_at, updated_at, last_used_at) FROM stdin;
27f0d141-f4ab-4355-b8da-737d6cd61994	Lead Follow-up Assistant	Automated follow-up agent for lead nurturing and engagement	follow_up	assistant	deepinfra	deepseek-ai/DeepSeek-V3-0324	0.70	4000	{"scheduling": true, "sms_generation": true, "email_generation": true, "call_script_generation": true}	[]	You are a professional insurance follow-up assistant. Your role is to help agents maintain consistent communication with leads through personalized, timely follow-ups. Always maintain a professional, helpful tone while being persistent but not pushy.	{"max_follow_ups": 5, "follow_up_intervals": [1, 3, 7, 14, 30], "personalization_level": "high"}	{}	0	0	\N	\N	t	t	1.0.0	{}	{}	\N	\N	2025-08-12 02:15:58.003175+00	2025-08-12 02:15:58.003175+00	\N
cac75161-6a6f-4679-b1dc-a228e737cdab	Lead Insight Analyzer	AI agent that analyzes lead data to provide insights and recommendations	insight	analyzer	deepinfra	deepseek-ai/DeepSeek-V3-0324	0.30	4000	{"data_analysis": true, "risk_assessment": true, "pattern_recognition": true, "recommendation_generation": true}	[]	You are an insurance data analyst AI. Analyze lead information, communication history, and behavioral patterns to provide actionable insights for agents. Focus on conversion probability, risk factors, and optimization opportunities.	{"analysis_depth": "comprehensive", "update_frequency": "daily", "confidence_threshold": 0.8}	{}	0	0	\N	\N	t	t	1.0.0	{}	{}	\N	\N	2025-08-12 02:15:58.003175+00	2025-08-12 02:15:58.003175+00	\N
b282bc9b-3d7b-4ab0-bf6e-63b83fe27405	Quote Recommendation Engine	AI agent specialized in generating personalized insurance quote recommendations	sales	generator	deepinfra	deepseek-ai/DeepSeek-V3-0324	0.50	4000	{"pricing_strategy": true, "quote_generation": true, "competitive_analysis": true, "coverage_optimization": true}	[]	You are an insurance quote specialist AI. Generate personalized quote recommendations based on customer needs, risk profile, and market conditions. Always prioritize appropriate coverage while considering budget constraints.	{"quote_accuracy": "high", "competitive_pricing": true, "coverage_optimization": true}	{}	0	0	\N	\N	t	t	1.0.0	{}	{}	\N	\N	2025-08-12 02:15:58.003175+00	2025-08-12 02:15:58.003175+00	\N
fe98ef32-2ac6-4733-aae8-c72c2eda205a	Customer Support Assistant	AI agent for handling customer inquiries and support requests	support	assistant	deepinfra	deepseek-ai/DeepSeek-V3-0324	0.60	4000	{"claims_guidance": true, "inquiry_handling": true, "policy_information": true, "escalation_management": true}	[]	You are a helpful insurance customer support assistant. Provide accurate information about policies, coverage, and procedures. Always be empathetic and solution-focused when helping customers with their insurance needs.	{"response_time": "immediate", "knowledge_base": "comprehensive", "escalation_threshold": "complex_issues"}	{}	0	0	\N	\N	t	t	1.0.0	{}	{}	\N	\N	2025-08-12 02:15:58.003175+00	2025-08-12 02:15:58.003175+00	\N
819c0aab-deb5-4d30-983c-a276bc80182b	Marketing Campaign Optimizer	AI agent for optimizing marketing campaigns and content performance	marketing	analyzer	deepinfra	deepseek-ai/DeepSeek-V3-0324	0.40	4000	{"campaign_analysis": true, "content_optimization": true, "performance_tracking": true, "audience_segmentation": true}	[]	You are a marketing optimization AI for insurance campaigns. Analyze campaign performance, optimize content for better engagement, and provide recommendations for improving conversion rates and ROI.	{"testing_framework": "ab_testing", "optimization_focus": "conversion_rate", "reporting_frequency": "weekly"}	{}	0	0	\N	\N	t	t	1.0.0	{}	{}	\N	\N	2025-08-12 02:15:58.003175+00	2025-08-12 02:15:58.003175+00	\N
\.


--
-- Data for Name: agent_memory; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.agent_memory (id, agent_id, entity_type, entity_id, memory_type, importance_score, title, content, summary, embedding, related_memories, conversation_id, session_id, access_count, last_accessed_at, confidence_score, expires_at, is_archived, metadata, tags, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: clients; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.clients (id, client_type, name, email, phone_number, address_id, mailing_address_id, date_of_birth, gender, marital_status, drivers_license, license_state, education_occupation, referred_by, business_type, industry, tax_id, year_established, annual_revenue, number_of_employees, ai_summary, ai_next_action, ai_risk_score, ai_lifetime_value, ai_insights, metadata, tags, status, source, created_by, updated_by, created_at, updated_at, last_contact_at, next_contact_at, converted_from_lead_id) FROM stdin;
\.


--
-- Data for Name: insurance_types; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.insurance_types (id, name, is_personal, is_commercial, description, icon_name, form_schema, required_fields, optional_fields, ai_prompt_template, ai_risk_factors, display_order, is_active, created_at, updated_at) FROM stdin;
17	Auto	t	f	Personal automobile insurance coverage	truck	{"optional_fields": ["current_carrier", "policy_expiry"], "required_fields": ["vehicles", "drivers", "coverage_preferences"]}	{}	{}	Focus on vehicle safety features, driving history, and coverage needs. Ask about current coverage gaps and desired protection levels.	{}	\N	t	2025-08-12 02:15:58.003175+00	2025-08-12 02:15:58.003175+00
18	Home	t	f	Homeowners and dwelling insurance	home	{"optional_fields": ["mortgage_info", "home_security"], "required_fields": ["property_details", "coverage_amount", "deductible_preference"]}	{}	{}	Assess property value, replacement cost, and liability needs. Consider location-specific risks like floods or earthquakes.	{}	\N	t	2025-08-12 02:15:58.003175+00	2025-08-12 02:15:58.003175+00
19	Renters	t	f	Renters insurance for personal property and liability	building-office	{"optional_fields": ["additional_living_expenses"], "required_fields": ["personal_property_value", "liability_coverage"]}	{}	{}	Focus on personal property protection and liability coverage. Explain the importance of coverage for temporary living expenses.	{}	\N	t	2025-08-12 02:15:58.003175+00	2025-08-12 02:15:58.003175+00
20	Specialty	t	f	High-value items and specialty coverage	sparkles	{"optional_fields": ["storage_location", "security_measures"], "required_fields": ["item_details", "appraisal_values"]}	{}	{}	Identify valuable items requiring special coverage. Discuss appraisal requirements and coverage options for collectibles, jewelry, art.	{}	\N	t	2025-08-12 02:15:58.003175+00	2025-08-12 02:15:58.003175+00
21	Commercial Auto	f	t	Business vehicle insurance coverage	truck	{"optional_fields": ["cargo_coverage", "hired_auto"], "required_fields": ["fleet_details", "business_use", "driver_info"]}	{}	{}	Assess business vehicle needs, driver qualifications, and commercial use patterns. Consider cargo and hired auto coverage.	{}	\N	t	2025-08-12 02:15:58.003175+00	2025-08-12 02:15:58.003175+00
22	General Liability	f	t	Business general liability insurance	shield-check	{"optional_fields": ["professional_services", "product_liability"], "required_fields": ["business_type", "revenue", "employee_count"]}	{}	{}	Evaluate business operations, liability exposures, and industry-specific risks. Consider professional liability needs.	{}	\N	t	2025-08-12 02:15:58.003175+00	2025-08-12 02:15:58.003175+00
23	Commercial Property	f	t	Business property and equipment coverage	building-office-2	{"optional_fields": ["business_interruption", "equipment_breakdown"], "required_fields": ["property_value", "business_personal_property", "location_details"]}	{}	{}	Assess property values, business interruption needs, and equipment coverage requirements. Consider location-specific risks.	{}	\N	t	2025-08-12 02:15:58.003175+00	2025-08-12 02:15:58.003175+00
24	Workers Compensation	f	t	Workers compensation insurance for employees	user-group	{"optional_fields": ["safety_programs", "claims_history"], "required_fields": ["employee_count", "job_classifications", "payroll"]}	{}	{}	Review employee classifications, payroll information, and safety programs. Assess experience modification factors.	{}	\N	t	2025-08-12 02:15:58.003175+00	2025-08-12 02:15:58.003175+00
\.


--
-- Data for Name: lead_statuses; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.lead_statuses (id, value, description, is_final, is_active, display_order, color_hex, icon_name, badge_variant, ai_action_template, ai_follow_up_suggestions, ai_next_steps, auto_actions, notification_settings, metadata, created_at, updated_at) FROM stdin;
17	New	Newly created lead requiring initial contact	f	t	1	#3B82F6	user-plus	default	Make initial contact within 24 hours. Introduce yourself and gather basic information about their insurance needs.	[]	[]	{}	{}	{}	2025-08-12 02:15:58.003175+00	2025-08-12 02:15:58.003175+00
18	Contacted	Initial contact has been made	f	t	2	#F59E0B	phone	default	Follow up within 3 days. Ask qualifying questions and schedule a detailed needs assessment.	[]	[]	{}	{}	{}	2025-08-12 02:15:58.003175+00	2025-08-12 02:15:58.003175+00
19	Qualified	Lead has been qualified and shows genuine interest	f	t	3	#8B5CF6	check-circle	default	Prepare a customized quote based on their specific needs and risk profile.	[]	[]	{}	{}	{}	2025-08-12 02:15:58.003175+00	2025-08-12 02:15:58.003175+00
20	Quoted	Quote has been provided to the prospect	f	t	4	#06B6D4	document-text	default	Follow up within 7 days to discuss the quote and address any questions or concerns.	[]	[]	{}	{}	{}	2025-08-12 02:15:58.003175+00	2025-08-12 02:15:58.003175+00
21	Negotiating	In active negotiations about terms or pricing	f	t	5	#F97316	chat-bubble-left-right	default	Work with the prospect to find mutually acceptable terms. Consider alternative coverage options.	[]	[]	{}	{}	{}	2025-08-12 02:15:58.003175+00	2025-08-12 02:15:58.003175+00
22	Sold	Lead has been successfully converted to a client	t	t	6	#10B981	check-badge	default	Process the policy, send welcome materials, and schedule onboarding call.	[]	[]	{}	{}	{}	2025-08-12 02:15:58.003175+00	2025-08-12 02:15:58.003175+00
23	Lost	Lead was not converted - no longer pursuing	t	t	7	#EF4444	x-circle	default	Document the reason for loss and add to nurture campaign for future opportunities.	[]	[]	{}	{}	{}	2025-08-12 02:15:58.003175+00	2025-08-12 02:15:58.003175+00
24	Hibernated	Lead is temporarily inactive but may be revisited	f	t	8	#6B7280	pause	default	Set reminder to follow up in 3-6 months. Keep in nurture campaign.	[]	[]	{}	{}	{}	2025-08-12 02:15:58.003175+00	2025-08-12 02:15:58.003175+00
\.


--
-- Data for Name: pipelines; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.pipelines (id, name, description, is_default, is_active, display_order, lead_type, insurance_types, conversion_goals, target_conversion_rate, average_cycle_time, ai_optimization_enabled, ai_scoring_model, ai_automation_rules, metadata, created_by, updated_by, created_at, updated_at) FROM stdin;
7	Personal Insurance Pipeline	Standard pipeline for individual insurance prospects	t	t	1	Personal	{1,2,3,4}	{"primary_goal": "policy_sale", "secondary_goals": ["cross_sell", "referral"]}	25.00	\N	f	{}	{}	{}	\N	\N	2025-08-12 02:15:58.003175+00	2025-08-12 02:15:58.003175+00
8	Commercial Insurance Pipeline	Pipeline for business insurance prospects	f	t	2	Business	{5,6,7,8}	{"primary_goal": "policy_sale", "secondary_goals": ["multi_line", "renewal"]}	20.00	\N	f	{}	{}	{}	\N	\N	2025-08-12 02:15:58.003175+00	2025-08-12 02:15:58.003175+00
9	High-Value Personal Pipeline	Specialized pipeline for high-net-worth individuals	f	t	3	Personal	{2,4}	{"primary_goal": "comprehensive_coverage", "secondary_goals": ["umbrella_policy", "trust_services"]}	35.00	\N	f	{}	{}	{}	\N	\N	2025-08-12 02:15:58.003175+00	2025-08-12 02:15:58.003175+00
\.


--
-- Data for Name: pipeline_statuses; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.pipeline_statuses (id, pipeline_id, name, description, is_final, is_active, display_order, color_hex, icon_name, badge_variant, stage_type, required_fields, optional_fields, target_duration, max_duration, ai_action_template, ai_follow_up_suggestions, ai_next_steps, ai_exit_criteria, auto_actions, notification_settings, escalation_rules, conversion_probability, metadata, created_at, updated_at) FROM stdin;
28	7	New Lead	Fresh prospect in the system	f	t	1	#3B82F6	user-plus	default	active	{}	{}	1	\N	Contact within 24 hours to introduce services and schedule needs assessment.	[]	[]	{}	{}	{}	{}	15.00	{}	2025-08-12 02:15:58.003175+00	2025-08-12 02:15:58.003175+00
29	7	Initial Contact	First contact made, gathering information	f	t	2	#F59E0B	phone	default	active	{}	{}	2	\N	Complete needs assessment and gather detailed information about current coverage.	[]	[]	{}	{}	{}	{}	25.00	{}	2025-08-12 02:15:58.003175+00	2025-08-12 02:15:58.003175+00
30	7	Needs Assessment	Understanding coverage requirements	f	t	3	#8B5CF6	clipboard-document-list	default	active	{}	{}	3	\N	Analyze coverage gaps and prepare customized quote recommendations.	[]	[]	{}	{}	{}	{}	40.00	{}	2025-08-12 02:15:58.003175+00	2025-08-12 02:15:58.003175+00
31	7	Quote Preparation	Preparing customized quote	f	t	4	#06B6D4	document-text	default	active	{}	{}	2	\N	Present quote options and explain coverage benefits and value proposition.	[]	[]	{}	{}	{}	{}	60.00	{}	2025-08-12 02:15:58.003175+00	2025-08-12 02:15:58.003175+00
32	7	Quote Presented	Quote delivered to prospect	f	t	5	#10B981	presentation-chart-line	default	waiting	{}	{}	7	\N	Follow up to address questions and guide toward decision.	[]	[]	{}	{}	{}	{}	75.00	{}	2025-08-12 02:15:58.003175+00	2025-08-12 02:15:58.003175+00
33	7	Policy Sold	Successfully converted to client	t	t	6	#059669	check-badge	default	final	{}	{}	0	\N	Process policy and begin onboarding. Look for cross-sell opportunities.	[]	[]	{}	{}	{}	{}	100.00	{}	2025-08-12 02:15:58.003175+00	2025-08-12 02:15:58.003175+00
34	7	Lost	Prospect decided not to proceed	t	t	7	#EF4444	x-circle	default	final	{}	{}	0	\N	Document loss reason and add to nurture campaign for future opportunities.	[]	[]	{}	{}	{}	{}	0.00	{}	2025-08-12 02:15:58.003175+00	2025-08-12 02:15:58.003175+00
35	8	Business Inquiry	Initial business insurance inquiry	f	t	1	#3B82F6	building-office	default	active	{}	{}	2	\N	Schedule business review meeting to understand operations and risk exposures.	[]	[]	{}	{}	{}	{}	10.00	{}	2025-08-12 02:15:58.003175+00	2025-08-12 02:15:58.003175+00
36	8	Risk Assessment	Evaluating business risks and exposures	f	t	2	#F59E0B	shield-exclamation	default	active	{}	{}	5	\N	Complete comprehensive risk assessment and identify coverage needs.	[]	[]	{}	{}	{}	{}	20.00	{}	2025-08-12 02:15:58.003175+00	2025-08-12 02:15:58.003175+00
37	8	Proposal Development	Creating comprehensive insurance proposal	f	t	3	#8B5CF6	document-duplicate	default	active	{}	{}	7	\N	Develop multi-line proposal with competitive pricing and comprehensive coverage.	[]	[]	{}	{}	{}	{}	35.00	{}	2025-08-12 02:15:58.003175+00	2025-08-12 02:15:58.003175+00
38	8	Proposal Presented	Formal proposal delivered	f	t	4	#06B6D4	presentation-chart-bar	default	waiting	{}	{}	14	\N	Schedule follow-up meeting to review proposal and address any concerns.	[]	[]	{}	{}	{}	{}	50.00	{}	2025-08-12 02:15:58.003175+00	2025-08-12 02:15:58.003175+00
39	8	Negotiation	Discussing terms and adjustments	f	t	5	#F97316	chat-bubble-left-right	default	active	{}	{}	10	\N	Work with prospect to refine coverage and terms to meet their needs and budget.	[]	[]	{}	{}	{}	{}	70.00	{}	2025-08-12 02:15:58.003175+00	2025-08-12 02:15:58.003175+00
40	8	Policy Bound	Commercial policy successfully bound	t	t	6	#059669	check-badge	default	final	{}	{}	0	\N	Complete policy setup and schedule risk management consultation.	[]	[]	{}	{}	{}	{}	100.00	{}	2025-08-12 02:15:58.003175+00	2025-08-12 02:15:58.003175+00
41	8	Lost	Business decided not to proceed	t	t	7	#EF4444	x-circle	default	final	{}	{}	0	\N	Document loss reason and maintain relationship for future opportunities.	[]	[]	{}	{}	{}	{}	0.00	{}	2025-08-12 02:15:58.003175+00	2025-08-12 02:15:58.003175+00
42	9	Referral Received	High-value prospect referral	f	t	1	#3B82F6	user-group	default	active	{}	{}	1	\N	Contact within 24 hours. Acknowledge referral source and schedule private consultation.	[]	[]	{}	{}	{}	{}	20.00	{}	2025-08-12 02:15:58.003175+00	2025-08-12 02:15:58.003175+00
43	9	Private Consultation	Detailed wealth protection review	f	t	2	#F59E0B	academic-cap	default	active	{}	{}	7	\N	Conduct comprehensive wealth and asset review. Identify protection gaps.	[]	[]	{}	{}	{}	{}	35.00	{}	2025-08-12 02:15:58.003175+00	2025-08-12 02:15:58.003175+00
44	9	Asset Appraisal	Valuing high-value assets	f	t	3	#8B5CF6	currency-dollar	default	active	{}	{}	14	\N	Coordinate professional appraisals and document asset values for coverage.	[]	[]	{}	{}	{}	{}	50.00	{}	2025-08-12 02:15:58.003175+00	2025-08-12 02:15:58.003175+00
45	9	Custom Proposal	Tailored high-value coverage proposal	f	t	4	#06B6D4	document-chart-bar	default	active	{}	{}	10	\N	Present comprehensive protection strategy with specialized coverage options.	[]	[]	{}	{}	{}	{}	65.00	{}	2025-08-12 02:15:58.003175+00	2025-08-12 02:15:58.003175+00
46	9	Coverage Bound	High-value policy successfully bound	t	t	5	#059669	shield-check	default	final	{}	{}	0	\N	Implement coverage and establish ongoing wealth protection relationship.	[]	[]	{}	{}	{}	{}	100.00	{}	2025-08-12 02:15:58.003175+00	2025-08-12 02:15:58.003175+00
47	9	Lost	Prospect decided not to proceed	t	t	6	#EF4444	x-circle	default	final	{}	{}	0	\N	Maintain relationship and continue to provide value through market insights.	[]	[]	{}	{}	{}	{}	0.00	{}	2025-08-12 02:15:58.003175+00	2025-08-12 02:15:58.003175+00
\.


--
-- Data for Name: leads; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.leads (id, client_id, assigned_to, lead_type, priority, current_carrier, current_policy_expiry, premium, auto_premium, home_premium, specialty_premium, commercial_premium, auto_data, auto_data_version, home_data, home_data_version, specialty_data, specialty_data_version, commercial_data, commercial_data_version, liability_data, liability_data_version, additional_insureds, additional_locations, drivers, vehicles, ai_summary, ai_next_action, ai_quote_recommendation, ai_follow_up_priority, ai_conversion_probability, ai_insights, campaign_id, ab_test_id, content_template_id, attribution_data, metadata, tags, notes, custom_fields, source, import_file_name, import_batch_id, status, created_by, updated_by, created_at, updated_at, status_changed_at, last_contact_at, next_contact_at, quote_generated_at, sold_at, lost_at, hibernated_at, pipeline_id, pipeline_status_id, insurance_type_id, lead_status_id) FROM stdin;
\.


--
-- Data for Name: ai_interactions; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.ai_interactions (id, agent_id, client_id, lead_id, user_id, type, source, prompt, content, ai_response, summary, model_used, model_provider, temperature, tokens_used, response_time_ms, quality_score, user_feedback, conversation_id, session_id, context, actions_taken, results, follow_up_required, follow_up_date, error_message, retry_count, metadata, tags, created_at, completed_at) FROM stdin;
\.


--
-- Data for Name: api_rate_limits; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.api_rate_limits (id, user_id, ip_address, endpoint, request_count, window_start, created_at, updated_at) FROM stdin;
c72f8810-e1fe-46aa-9f12-e02e6b877600	\N	::1	/api/pipelines	1	2025-08-12 05:00:00+00	2025-08-12 05:37:51.725268+00	2025-08-12 05:37:51.725268+00
91d6a78b-7727-4273-8b6e-c031ea40712e	\N	::1	/api/pipelines	1	2025-08-12 05:00:00+00	2025-08-12 05:38:00.088674+00	2025-08-12 05:38:00.088674+00
5316bec0-891f-4b1d-bfaf-81c289a0904f	\N	::1	/api/pipelines	1	2025-08-12 05:00:00+00	2025-08-12 05:38:07.565874+00	2025-08-12 05:38:07.565874+00
0fd85be0-40c8-46dc-a3cf-f6adf2c8ed32	\N	::1	/api/pipelines	1	2025-08-12 05:00:00+00	2025-08-12 05:40:34.234571+00	2025-08-12 05:40:34.234571+00
2e4c349a-2fd1-4c6b-a021-19a842846e29	\N	::1	/api/pipelines	1	2025-08-12 05:00:00+00	2025-08-12 05:40:36.987555+00	2025-08-12 05:40:36.987555+00
9c93ff9e-0c6f-4d6f-a87a-7d307c38c196	\N	::1	/api/pipelines	1	2025-08-12 05:00:00+00	2025-08-12 05:41:10.373041+00	2025-08-12 05:41:10.373041+00
8b925b6d-18a7-4b25-a557-5418a9386f2a	\N	::1	/api/pipelines	1	2025-08-12 05:00:00+00	2025-08-12 05:45:32.787851+00	2025-08-12 05:45:32.787851+00
b57391ba-ae80-4717-b6b8-ffc7d656cbf7	\N	::1	/api/pipelines	1	2025-08-12 05:00:00+00	2025-08-12 05:46:39.751824+00	2025-08-12 05:46:39.751824+00
e0f03f18-b30f-4b58-8c1e-4e6eb501acfe	\N	64.23.243.66	/api/pipelines	1	2025-08-12 06:00:00+00	2025-08-12 06:30:12.977295+00	2025-08-12 06:30:12.977295+00
e1650dad-8885-4160-8552-c37e1f11de79	\N	143.110.148.92	/api/pipelines	1	2025-08-12 06:00:00+00	2025-08-12 06:30:14.201649+00	2025-08-12 06:30:14.201649+00
dd2f0e6c-9213-4567-b82f-41c8569a780d	\N	23.234.119.221	/api/pipelines	1	2025-08-12 06:00:00+00	2025-08-12 06:30:26.573297+00	2025-08-12 06:30:26.573297+00
e89acd23-ff31-4ac2-921b-0e3843157303	\N	23.234.119.221	/api/pipelines	1	2025-08-12 06:00:00+00	2025-08-12 06:34:06.814033+00	2025-08-12 06:34:06.814033+00
a99a783b-7c71-4a58-aa33-23a5acc7e101	\N	63.117.14.133	/api/pipelines	1	2025-08-12 06:00:00+00	2025-08-12 06:34:10.948069+00	2025-08-12 06:34:10.948069+00
e583f7ff-82ad-43be-835e-9cc5fd43a16f	af889e9b-6ae9-4315-b634-12b08e05f874	23.234.119.221	/api/pipelines	2	2025-08-12 06:00:00+00	2025-08-12 06:35:46.635371+00	2025-08-12 06:35:50.039173+00
2eafd536-c123-4ef3-853b-e0c2f54bcbaf	\N	143.198.237.26	/api/pipelines	1	2025-08-12 06:00:00+00	2025-08-12 06:39:24.115878+00	2025-08-12 06:39:24.115878+00
ee4bc51d-9c7f-4087-b66b-8b062a6771b4	\N	143.198.53.158	/api/pipelines	1	2025-08-12 06:00:00+00	2025-08-12 06:39:25.940451+00	2025-08-12 06:39:25.940451+00
02c49535-e16a-4264-bc80-8079b284f9c1	\N	109.202.99.46	/api/.env	1	2025-08-12 06:00:00+00	2025-08-12 06:46:38.630142+00	2025-08-12 06:46:38.630142+00
2b4c84d4-0f37-420b-9c9c-f4bd84e69f39	\N	23.168.216.85	/api/pipelines	1	2025-08-12 07:00:00+00	2025-08-12 07:38:42.102073+00	2025-08-12 07:38:42.102073+00
e126956e-38ba-4594-89b8-f6efbdaef6ef	\N	146.70.172.103	/api/pipelines	1	2025-08-12 15:00:00+00	2025-08-12 15:31:05.907459+00	2025-08-12 15:31:05.907459+00
fbe12e6d-0553-470e-904a-87f16eb6907b	\N	146.70.211.172	/api/pipelines	1	2025-08-12 16:00:00+00	2025-08-12 16:21:39.227463+00	2025-08-12 16:21:39.227463+00
871762f4-2910-44a3-a799-c169bbc39fa6	af889e9b-6ae9-4315-b634-12b08e05f874	::1	/api/ringcentral	30	2025-08-12 17:00:00+00	2025-08-12 17:42:45.057895+00	2025-08-12 17:52:23.498368+00
b48964f4-54b2-4f5c-89d3-728fafc2d157	af889e9b-6ae9-4315-b634-12b08e05f874	::1	/api/pipelines	3	2025-08-12 17:00:00+00	2025-08-12 17:44:12.665656+00	2025-08-12 17:55:58.692145+00
99963663-a8a8-4c65-ab3b-8c092c4b1c7b	af889e9b-6ae9-4315-b634-12b08e05f874	146.70.211.172	/api/pipelines	1	2025-08-12 16:00:00+00	2025-08-12 16:23:16.950226+00	2025-08-12 16:23:16.950226+00
90165ef9-b607-491b-bd5f-5a5a272241dd	af889e9b-6ae9-4315-b634-12b08e05f874	146.70.211.172	/api/pipelines	2	2025-08-13 00:00:00+00	2025-08-13 00:08:42.570697+00	2025-08-13 00:08:43.041426+00
81e9aa78-26ca-4516-a4a0-662766c36ece	\N	193.29.106.26	/api/pipelines	1	2025-08-12 19:00:00+00	2025-08-12 19:54:17.527247+00	2025-08-12 19:54:17.527247+00
ee5ca2ec-e90a-4d79-ac88-eef5d778e95d	af889e9b-6ae9-4315-b634-12b08e05f874	146.70.211.172	/api/ringcentral	10	2025-08-12 16:00:00+00	2025-08-12 16:22:50.243269+00	2025-08-12 16:23:18.446895+00
c8172462-4696-4f77-b775-a3c72c550aff	\N	::1	/api/pipelines	1	2025-08-12 17:00:00+00	2025-08-12 17:41:37.043088+00	2025-08-12 17:41:37.043088+00
9fd50195-b711-43fb-b9ba-5d41b41902d3	af889e9b-6ae9-4315-b634-12b08e05f874	::1	/api/ringcentral	115	2025-08-12 20:00:00+00	2025-08-12 20:00:04.861212+00	2025-08-12 20:59:23.069903+00
a78fbac9-e9fe-48ca-bedb-7691f17b3371	af889e9b-6ae9-4315-b634-12b08e05f874	::1	/api/ringcentral	82	2025-08-12 19:00:00+00	2025-08-12 19:27:20.523109+00	2025-08-12 19:59:50.046477+00
dc07defb-5c89-47e3-92eb-1d534be8bc63	af889e9b-6ae9-4315-b634-12b08e05f874	::1	/api/ringcentral	88	2025-08-12 21:00:00+00	2025-08-12 21:00:23.06116+00	2025-08-12 21:42:38.189047+00
3ad4beb1-d631-404a-b97f-c59875c29859	\N	146.70.211.172	/api/pipelines	1	2025-08-12 21:00:00+00	2025-08-12 21:59:11.30191+00	2025-08-12 21:59:11.30191+00
253452c8-91e5-415e-86d0-f095200446ed	af889e9b-6ae9-4315-b634-12b08e05f874	::1	/api/pipelines	5	2025-08-12 18:00:00+00	2025-08-12 18:00:35.020086+00	2025-08-12 18:23:26.320967+00
d981f561-3982-4a85-b2a8-913001deb827	\N	146.70.211.172	/api/pipelines	1	2025-08-12 21:00:00+00	2025-08-12 21:59:18.595047+00	2025-08-12 21:59:18.595047+00
327b295f-670e-4e05-922a-819107d27d58	\N	94.102.49.123	/api/pipelines	1	2025-08-12 19:00:00+00	2025-08-12 19:34:13.870356+00	2025-08-12 19:34:13.870356+00
bd6f7d47-9bab-49c0-b593-33c434b0d1ae	\N	209.143.6.231	/api/pipelines	1	2025-08-12 21:00:00+00	2025-08-12 21:59:41.09399+00	2025-08-12 21:59:41.09399+00
baf72215-14a4-42d9-9a78-4615dae5ad40	\N	147.182.239.103	/api/pipelines	1	2025-08-12 22:00:00+00	2025-08-12 22:08:52.386354+00	2025-08-12 22:08:52.386354+00
280ee97c-9f06-416c-8eeb-8e1a69e3aa91	\N	146.190.117.252	/api/pipelines	1	2025-08-12 22:00:00+00	2025-08-12 22:08:52.415166+00	2025-08-12 22:08:52.415166+00
a7d65e1f-cdd8-4234-9b58-7ad5717d2225	af889e9b-6ae9-4315-b634-12b08e05f874	::1	/api/ringcentral	18	2025-08-12 18:00:00+00	2025-08-12 18:01:29.685918+00	2025-08-12 18:24:50.319988+00
ff583199-9f3c-497e-873a-7af60df14a61	\N	151.115.89.244	/api/pipelines	1	2025-08-12 18:00:00+00	2025-08-12 18:27:36.318117+00	2025-08-12 18:27:36.318117+00
6483ca71-5454-4b68-8709-340d61781701	\N	143.244.185.190	/api/pipelines	1	2025-08-12 22:00:00+00	2025-08-12 22:08:53.063387+00	2025-08-12 22:08:53.063387+00
24973d3c-fb98-4a18-ae2b-ed8d3a49d9a9	af889e9b-6ae9-4315-b634-12b08e05f874	::1	/api/pipelines	5	2025-08-12 19:00:00+00	2025-08-12 19:26:41.933018+00	2025-08-12 19:52:24.174805+00
f2b9b907-42d1-4aa1-8e54-6cb5e1677943	af889e9b-6ae9-4315-b634-12b08e05f874	::1	/api/pipelines	13	2025-08-12 22:00:00+00	2025-08-12 22:12:57.390306+00	2025-08-12 22:34:03.749308+00
823aed27-333a-4401-aa97-e7dccb43d120	af889e9b-6ae9-4315-b634-12b08e05f874	::1	/api/pipelines	4	2025-08-12 20:00:00+00	2025-08-12 20:19:20.661544+00	2025-08-12 20:25:04.079825+00
cf2d2213-059e-4d34-ac11-bebf945d014f	\N	::1	/api/pipelines	1	2025-08-12 23:00:00+00	2025-08-12 23:16:44.757255+00	2025-08-12 23:16:44.757255+00
d46ac143-8a9a-44a1-a5a0-a2db6c02013f	\N	::1	/api/pipelines	1	2025-08-12 23:00:00+00	2025-08-12 23:19:44.498933+00	2025-08-12 23:19:44.498933+00
fb2c4b1e-5d2a-4391-8a22-4340bc82cc78	\N	::1	/api/pipelines	1	2025-08-12 23:00:00+00	2025-08-12 23:29:01.400355+00	2025-08-12 23:29:01.400355+00
76f9c275-91bc-48d6-8d15-bdc85851adf3	af889e9b-6ae9-4315-b634-12b08e05f874	::1	/api/pipelines	7	2025-08-12 23:00:00+00	2025-08-12 23:30:47.258704+00	2025-08-12 23:32:06.476992+00
aba93084-c621-4df0-819c-af2d07218ece	af889e9b-6ae9-4315-b634-12b08e05f874	::1	/api/ringcentral	35	2025-08-12 22:00:00+00	2025-08-12 22:13:32.783756+00	2025-08-12 22:17:39.07361+00
\.


--
-- Data for Name: audit_logs; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.audit_logs (id, event_type, table_name, record_id, user_id, old_values, new_values, changes, ip_address, user_agent, request_id, metadata, created_at) FROM stdin;
\.


--
-- Data for Name: content_templates; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.content_templates (id, name, description, template_type, category, subject, content, variables, personalization_fields, dynamic_content, usage_count, performance_score, conversion_rate, engagement_rate, ai_optimized, ai_suggestions, ai_performance_insights, is_active, tags, metadata, created_by, updated_by, created_at, updated_at) FROM stdin;
0c7af6ae-649f-4cdb-8da9-adafdb25be7a	Welcome Email - New Lead	Initial welcome email for new insurance leads	Email	Lead Nurturing	Welcome to {{company_name}} - Your Insurance Protection Starts Here	Dear {{first_name}},\n\nThank you for your interest in insurance coverage with {{company_name}}. We're excited to help you find the perfect protection for your needs.\n\nAs your dedicated insurance advisor, I'm here to:\n• Understand your unique coverage needs\n• Provide personalized quote options\n• Explain coverage benefits in simple terms\n• Answer any questions you may have\n\nI'll be reaching out within 24 hours to schedule a brief consultation. In the meantime, feel free to reply to this email or call me directly at {{agent_phone}}.\n\nLooking forward to protecting what matters most to you!\n\nBest regards,\n{{agent_name}}\n{{company_name}}\n{{agent_email}} | {{agent_phone}}	{"agent_name": "Agent full name", "first_name": "Lead first name", "agent_email": "Agent email", "agent_phone": "Agent phone number", "company_name": "Insurance company name"}	{first_name,company_name,agent_name}	{}	0	\N	\N	\N	f	{}	{}	t	{}	{}	\N	\N	2025-08-12 02:15:58.003175+00	2025-08-12 02:15:58.003175+00
1274ad37-0541-48c3-8e1d-1763f6057ec2	Quote Follow-up SMS	SMS template for following up on delivered quotes	SMS	Quote Follow-up	\N	Hi {{first_name}}! This is {{agent_name}} from {{company_name}}. I wanted to follow up on the insurance quote I sent you. Do you have any questions? Reply STOP to opt out.	{"agent_name": "Agent first name", "first_name": "Lead first name", "company_name": "Company name"}	{first_name,agent_name}	{}	0	\N	\N	\N	f	{}	{}	t	{}	{}	\N	\N	2025-08-12 02:15:58.003175+00	2025-08-12 02:15:58.003175+00
4afc813b-7d23-455c-82ed-85ab7efc56e4	Initial Contact Call Script	Script for making initial contact with new leads	Call Script	Lead Contact	\N	Hi {{first_name}}, this is {{agent_name}} from {{company_name}}. Thank you for your interest in insurance coverage.\n\nI have about 5 minutes to learn about your current insurance situation and see how we might be able to help you save money or improve your coverage.\n\nIs now a good time to chat, or would you prefer I call back at a more convenient time?\n\n[If yes, continue with needs assessment questions]\n[If no, schedule callback]\n\nKey questions to ask:\n1. What type of insurance are you looking for?\n2. Do you currently have coverage?\n3. When does your current policy expire?\n4. What's most important to you - price, coverage, or service?\n5. Have you had any claims in the past 3 years?	{"agent_name": "Agent full name", "first_name": "Lead first name", "company_name": "Company name"}	{first_name,agent_name}	{}	0	\N	\N	\N	f	{}	{}	t	{}	{}	\N	\N	2025-08-12 02:15:58.003175+00	2025-08-12 02:15:58.003175+00
\.


--
-- Data for Name: communications; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.communications (id, client_id, lead_id, campaign_id, ab_test_id, content_template_id, type, direction, subject, content, attachments, status, outcome, duration, recording_url, call_quality_score, email_provider, tracking_pixel_url, unsubscribe_url, ai_summary, ai_sentiment, ai_entities, ai_action_items, ai_follow_up_suggestions, personalization_data, targeting_data, metadata, tags, created_by, updated_by, created_at, updated_at, scheduled_at, sent_at, delivered_at, opened_at, clicked_at, replied_at, completed_at) FROM stdin;
\.


--
-- Data for Name: call_logs; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.call_logs (id, user_id, client_id, lead_id, communication_id, ringcentral_call_id, session_id, direction, from_number, to_number, status, result, start_time, answer_time, end_time, duration, recording_url, recording_id, transcription, transcription_confidence, ai_summary, ai_sentiment, ai_action_items, ai_follow_up_required, quality_score, connection_quality, metadata, tags, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: conversation_sessions; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.conversation_sessions (id, agent_id, user_id, client_id, lead_id, title, purpose, status, total_interactions, total_tokens_used, average_response_time, context, summary, goals_achieved, action_items, next_steps, metadata, created_at, updated_at, completed_at) FROM stdin;
\.


--
-- Data for Name: customer_touchpoints; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.customer_touchpoints (id, client_id, lead_id, campaign_id, ab_test_id, communication_id, touchpoint_type, channel, source, medium, campaign, content, attribution_weight, attribution_model, conversion_value, page_url, referrer_url, user_agent, ip_address, device_type, browser, metadata, occurred_at, created_at) FROM stdin;
\.


--
-- Data for Name: file_deletions; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.file_deletions (id, user_id, bucket_name, file_path, file_name, deleted_at, metadata) FROM stdin;
\.


--
-- Data for Name: file_uploads; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.file_uploads (id, user_id, bucket_name, file_path, file_name, file_size, mime_type, entity_type, entity_id, metadata, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: homes; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.homes (id, client_id, lead_id, address_id, property_type, year_built, square_feet, lot_size, bedrooms, bathrooms, stories, construction_type, roof_type, roof_age, foundation_type, heating_type, cooling_type, purchase_price, current_value, mortgage_balance, current_coverage, coverage_limits, deductibles, safety_features, security_features, distance_to_fire_station, distance_to_coast, flood_zone, wildfire_risk, earthquake_risk, metadata, notes, created_by, updated_by, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: lead_status_history; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.lead_status_history (id, lead_id, from_status, to_status, from_pipeline_status_id, to_pipeline_status_id, reason, notes, automated, duration_in_previous_status, ai_trigger, ai_confidence, metadata, changed_by, changed_at) FROM stdin;
\.


--
-- Data for Name: password_history; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.password_history (id, user_id, password_hash, created_at) FROM stdin;
\.


--
-- Data for Name: permissions; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.permissions (id, name, description, category, created_at) FROM stdin;
9cb8d02b-cde7-440a-a530-42874b3b0d05	leads.view	View leads	leads	2025-08-12 03:01:40.53326+00
3e75a3f8-57ff-4533-8822-8a517c64f2c0	leads.create	Create new leads	leads	2025-08-12 03:01:40.53326+00
1515247e-0863-4b39-9c5e-eb39d96d79ce	leads.edit	Edit lead information	leads	2025-08-12 03:01:40.53326+00
0be94ab6-b0d0-405c-b145-c49997647c83	leads.delete	Delete leads	leads	2025-08-12 03:01:40.53326+00
83daccde-36a0-452b-9c23-0ae262d65ad2	leads.assign	Assign leads to agents	leads	2025-08-12 03:01:40.53326+00
abbcd7fe-03b3-4194-acb2-fa7556650b02	leads.view_all	View all organization leads	leads	2025-08-12 03:01:40.53326+00
990d7d32-38bc-4010-9fd9-d1c00de21073	clients.view	View clients	clients	2025-08-12 03:01:40.53326+00
eb06f2e5-3655-471b-bed2-1d2b6469d9e1	clients.create	Create new clients	clients	2025-08-12 03:01:40.53326+00
068689d9-d8bf-4f36-b840-a22c002a1ac2	clients.edit	Edit client information	clients	2025-08-12 03:01:40.53326+00
b76dbd3c-bc59-4324-83ad-a6e46250cdce	clients.delete	Delete clients	clients	2025-08-12 03:01:40.53326+00
07dcad3f-3a4a-4ba6-8245-c684703a4a0b	clients.view_all	View all organization clients	clients	2025-08-12 03:01:40.53326+00
1f9d6ed4-3d10-41e7-a0ad-cac91da3a73b	quotes.view	View quotes	quotes	2025-08-12 03:01:40.53326+00
e24b8d6a-6760-4995-9200-80035a047f29	quotes.create	Create new quotes	quotes	2025-08-12 03:01:40.53326+00
9a21f13f-34f7-4f3f-be38-6da5d9685806	quotes.edit	Edit quotes	quotes	2025-08-12 03:01:40.53326+00
9d721d95-6f2b-48d0-8ec7-8d41b6aa1c52	quotes.delete	Delete quotes	quotes	2025-08-12 03:01:40.53326+00
cfef7475-75a7-4084-be96-406d9a697c3f	quotes.approve	Approve quotes	quotes	2025-08-12 03:01:40.53326+00
1fb5fa42-f127-4ad1-a5d0-45c893624e9d	communications.view	View communications	communications	2025-08-12 03:01:40.53326+00
a6cb5dfa-a01c-49d6-8936-6026c5ba267c	communications.create	Create communications	communications	2025-08-12 03:01:40.53326+00
16336ec6-7f56-4865-8dec-8ef7c7940537	communications.edit	Edit communications	communications	2025-08-12 03:01:40.53326+00
269840bd-513e-47b8-bcc3-1856ad2eb2fd	communications.delete	Delete communications	communications	2025-08-12 03:01:40.53326+00
b1cec6da-7f61-42cf-9ac3-458f5e3fb3ba	reports.view	View reports	reports	2025-08-12 03:01:40.53326+00
2c8b137e-3a52-4891-8ef0-c84e210d9cc0	reports.create	Create custom reports	reports	2025-08-12 03:01:40.53326+00
4513f6de-d446-407c-92b5-3dcfd77cd348	reports.export	Export report data	reports	2025-08-12 03:01:40.53326+00
2744dbfa-a842-4a17-9faa-24d834903d7d	users.view	View organization users	users	2025-08-12 03:01:40.53326+00
ae3e23c3-be9a-4045-8ad9-9938d795077d	users.invite	Invite new users	users	2025-08-12 03:01:40.53326+00
33e4bb28-ac6c-4572-bc49-a1e90080d347	users.edit	Edit user information	users	2025-08-12 03:01:40.53326+00
f05c8396-da43-490d-a6f2-e73796f636b8	users.deactivate	Deactivate users	users	2025-08-12 03:01:40.53326+00
2a2cec81-a2f3-4b30-8986-8730e528ca84	users.manage_roles	Manage user roles	users	2025-08-12 03:01:40.53326+00
2276f3d5-3c22-44cc-8fba-4fca0d3db7f9	organization.view	View organization settings	organization	2025-08-12 03:01:40.53326+00
5be5697e-199d-4431-b4a3-036698cccfc7	organization.edit	Edit organization settings	organization	2025-08-12 03:01:40.53326+00
2f721158-68ef-4efe-bbd8-35839a2fadf5	organization.billing	Manage billing and subscriptions	organization	2025-08-12 03:01:40.53326+00
a49b1709-a276-49c6-8a99-f0bb4aa832be	organization.integrations	Manage integrations	organization	2025-08-12 03:01:40.53326+00
4a36132d-0ff5-40cd-9126-74d81838f635	system.admin	Full system administration	system	2025-08-12 03:01:40.53326+00
6f307ecd-adf0-42d4-8932-08a206fd4e16	system.audit	View audit logs	system	2025-08-12 03:01:40.53326+00
23e2345c-133a-4233-85d5-3aaa51de6f32	system.backup	Manage backups	system	2025-08-12 03:01:40.53326+00
\.


--
-- Data for Name: quotes; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.quotes (id, lead_id, insurance_type_id, carrier, policy_number, quote_number, paid_in_full_amount, monthly_payment_amount, down_payment_amount, contract_term, effective_date, expiration_date, coverage_details, limits, deductibles, status, competitor_quotes, savings_amount, savings_percentage, ai_recommendation, ai_risk_assessment, ai_pricing_factors, metadata, notes, created_by, updated_by, quote_date, created_at, updated_at, bound_at, expired_at) FROM stdin;
\.


--
-- Data for Name: ringcentral_tokens; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.ringcentral_tokens (id, user_id, access_token, refresh_token, token_type, expires_at, refresh_token_expires_at, scope, granted_permissions, account_id, extension_id, extension_number, is_active, last_validated_at, validation_error, api_calls_count, last_api_call_at, rate_limit_remaining, rate_limit_reset_at, metadata, created_at, updated_at) FROM stdin;
c2a907f2-1136-48d0-8474-d4f95b393e1c	af889e9b-6ae9-4315-b634-12b08e05f874	U0pDMDFQMDFQQVMwMHxBQUFkTThGbTZsVWltSktXdjAyeHlDNGU5SzRjWDhYaXB3WTdCekVaOHBNYzFRaTQzUlQ4Qy1jcktKc2dwa0ZLSjQyU001UXVOSFhTOXVCbTNVYngwSjVKcXdTRmJuMDRrZXVBM0RuUzdqWTA2VXV5UlpycW5pbW5PbTFBTVJLWTNLMl95c2xKNjRoaFZMZ3B4MUhCd2JVSFRPQnB3N3QwRWlybnMyZUJOUVVneng2Ykh0VWk5SHppSnVSU3pkcGpoTE8zQ1ZvY1JyVm9DaE8zcFhKVzZoMVRycEVrRkF8QnZEWHJRfGJaRGRRZGFac1hhYlJPTkZZTFo0amd8QVF8QUF8QUFBQUFCNXl5OFk	U0pDMDFQMDFQQVMwMHxBQURPMkRseXZKano1T1pRLXlwY2FaQ2RYLTZvU09TMFRmUE93Rk1ERWNMQ1A5bkVOVTh6THpzSDhkSHNiRHpsMi1fT0ZLZW5QZjVHbGVyTE41YWtFR251bUVCZl94SldGUTJ2WTB2enh6OU9XbUNMSXhSbGp5ZzNGZGQ0SldydTJZRXVfUzg2VXJrUUtsVjFabnhPblR4SG1NOWZUT01aOHpZQ3ZfSVhTNlhXSWx5b3RxNy1ib2NpM2F4WnJmVTBmTVBFQkstMVVtUjV3TG4wdFJCRm8xbXZvTHI3WkF8QnZEWHJRfDd5QVotaTV5NmMwaU9WTGF0Y2pyeEF8QVF8QUF8QUFBQUFOa3VScTA	bearer	2025-08-12 23:14:15.938+00	2025-08-19 22:14:16.146+00	ReadMessages ReadPresence ReadAccounts RingOut SMS ReadCallLog	[]	\N	\N	\N	t	\N	\N	0	\N	\N	\N	{}	2025-08-12 20:20:22.696389+00	2025-08-12 22:14:16.899083+00
\.


--
-- Data for Name: schema_versions; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.schema_versions (id, version, description, applied_at) FROM stdin;
1	1.0.0	Initial insurance CRM schema with comprehensive seed data - Production ready	2025-08-12 02:15:58.003175+00
\.


--
-- Data for Name: sms_logs; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.sms_logs (id, user_id, client_id, lead_id, communication_id, ringcentral_message_id, conversation_id, direction, from_number, to_number, message_text, attachments, status, ai_summary, ai_sentiment, ai_intent, ai_action_items, metadata, tags, sent_at, delivered_at, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: specialty_items; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.specialty_items (id, client_id, lead_id, name, category, description, brand, model, serial_number, appraised_value, purchase_price, current_value, appraisal_date, appraiser_name, coverage_type, coverage_limit, deductible, storage_location, security_measures, photos, documents, metadata, notes, created_by, updated_by, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: user_invitations; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.user_invitations (id, email, role, invited_by, invitation_token, custom_message, status, invited_at, expires_at, accepted_at, accepted_by, metadata, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: user_phone_preferences; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.user_phone_preferences (id, user_id, selected_phone_number, phone_number_label, phone_number_type, is_default, is_active, call_forwarding_enabled, call_forwarding_number, voicemail_enabled, call_recording_enabled, sms_notifications, email_notifications, desktop_notifications, business_hours, timezone, auto_response_enabled, auto_response_message, out_of_office_enabled, out_of_office_message, crm_integration_enabled, auto_log_calls, auto_create_activities, metadata, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: user_sessions; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.user_sessions (id, user_id, session_token, ip_address, user_agent, device_info, country, city, is_active, last_activity, created_at, expires_at) FROM stdin;
\.


--
-- Data for Name: vehicles; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.vehicles (id, client_id, lead_id, make, model, year, vin, license_plate, state, body_style, engine_size, fuel_type, transmission, color, primary_use, annual_mileage, garage_location, current_coverage, coverage_limits, deductibles, purchase_price, current_value, loan_balance, safety_features, anti_theft_devices, metadata, notes, created_by, updated_by, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: messages_2025_08_11; Type: TABLE DATA; Schema: realtime; Owner: supabase_admin
--

COPY realtime.messages_2025_08_11 (topic, extension, payload, event, private, updated_at, inserted_at, id) FROM stdin;
\.


--
-- Data for Name: messages_2025_08_12; Type: TABLE DATA; Schema: realtime; Owner: supabase_admin
--

COPY realtime.messages_2025_08_12 (topic, extension, payload, event, private, updated_at, inserted_at, id) FROM stdin;
\.


--
-- Data for Name: messages_2025_08_13; Type: TABLE DATA; Schema: realtime; Owner: supabase_admin
--

COPY realtime.messages_2025_08_13 (topic, extension, payload, event, private, updated_at, inserted_at, id) FROM stdin;
\.


--
-- Data for Name: messages_2025_08_14; Type: TABLE DATA; Schema: realtime; Owner: supabase_admin
--

COPY realtime.messages_2025_08_14 (topic, extension, payload, event, private, updated_at, inserted_at, id) FROM stdin;
\.


--
-- Data for Name: messages_2025_08_15; Type: TABLE DATA; Schema: realtime; Owner: supabase_admin
--

COPY realtime.messages_2025_08_15 (topic, extension, payload, event, private, updated_at, inserted_at, id) FROM stdin;
\.


--
-- Data for Name: schema_migrations; Type: TABLE DATA; Schema: realtime; Owner: supabase_admin
--

COPY realtime.schema_migrations (version, inserted_at) FROM stdin;
20211116024918	2025-08-11 03:20:18
20211116045059	2025-08-11 03:20:21
20211116050929	2025-08-11 03:20:22
20211116051442	2025-08-11 03:20:22
20211116212300	2025-08-11 03:20:22
20211116213355	2025-08-11 03:20:22
20211116213934	2025-08-11 03:20:22
20211116214523	2025-08-11 03:20:22
20211122062447	2025-08-11 03:20:22
20211124070109	2025-08-11 03:20:22
20211202204204	2025-08-11 03:20:22
20211202204605	2025-08-11 03:20:22
20211210212804	2025-08-11 03:20:22
20211228014915	2025-08-11 03:20:22
20220107221237	2025-08-11 03:20:22
20220228202821	2025-08-11 03:20:22
20220312004840	2025-08-11 03:20:22
20220603231003	2025-08-11 03:20:22
20220603232444	2025-08-11 03:20:22
20220615214548	2025-08-11 03:20:22
20220712093339	2025-08-11 03:20:22
20220908172859	2025-08-11 03:20:22
20220916233421	2025-08-11 03:20:22
20230119133233	2025-08-11 03:20:22
20230128025114	2025-08-11 03:20:22
20230128025212	2025-08-11 03:20:22
20230227211149	2025-08-11 03:20:22
20230228184745	2025-08-11 03:20:22
20230308225145	2025-08-11 03:20:22
20230328144023	2025-08-11 03:20:22
20231018144023	2025-08-11 03:20:22
20231204144023	2025-08-11 03:20:22
20231204144024	2025-08-11 03:20:22
20231204144025	2025-08-11 03:20:22
20240108234812	2025-08-11 03:20:22
20240109165339	2025-08-11 03:20:22
20240227174441	2025-08-11 03:20:22
20240311171622	2025-08-11 03:20:22
20240321100241	2025-08-11 03:20:23
20240401105812	2025-08-11 03:20:23
20240418121054	2025-08-11 03:20:23
20240523004032	2025-08-11 03:20:23
20240618124746	2025-08-11 03:20:23
20240801235015	2025-08-11 03:20:23
20240805133720	2025-08-11 03:20:23
20240827160934	2025-08-11 03:20:23
20240919163303	2025-08-11 03:20:23
20240919163305	2025-08-11 03:20:23
20241019105805	2025-08-11 03:20:23
20241030150047	2025-08-11 03:20:23
20241108114728	2025-08-11 03:20:23
20241121104152	2025-08-11 03:20:23
20241130184212	2025-08-11 03:20:23
20241220035512	2025-08-11 03:20:23
20241220123912	2025-08-11 03:20:23
20241224161212	2025-08-11 03:20:23
20250107150512	2025-08-11 03:20:23
20250110162412	2025-08-11 03:20:23
20250123174212	2025-08-11 03:20:23
20250128220012	2025-08-11 03:20:23
20250506224012	2025-08-11 03:20:23
20250523164012	2025-08-11 03:20:23
20250714121412	2025-08-11 03:20:23
\.


--
-- Data for Name: subscription; Type: TABLE DATA; Schema: realtime; Owner: supabase_admin
--

COPY realtime.subscription (id, subscription_id, entity, filters, claims, created_at) FROM stdin;
\.


--
-- Data for Name: buckets; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.buckets (id, name, owner, created_at, updated_at, public, avif_autodetection, file_size_limit, allowed_mime_types, owner_id, type) FROM stdin;
underwriting-documents	underwriting-documents	\N	2025-08-12 05:13:05.60146+00	2025-08-12 05:13:05.60146+00	f	f	52428800	{application/pdf,image/jpeg,image/png,image/tiff,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document,application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet}	\N	STANDARD
acord-forms	acord-forms	\N	2025-08-12 05:13:05.60146+00	2025-08-12 05:13:05.60146+00	f	f	52428800	{application/pdf,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document,image/jpeg,image/png}	\N	STANDARD
quote-documents	quote-documents	\N	2025-08-12 05:13:05.60146+00	2025-08-12 05:13:05.60146+00	f	f	52428800	{application/pdf,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document,application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet,image/jpeg,image/png}	\N	STANDARD
policy-documents	policy-documents	\N	2025-08-12 05:13:05.60146+00	2025-08-12 05:13:05.60146+00	f	f	52428800	{application/pdf,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document,application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet,image/jpeg,image/png,image/tiff}	\N	STANDARD
other-documents	other-documents	\N	2025-08-12 05:13:05.60146+00	2025-08-12 05:13:05.60146+00	f	f	52428800	{application/pdf,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document,application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet,application/vnd.ms-powerpoint,application/vnd.openxmlformats-officedocument.presentationml.presentation,text/plain,text/csv,image/jpeg,image/png,image/tiff,image/gif,image/webp}	\N	STANDARD
user-avatars	user-avatars	\N	2025-08-12 05:13:05.60146+00	2025-08-12 05:13:05.60146+00	t	t	5242880	{image/jpeg,image/png,image/webp,image/gif}	\N	STANDARD
\.


--
-- Data for Name: buckets_analytics; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.buckets_analytics (id, type, format, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: migrations; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.migrations (id, name, hash, executed_at) FROM stdin;
0	create-migrations-table	e18db593bcde2aca2a408c4d1100f6abba2195df	2025-08-11 03:20:16.687943
1	initialmigration	6ab16121fbaa08bbd11b712d05f358f9b555d777	2025-08-11 03:20:16.695342
2	storage-schema	5c7968fd083fcea04050c1b7f6253c9771b99011	2025-08-11 03:20:16.699648
3	pathtoken-column	2cb1b0004b817b29d5b0a971af16bafeede4b70d	2025-08-11 03:20:16.711646
4	add-migrations-rls	427c5b63fe1c5937495d9c635c263ee7a5905058	2025-08-11 03:20:16.727492
5	add-size-functions	79e081a1455b63666c1294a440f8ad4b1e6a7f84	2025-08-11 03:20:16.733173
6	change-column-name-in-get-size	f93f62afdf6613ee5e7e815b30d02dc990201044	2025-08-11 03:20:16.741967
7	add-rls-to-buckets	e7e7f86adbc51049f341dfe8d30256c1abca17aa	2025-08-11 03:20:16.747216
8	add-public-to-buckets	fd670db39ed65f9d08b01db09d6202503ca2bab3	2025-08-11 03:20:16.753098
9	fix-search-function	3a0af29f42e35a4d101c259ed955b67e1bee6825	2025-08-11 03:20:16.75902
10	search-files-search-function	68dc14822daad0ffac3746a502234f486182ef6e	2025-08-11 03:20:16.765002
11	add-trigger-to-auto-update-updated_at-column	7425bdb14366d1739fa8a18c83100636d74dcaa2	2025-08-11 03:20:16.771943
12	add-automatic-avif-detection-flag	8e92e1266eb29518b6a4c5313ab8f29dd0d08df9	2025-08-11 03:20:16.777906
13	add-bucket-custom-limits	cce962054138135cd9a8c4bcd531598684b25e7d	2025-08-11 03:20:16.783292
14	use-bytes-for-max-size	941c41b346f9802b411f06f30e972ad4744dad27	2025-08-11 03:20:16.788803
15	add-can-insert-object-function	934146bc38ead475f4ef4b555c524ee5d66799e5	2025-08-11 03:20:16.821616
16	add-version	76debf38d3fd07dcfc747ca49096457d95b1221b	2025-08-11 03:20:16.826353
17	drop-owner-foreign-key	f1cbb288f1b7a4c1eb8c38504b80ae2a0153d101	2025-08-11 03:20:16.831837
18	add_owner_id_column_deprecate_owner	e7a511b379110b08e2f214be852c35414749fe66	2025-08-11 03:20:16.838762
19	alter-default-value-objects-id	02e5e22a78626187e00d173dc45f58fa66a4f043	2025-08-11 03:20:16.844501
20	list-objects-with-delimiter	cd694ae708e51ba82bf012bba00caf4f3b6393b7	2025-08-11 03:20:16.848981
21	s3-multipart-uploads	8c804d4a566c40cd1e4cc5b3725a664a9303657f	2025-08-11 03:20:16.856469
22	s3-multipart-uploads-big-ints	9737dc258d2397953c9953d9b86920b8be0cdb73	2025-08-11 03:20:16.868258
23	optimize-search-function	9d7e604cddc4b56a5422dc68c9313f4a1b6f132c	2025-08-11 03:20:16.878155
24	operation-function	8312e37c2bf9e76bbe841aa5fda889206d2bf8aa	2025-08-11 03:20:16.882787
25	custom-metadata	d974c6057c3db1c1f847afa0e291e6165693b990	2025-08-11 03:20:16.888021
26	objects-prefixes	ef3f7871121cdc47a65308e6702519e853422ae2	2025-08-12 05:17:42.356286
27	search-v2	33b8f2a7ae53105f028e13e9fcda9dc4f356b4a2	2025-08-12 05:17:42.382678
28	object-bucket-name-sorting	ba85ec41b62c6a30a3f136788227ee47f311c436	2025-08-12 05:17:42.40562
29	create-prefixes	a7b1a22c0dc3ab630e3055bfec7ce7d2045c5b7b	2025-08-12 05:17:42.412445
30	update-object-levels	6c6f6cc9430d570f26284a24cf7b210599032db7	2025-08-12 05:17:42.417016
31	objects-level-index	33f1fef7ec7fea08bb892222f4f0f5d79bab5eb8	2025-08-12 05:17:42.561708
32	backward-compatible-index-on-objects	2d51eeb437a96868b36fcdfb1ddefdf13bef1647	2025-08-12 05:17:42.579822
33	backward-compatible-index-on-prefixes	fe473390e1b8c407434c0e470655945b110507bf	2025-08-12 05:17:42.586924
34	optimize-search-function-v1	82b0e469a00e8ebce495e29bfa70a0797f7ebd2c	2025-08-12 05:17:42.588972
35	add-insert-trigger-prefixes	63bb9fd05deb3dc5e9fa66c83e82b152f0caf589	2025-08-12 05:17:42.595003
36	optimise-existing-functions	81cf92eb0c36612865a18016a38496c530443899	2025-08-12 05:17:42.599666
37	add-bucket-name-length-trigger	3944135b4e3e8b22d6d4cbb568fe3b0b51df15c1	2025-08-12 05:17:42.608962
38	iceberg-catalog-flag-on-buckets	19a8bd89d5dfa69af7f222a46c726b7c41e462c5	2025-08-12 05:17:42.614143
\.


--
-- Data for Name: objects; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.objects (id, bucket_id, name, owner, created_at, updated_at, last_accessed_at, metadata, version, owner_id, user_metadata, level) FROM stdin;
\.


--
-- Data for Name: prefixes; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.prefixes (bucket_id, name, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: s3_multipart_uploads; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.s3_multipart_uploads (id, in_progress_size, upload_signature, bucket_id, key, version, owner_id, created_at, user_metadata) FROM stdin;
\.


--
-- Data for Name: s3_multipart_uploads_parts; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.s3_multipart_uploads_parts (id, upload_id, size, part_number, bucket_id, key, etag, owner_id, version, created_at) FROM stdin;
\.


--
-- Data for Name: schema_migrations; Type: TABLE DATA; Schema: supabase_migrations; Owner: postgres
--

COPY supabase_migrations.schema_migrations (version, statements, name) FROM stdin;
20250112000001	{"-- =============================================================================\n-- MIGRATION: Core Authentication and User Management\n-- =============================================================================\n-- Description: Creates users table with proper auth integration, roles, and RLS policies\n-- Version: 1.0.0\n-- Created: 2025-01-12\n\n-- Enable required extensions\nCREATE EXTENSION IF NOT EXISTS \\"uuid-ossp\\"","CREATE EXTENSION IF NOT EXISTS \\"pgcrypto\\"","-- =============================================================================\n-- USERS TABLE\n-- =============================================================================\n\n-- Create users table that extends Supabase auth.users\nCREATE TABLE public.users (\n  id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,\n  email TEXT UNIQUE,\n  full_name TEXT,\n  avatar_url TEXT,\n  role TEXT DEFAULT 'user' CHECK (role IN ('user', 'admin', 'agent', 'manager')),\n  \n  -- Profile information\n  phone_number TEXT,\n  timezone TEXT DEFAULT 'America/Chicago',\n  date_format TEXT DEFAULT 'MM/DD/YYYY',\n  \n  -- Preferences\n  preferences JSONB DEFAULT '{}',\n  \n  -- Status and metadata\n  is_active BOOLEAN DEFAULT TRUE,\n  last_login_at TIMESTAMP WITH TIME ZONE,\n  metadata JSONB DEFAULT '{}',\n  \n  -- Timestamps\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n)","-- =============================================================================\n-- INDEXES\n-- =============================================================================\n\nCREATE INDEX idx_users_email ON public.users(email)","CREATE INDEX idx_users_role ON public.users(role)","CREATE INDEX idx_users_is_active ON public.users(is_active)","CREATE INDEX idx_users_created_at ON public.users(created_at)","-- JSONB indexes for preferences and metadata\nCREATE INDEX idx_users_preferences ON public.users USING GIN (preferences)","CREATE INDEX idx_users_metadata ON public.users USING GIN (metadata)","-- =============================================================================\n-- ROW LEVEL SECURITY (RLS)\n-- =============================================================================\n\n-- Enable RLS on users table\nALTER TABLE public.users ENABLE ROW LEVEL SECURITY","-- Policy: Users can view their own profile\nCREATE POLICY \\"Users can view own profile\\" ON public.users\n  FOR SELECT USING (auth.uid() = id)","-- Policy: Users can update their own profile\nCREATE POLICY \\"Users can update own profile\\" ON public.users\n  FOR UPDATE USING (auth.uid() = id)","-- Policy: Admins can view all users\nCREATE POLICY \\"Admins can view all users\\" ON public.users\n  FOR SELECT USING (\n    EXISTS (\n      SELECT 1 FROM public.users \n      WHERE id = auth.uid() AND role = 'admin'\n    )\n  )","-- Policy: Admins can update all users\nCREATE POLICY \\"Admins can update all users\\" ON public.users\n  FOR UPDATE USING (\n    EXISTS (\n      SELECT 1 FROM public.users \n      WHERE id = auth.uid() AND role = 'admin'\n    )\n  )","-- Policy: Admins can insert new users\nCREATE POLICY \\"Admins can insert users\\" ON public.users\n  FOR INSERT WITH CHECK (\n    EXISTS (\n      SELECT 1 FROM public.users \n      WHERE id = auth.uid() AND role = 'admin'\n    )\n  )","-- =============================================================================\n-- FUNCTIONS AND TRIGGERS\n-- =============================================================================\n\n-- Function to handle user creation from auth.users\nCREATE OR REPLACE FUNCTION public.handle_new_user()\nRETURNS TRIGGER AS $$\nBEGIN\n  INSERT INTO public.users (id, email, full_name, avatar_url)\n  VALUES (\n    NEW.id,\n    NEW.email,\n    COALESCE(NEW.raw_user_meta_data->>'full_name', NEW.raw_user_meta_data->>'name'),\n    NEW.raw_user_meta_data->>'avatar_url'\n  );\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER","-- Trigger to automatically create user profile when auth user is created\nCREATE TRIGGER on_auth_user_created\n  AFTER INSERT ON auth.users\n  FOR EACH ROW EXECUTE FUNCTION public.handle_new_user()","-- Function to update updated_at timestamp\nCREATE OR REPLACE FUNCTION public.update_updated_at_column()\nRETURNS TRIGGER AS $$\nBEGIN\n  NEW.updated_at = NOW();\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql","-- Trigger to automatically update updated_at\nCREATE TRIGGER update_users_updated_at\n  BEFORE UPDATE ON public.users\n  FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column()","-- =============================================================================\n-- HELPER FUNCTIONS\n-- =============================================================================\n\n-- Function to check if user has specific role\nCREATE OR REPLACE FUNCTION public.user_has_role(user_id UUID, required_role TEXT)\nRETURNS BOOLEAN AS $$\nBEGIN\n  RETURN EXISTS (\n    SELECT 1 FROM public.users \n    WHERE id = user_id AND role = required_role\n  );\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER","-- Function to check if current user has specific role\nCREATE OR REPLACE FUNCTION public.current_user_has_role(required_role TEXT)\nRETURNS BOOLEAN AS $$\nBEGIN\n  RETURN public.user_has_role(auth.uid(), required_role);\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER","-- Function to get current user's role\nCREATE OR REPLACE FUNCTION public.get_current_user_role()\nRETURNS TEXT AS $$\nBEGIN\n  RETURN (\n    SELECT role FROM public.users \n    WHERE id = auth.uid()\n  );\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER","-- =============================================================================\n-- COMMENTS\n-- =============================================================================\n\nCOMMENT ON TABLE public.users IS 'User profiles extending Supabase auth.users with role-based access control'","COMMENT ON COLUMN public.users.role IS 'User role: user, admin, agent, or manager'","COMMENT ON COLUMN public.users.preferences IS 'User preferences stored as JSONB'","COMMENT ON COLUMN public.users.metadata IS 'Additional user metadata stored as JSONB'","-- =============================================================================\n-- GRANTS\n-- =============================================================================\n\n-- Grant necessary permissions\nGRANT USAGE ON SCHEMA public TO anon, authenticated","GRANT SELECT, INSERT, UPDATE ON public.users TO authenticated","GRANT EXECUTE ON FUNCTION public.handle_new_user() TO authenticated","GRANT EXECUTE ON FUNCTION public.user_has_role(UUID, TEXT) TO authenticated","GRANT EXECUTE ON FUNCTION public.current_user_has_role(TEXT) TO authenticated","GRANT EXECUTE ON FUNCTION public.get_current_user_role() TO authenticated"}	create_auth_and_users
20250112000002	{"-- =============================================================================\n-- MIGRATION: Address and Location Management\n-- =============================================================================\n-- Description: Creates addresses table with geocoding support and validation\n-- Version: 1.0.0\n-- Created: 2025-01-12\n\n-- =============================================================================\n-- ADDRESSES TABLE\n-- =============================================================================\n\nCREATE TABLE public.addresses (\n  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n  \n  -- Address components\n  street TEXT,\n  street2 TEXT, -- Apartment, suite, etc.\n  city TEXT,\n  state TEXT,\n  zip_code TEXT,\n  country TEXT DEFAULT 'US',\n  \n  -- Address type and classification\n  type TEXT CHECK (type IN ('Physical', 'Mailing', 'Business', 'Location', 'Billing', 'Shipping')),\n  \n  -- Validation and verification\n  is_verified BOOLEAN DEFAULT FALSE,\n  verification_source TEXT, -- 'USPS', 'Google', 'Manual', etc.\n  verification_date TIMESTAMP WITH TIME ZONE,\n  \n  -- Geocoding data\n  geocode_lat DECIMAL(10,8),\n  geocode_lng DECIMAL(11,8),\n  geocode_accuracy TEXT, -- 'ROOFTOP', 'RANGE_INTERPOLATED', 'GEOMETRIC_CENTER', 'APPROXIMATE'\n  geocode_source TEXT, -- 'Google', 'MapBox', 'Manual', etc.\n  geocode_date TIMESTAMP WITH TIME ZONE,\n  \n  -- Formatted address (standardized)\n  formatted_address TEXT,\n  \n  -- Additional location data\n  plus_code TEXT, -- Google Plus Code\n  place_id TEXT, -- Google Place ID or similar\n  \n  -- Metadata and custom fields\n  metadata JSONB DEFAULT '{}',\n  notes TEXT,\n  \n  -- Audit fields\n  created_by UUID REFERENCES public.users(id),\n  updated_by UUID REFERENCES public.users(id),\n  \n  -- Timestamps\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n)","-- =============================================================================\n-- INDEXES\n-- =============================================================================\n\n-- Basic lookup indexes\nCREATE INDEX idx_addresses_type ON public.addresses(type)","CREATE INDEX idx_addresses_city_state ON public.addresses(city, state)","CREATE INDEX idx_addresses_zip_code ON public.addresses(zip_code)","CREATE INDEX idx_addresses_is_verified ON public.addresses(is_verified)","-- Geographic indexes\nCREATE INDEX idx_addresses_geocode ON public.addresses(geocode_lat, geocode_lng) \n  WHERE geocode_lat IS NOT NULL AND geocode_lng IS NOT NULL","-- Full-text search index for address components\nCREATE INDEX idx_addresses_search ON public.addresses \n  USING GIN (to_tsvector('english', \n    COALESCE(street, '') || ' ' || \n    COALESCE(street2, '') || ' ' || \n    COALESCE(city, '') || ' ' || \n    COALESCE(state, '') || ' ' || \n    COALESCE(zip_code, '')\n  ))","-- JSONB index for metadata\nCREATE INDEX idx_addresses_metadata ON public.addresses USING GIN (metadata)","-- Audit indexes\nCREATE INDEX idx_addresses_created_by ON public.addresses(created_by)","CREATE INDEX idx_addresses_created_at ON public.addresses(created_at)","-- =============================================================================\n-- ROW LEVEL SECURITY (RLS)\n-- =============================================================================\n\n-- Enable RLS on addresses table\nALTER TABLE public.addresses ENABLE ROW LEVEL SECURITY","-- Policy: Users can view addresses they created or are associated with\nCREATE POLICY \\"Users can view own addresses\\" ON public.addresses\n  FOR SELECT USING (\n    created_by = auth.uid() OR\n    EXISTS (\n      SELECT 1 FROM public.users \n      WHERE id = auth.uid() AND role IN ('admin', 'manager')\n    )\n  )","-- Policy: Users can insert addresses\nCREATE POLICY \\"Users can insert addresses\\" ON public.addresses\n  FOR INSERT WITH CHECK (\n    auth.uid() IS NOT NULL\n  )","-- Policy: Users can update addresses they created\nCREATE POLICY \\"Users can update own addresses\\" ON public.addresses\n  FOR UPDATE USING (\n    created_by = auth.uid() OR\n    EXISTS (\n      SELECT 1 FROM public.users \n      WHERE id = auth.uid() AND role IN ('admin', 'manager')\n    )\n  )","-- Policy: Admins can delete addresses\nCREATE POLICY \\"Admins can delete addresses\\" ON public.addresses\n  FOR DELETE USING (\n    EXISTS (\n      SELECT 1 FROM public.users \n      WHERE id = auth.uid() AND role = 'admin'\n    )\n  )","-- =============================================================================\n-- FUNCTIONS AND TRIGGERS\n-- =============================================================================\n\n-- Function to update updated_at and updated_by\nCREATE OR REPLACE FUNCTION public.update_address_audit_fields()\nRETURNS TRIGGER AS $$\nBEGIN\n  NEW.updated_at = NOW();\n  NEW.updated_by = auth.uid();\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER","-- Trigger to automatically update audit fields\nCREATE TRIGGER update_addresses_audit_fields\n  BEFORE UPDATE ON public.addresses\n  FOR EACH ROW EXECUTE FUNCTION public.update_address_audit_fields()","-- Function to set created_by on insert\nCREATE OR REPLACE FUNCTION public.set_address_created_by()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF NEW.created_by IS NULL THEN\n    NEW.created_by = auth.uid();\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER","-- Trigger to set created_by\nCREATE TRIGGER set_addresses_created_by\n  BEFORE INSERT ON public.addresses\n  FOR EACH ROW EXECUTE FUNCTION public.set_address_created_by()","-- Function to format address components into a single string\nCREATE OR REPLACE FUNCTION public.format_address(\n  street TEXT DEFAULT NULL,\n  street2 TEXT DEFAULT NULL,\n  city TEXT DEFAULT NULL,\n  state TEXT DEFAULT NULL,\n  zip_code TEXT DEFAULT NULL,\n  country TEXT DEFAULT 'US'\n)\nRETURNS TEXT AS $$\nBEGIN\n  RETURN TRIM(\n    CONCAT_WS(', ',\n      NULLIF(TRIM(CONCAT_WS(' ', street, street2)), ''),\n      NULLIF(TRIM(city), ''),\n      NULLIF(TRIM(CONCAT_WS(' ', state, zip_code)), ''),\n      CASE WHEN country != 'US' THEN NULLIF(TRIM(country), '') ELSE NULL END\n    )\n  );\nEND;\n$$ LANGUAGE plpgsql IMMUTABLE","-- Function to update formatted_address automatically\nCREATE OR REPLACE FUNCTION public.update_formatted_address()\nRETURNS TRIGGER AS $$\nBEGIN\n  NEW.formatted_address = public.format_address(\n    NEW.street, NEW.street2, NEW.city, NEW.state, NEW.zip_code, NEW.country\n  );\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql","-- Trigger to automatically update formatted_address\nCREATE TRIGGER update_addresses_formatted_address\n  BEFORE INSERT OR UPDATE ON public.addresses\n  FOR EACH ROW EXECUTE FUNCTION public.update_formatted_address()","-- =============================================================================\n-- HELPER FUNCTIONS\n-- =============================================================================\n\n-- Function to calculate distance between two addresses (in miles)\nCREATE OR REPLACE FUNCTION public.address_distance_miles(\n  lat1 DECIMAL, lng1 DECIMAL, lat2 DECIMAL, lng2 DECIMAL\n)\nRETURNS DECIMAL AS $$\nBEGIN\n  IF lat1 IS NULL OR lng1 IS NULL OR lat2 IS NULL OR lng2 IS NULL THEN\n    RETURN NULL;\n  END IF;\n  \n  RETURN (\n    3959 * acos(\n      cos(radians(lat1)) * cos(radians(lat2)) * \n      cos(radians(lng2) - radians(lng1)) + \n      sin(radians(lat1)) * sin(radians(lat2))\n    )\n  );\nEND;\n$$ LANGUAGE plpgsql IMMUTABLE","-- Function to find addresses within a radius\nCREATE OR REPLACE FUNCTION public.addresses_within_radius(\n  center_lat DECIMAL, \n  center_lng DECIMAL, \n  radius_miles DECIMAL DEFAULT 10\n)\nRETURNS TABLE(\n  id UUID,\n  formatted_address TEXT,\n  distance_miles DECIMAL\n) AS $$\nBEGIN\n  RETURN QUERY\n  SELECT \n    a.id,\n    a.formatted_address,\n    public.address_distance_miles(center_lat, center_lng, a.geocode_lat, a.geocode_lng) as distance_miles\n  FROM public.addresses a\n  WHERE a.geocode_lat IS NOT NULL \n    AND a.geocode_lng IS NOT NULL\n    AND public.address_distance_miles(center_lat, center_lng, a.geocode_lat, a.geocode_lng) <= radius_miles\n  ORDER BY distance_miles;\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER","-- =============================================================================\n-- COMMENTS\n-- =============================================================================\n\nCOMMENT ON TABLE public.addresses IS 'Address management with geocoding and verification support'","COMMENT ON COLUMN public.addresses.type IS 'Address type: Physical, Mailing, Business, Location, Billing, or Shipping'","COMMENT ON COLUMN public.addresses.is_verified IS 'Whether the address has been verified against a postal service'","COMMENT ON COLUMN public.addresses.geocode_lat IS 'Latitude coordinate from geocoding service'","COMMENT ON COLUMN public.addresses.geocode_lng IS 'Longitude coordinate from geocoding service'","COMMENT ON COLUMN public.addresses.formatted_address IS 'Standardized formatted address string'","COMMENT ON COLUMN public.addresses.metadata IS 'Additional address metadata stored as JSONB'","-- =============================================================================\n-- GRANTS\n-- =============================================================================\n\n-- Grant necessary permissions\nGRANT SELECT, INSERT, UPDATE, DELETE ON public.addresses TO authenticated","GRANT EXECUTE ON FUNCTION public.format_address(TEXT, TEXT, TEXT, TEXT, TEXT, TEXT) TO authenticated","GRANT EXECUTE ON FUNCTION public.address_distance_miles(DECIMAL, DECIMAL, DECIMAL, DECIMAL) TO authenticated","GRANT EXECUTE ON FUNCTION public.addresses_within_radius(DECIMAL, DECIMAL, DECIMAL) TO authenticated"}	create_addresses
20250112000003	{"-- =============================================================================\n-- MIGRATION: Client and Lead Management\n-- =============================================================================\n-- Description: Creates clients and leads tables with AI fields, JSONB data, and proper relationships\n-- Version: 1.0.0\n-- Created: 2025-01-12\n\n-- =============================================================================\n-- CLIENTS TABLE\n-- =============================================================================\n\nCREATE TABLE public.clients (\n  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n  \n  -- Basic information\n  client_type TEXT NOT NULL CHECK (client_type IN ('Individual', 'Business')),\n  name TEXT NOT NULL,\n  email TEXT,\n  phone_number TEXT,\n  \n  -- Address relationships\n  address_id UUID REFERENCES public.addresses(id),\n  mailing_address_id UUID REFERENCES public.addresses(id),\n  \n  -- Individual-specific fields\n  date_of_birth TEXT,\n  gender TEXT,\n  marital_status TEXT,\n  drivers_license TEXT,\n  license_state TEXT,\n  education_occupation TEXT,\n  referred_by TEXT,\n  \n  -- Business-specific fields\n  business_type TEXT,\n  industry TEXT,\n  tax_id TEXT,\n  year_established TEXT,\n  annual_revenue DECIMAL(15,2),\n  number_of_employees INTEGER,\n  \n  -- AI fields\n  ai_summary TEXT,\n  ai_next_action TEXT,\n  ai_risk_score INTEGER CHECK (ai_risk_score >= 0 AND ai_risk_score <= 100),\n  ai_lifetime_value DECIMAL(15,2),\n  ai_insights JSONB DEFAULT '{}',\n  \n  -- Flexible data\n  metadata JSONB DEFAULT '{}',\n  tags TEXT[] DEFAULT '{}',\n  \n  -- Status and tracking\n  status TEXT DEFAULT 'Active' CHECK (status IN ('Active', 'Inactive', 'Prospect', 'Lost')),\n  source TEXT DEFAULT 'Manual Entry',\n  \n  -- Audit fields\n  created_by UUID REFERENCES public.users(id),\n  updated_by UUID REFERENCES public.users(id),\n  \n  -- Timestamps\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  last_contact_at TIMESTAMP WITH TIME ZONE,\n  next_contact_at TIMESTAMP WITH TIME ZONE,\n  converted_from_lead_id UUID -- Will reference leads table\n)","-- =============================================================================\n-- LEADS TABLE\n-- =============================================================================\n\nCREATE TABLE public.leads (\n  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n  \n  -- Relationships\n  client_id UUID REFERENCES public.clients(id) ON DELETE CASCADE,\n  assigned_to UUID REFERENCES public.users(id),\n  \n  -- Lead classification\n  lead_type TEXT DEFAULT 'Personal' CHECK (lead_type IN ('Personal', 'Business')),\n  priority TEXT DEFAULT 'Medium' CHECK (priority IN ('Low', 'Medium', 'High', 'Urgent')),\n  \n  -- Insurance information\n  current_carrier TEXT,\n  current_policy_expiry DATE,\n  \n  -- Premium information\n  premium DECIMAL(10,2),\n  auto_premium DECIMAL(10,2),\n  home_premium DECIMAL(10,2),\n  specialty_premium DECIMAL(10,2),\n  commercial_premium DECIMAL(10,2),\n  \n  -- Insurance-specific JSONB data with schema versioning\n  auto_data JSONB DEFAULT '{}',\n  auto_data_version INTEGER DEFAULT 1,\n  home_data JSONB DEFAULT '{}',\n  home_data_version INTEGER DEFAULT 1,\n  specialty_data JSONB DEFAULT '{}',\n  specialty_data_version INTEGER DEFAULT 1,\n  commercial_data JSONB DEFAULT '{}',\n  commercial_data_version INTEGER DEFAULT 1,\n  liability_data JSONB DEFAULT '{}',\n  liability_data_version INTEGER DEFAULT 1,\n  \n  -- Multi-party and multi-location data\n  additional_insureds JSONB DEFAULT '[]',\n  additional_locations JSONB DEFAULT '[]',\n  drivers JSONB DEFAULT '[]',\n  vehicles JSONB DEFAULT '[]',\n  \n  -- AI fields\n  ai_summary TEXT,\n  ai_next_action TEXT,\n  ai_quote_recommendation TEXT,\n  ai_follow_up_priority INTEGER CHECK (ai_follow_up_priority >= 1 AND ai_follow_up_priority <= 10),\n  ai_conversion_probability DECIMAL(5,2) CHECK (ai_conversion_probability >= 0 AND ai_conversion_probability <= 100),\n  ai_insights JSONB DEFAULT '{}',\n  \n  -- Marketing attribution\n  campaign_id UUID, -- Will reference campaigns table\n  ab_test_id UUID, -- Will reference ab_tests table\n  content_template_id UUID, -- Will reference content_templates table\n  attribution_data JSONB DEFAULT '{}',\n  \n  -- Flexible data\n  metadata JSONB DEFAULT '{}',\n  tags TEXT[] DEFAULT '{}',\n  notes TEXT,\n  custom_fields JSONB DEFAULT '{}',\n  \n  -- Import and source tracking\n  source TEXT DEFAULT 'Manual Entry',\n  import_file_name TEXT,\n  import_batch_id UUID,\n  \n  -- Status tracking\n  status TEXT DEFAULT 'New' CHECK (status IN ('New', 'Contacted', 'Qualified', 'Quoted', 'Sold', 'Lost', 'Hibernated')),\n  \n  -- Audit fields\n  created_by UUID REFERENCES public.users(id),\n  updated_by UUID REFERENCES public.users(id),\n  \n  -- Timestamps\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  status_changed_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  last_contact_at TIMESTAMP WITH TIME ZONE,\n  next_contact_at TIMESTAMP WITH TIME ZONE,\n  quote_generated_at TIMESTAMP WITH TIME ZONE,\n  sold_at TIMESTAMP WITH TIME ZONE,\n  lost_at TIMESTAMP WITH TIME ZONE,\n  hibernated_at TIMESTAMP WITH TIME ZONE\n)","-- Add foreign key constraint for converted_from_lead_id after leads table is created\nALTER TABLE public.clients \nADD CONSTRAINT fk_clients_converted_from_lead \nFOREIGN KEY (converted_from_lead_id) REFERENCES public.leads(id)","-- =============================================================================\n-- INDEXES\n-- =============================================================================\n\n-- Clients indexes\nCREATE INDEX idx_clients_email ON public.clients(email)","CREATE INDEX idx_clients_phone ON public.clients(phone_number)","CREATE INDEX idx_clients_type ON public.clients(client_type)","CREATE INDEX idx_clients_status ON public.clients(status)","CREATE INDEX idx_clients_source ON public.clients(source)","CREATE INDEX idx_clients_created_at ON public.clients(created_at)","CREATE INDEX idx_clients_created_by ON public.clients(created_by)","-- Clients JSONB indexes\nCREATE INDEX idx_clients_metadata ON public.clients USING GIN (metadata)","CREATE INDEX idx_clients_tags ON public.clients USING GIN (tags)","CREATE INDEX idx_clients_ai_insights ON public.clients USING GIN (ai_insights)","-- Clients full-text search\nCREATE INDEX idx_clients_search ON public.clients \n  USING GIN (to_tsvector('english', \n    COALESCE(name, '') || ' ' || \n    COALESCE(email, '') || ' ' || \n    COALESCE(phone_number, '') || ' ' ||\n    COALESCE(business_type, '') || ' ' ||\n    COALESCE(industry, '')\n  ))","-- Leads indexes\nCREATE INDEX idx_leads_client_id ON public.leads(client_id)","CREATE INDEX idx_leads_assigned_to ON public.leads(assigned_to)","CREATE INDEX idx_leads_status ON public.leads(status)","CREATE INDEX idx_leads_priority ON public.leads(priority)","CREATE INDEX idx_leads_lead_type ON public.leads(lead_type)","CREATE INDEX idx_leads_source ON public.leads(source)","CREATE INDEX idx_leads_created_at ON public.leads(created_at)","CREATE INDEX idx_leads_created_by ON public.leads(created_by)","CREATE INDEX idx_leads_next_contact_at ON public.leads(next_contact_at)","-- Leads JSONB indexes\nCREATE INDEX idx_leads_auto_data ON public.leads USING GIN (auto_data)","CREATE INDEX idx_leads_home_data ON public.leads USING GIN (home_data)","CREATE INDEX idx_leads_metadata ON public.leads USING GIN (metadata)","CREATE INDEX idx_leads_tags ON public.leads USING GIN (tags)","CREATE INDEX idx_leads_ai_insights ON public.leads USING GIN (ai_insights)","CREATE INDEX idx_leads_custom_fields ON public.leads USING GIN (custom_fields)","-- =============================================================================\n-- ROW LEVEL SECURITY (RLS)\n-- =============================================================================\n\n-- Enable RLS on both tables\nALTER TABLE public.clients ENABLE ROW LEVEL SECURITY","ALTER TABLE public.leads ENABLE ROW LEVEL SECURITY","-- Clients RLS policies\nCREATE POLICY \\"Users can view clients they created or are assigned to\\" ON public.clients\n  FOR SELECT USING (\n    created_by = auth.uid() OR\n    EXISTS (\n      SELECT 1 FROM public.users \n      WHERE id = auth.uid() AND role IN ('admin', 'manager')\n    ) OR\n    EXISTS (\n      SELECT 1 FROM public.leads \n      WHERE client_id = clients.id AND assigned_to = auth.uid()\n    )\n  )","CREATE POLICY \\"Users can insert clients\\" ON public.clients\n  FOR INSERT WITH CHECK (auth.uid() IS NOT NULL)","CREATE POLICY \\"Users can update clients they have access to\\" ON public.clients\n  FOR UPDATE USING (\n    created_by = auth.uid() OR\n    EXISTS (\n      SELECT 1 FROM public.users \n      WHERE id = auth.uid() AND role IN ('admin', 'manager')\n    ) OR\n    EXISTS (\n      SELECT 1 FROM public.leads \n      WHERE client_id = clients.id AND assigned_to = auth.uid()\n    )\n  )","-- Leads RLS policies\nCREATE POLICY \\"Users can view leads they created or are assigned to\\" ON public.leads\n  FOR SELECT USING (\n    created_by = auth.uid() OR\n    assigned_to = auth.uid() OR\n    EXISTS (\n      SELECT 1 FROM public.users \n      WHERE id = auth.uid() AND role IN ('admin', 'manager')\n    )\n  )","CREATE POLICY \\"Users can insert leads\\" ON public.leads\n  FOR INSERT WITH CHECK (auth.uid() IS NOT NULL)","CREATE POLICY \\"Users can update leads they have access to\\" ON public.leads\n  FOR UPDATE USING (\n    created_by = auth.uid() OR\n    assigned_to = auth.uid() OR\n    EXISTS (\n      SELECT 1 FROM public.users \n      WHERE id = auth.uid() AND role IN ('admin', 'manager')\n    )\n  )","-- =============================================================================\n-- FUNCTIONS AND TRIGGERS\n-- =============================================================================\n\n-- Function to update audit fields for clients\nCREATE OR REPLACE FUNCTION public.update_client_audit_fields()\nRETURNS TRIGGER AS $$\nBEGIN\n  NEW.updated_at = NOW();\n  NEW.updated_by = auth.uid();\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER","-- Function to update audit fields for leads\nCREATE OR REPLACE FUNCTION public.update_lead_audit_fields()\nRETURNS TRIGGER AS $$\nBEGIN\n  NEW.updated_at = NOW();\n  NEW.updated_by = auth.uid();\n  \n  -- Update status_changed_at if status changed\n  IF OLD.status IS DISTINCT FROM NEW.status THEN\n    NEW.status_changed_at = NOW();\n    \n    -- Set specific timestamp fields based on status\n    CASE NEW.status\n      WHEN 'Sold' THEN NEW.sold_at = NOW();\n      WHEN 'Lost' THEN NEW.lost_at = NOW();\n      WHEN 'Hibernated' THEN NEW.hibernated_at = NOW();\n      ELSE NULL;\n    END CASE;\n  END IF;\n  \n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER","-- Triggers for audit fields\nCREATE TRIGGER update_clients_audit_fields\n  BEFORE UPDATE ON public.clients\n  FOR EACH ROW EXECUTE FUNCTION public.update_client_audit_fields()","CREATE TRIGGER update_leads_audit_fields\n  BEFORE UPDATE ON public.leads\n  FOR EACH ROW EXECUTE FUNCTION public.update_lead_audit_fields()","-- Function to set created_by on insert\nCREATE OR REPLACE FUNCTION public.set_created_by()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF NEW.created_by IS NULL THEN\n    NEW.created_by = auth.uid();\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER","-- Triggers to set created_by\nCREATE TRIGGER set_clients_created_by\n  BEFORE INSERT ON public.clients\n  FOR EACH ROW EXECUTE FUNCTION public.set_created_by()","CREATE TRIGGER set_leads_created_by\n  BEFORE INSERT ON public.leads\n  FOR EACH ROW EXECUTE FUNCTION public.set_created_by()","-- =============================================================================\n-- COMMENTS\n-- =============================================================================\n\nCOMMENT ON TABLE public.clients IS 'Client management for both individual and business clients with AI insights'","COMMENT ON TABLE public.leads IS 'Lead management with insurance-specific data and AI-powered insights'","-- =============================================================================\n-- GRANTS\n-- =============================================================================\n\nGRANT SELECT, INSERT, UPDATE, DELETE ON public.clients TO authenticated","GRANT SELECT, INSERT, UPDATE, DELETE ON public.leads TO authenticated"}	create_clients_and_leads
20250112000004	{"-- =============================================================================\n-- MIGRATION: Insurance-Specific Tables\n-- =============================================================================\n-- Description: Creates vehicles, homes, specialty_items, quotes, and insurance types with proper indexing\n-- Version: 1.0.0\n-- Created: 2025-01-12\n\n-- =============================================================================\n-- INSURANCE TYPES TABLE\n-- =============================================================================\n\nCREATE TABLE public.insurance_types (\n  id SERIAL PRIMARY KEY,\n  name TEXT NOT NULL UNIQUE,\n  is_personal BOOLEAN DEFAULT TRUE,\n  is_commercial BOOLEAN DEFAULT FALSE,\n  description TEXT,\n  icon_name TEXT,\n  \n  -- Form configuration\n  form_schema JSONB DEFAULT '{}',\n  required_fields TEXT[] DEFAULT '{}',\n  optional_fields TEXT[] DEFAULT '{}',\n  \n  -- AI configuration\n  ai_prompt_template TEXT,\n  ai_risk_factors JSONB DEFAULT '{}',\n  \n  -- Display configuration\n  display_order INTEGER,\n  is_active BOOLEAN DEFAULT TRUE,\n  \n  -- Timestamps\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n)","-- =============================================================================\n-- VEHICLES TABLE\n-- =============================================================================\n\nCREATE TABLE public.vehicles (\n  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n  \n  -- Relationships\n  client_id UUID REFERENCES public.clients(id) ON DELETE CASCADE,\n  lead_id UUID REFERENCES public.leads(id) ON DELETE CASCADE,\n  \n  -- Vehicle identification\n  make TEXT NOT NULL,\n  model TEXT NOT NULL,\n  year INTEGER,\n  vin TEXT,\n  license_plate TEXT,\n  state TEXT,\n  \n  -- Vehicle details\n  body_style TEXT, -- Sedan, SUV, Truck, etc.\n  engine_size TEXT,\n  fuel_type TEXT, -- Gas, Diesel, Electric, Hybrid\n  transmission TEXT, -- Manual, Automatic\n  color TEXT,\n  \n  -- Usage information\n  primary_use TEXT, -- Personal, Business, Farm, etc.\n  annual_mileage INTEGER,\n  garage_location TEXT, -- Garage, Driveway, Street, etc.\n  \n  -- Insurance information\n  current_coverage JSONB DEFAULT '{}',\n  coverage_limits JSONB DEFAULT '{}',\n  deductibles JSONB DEFAULT '{}',\n  \n  -- Vehicle value\n  purchase_price DECIMAL(12,2),\n  current_value DECIMAL(12,2),\n  loan_balance DECIMAL(12,2),\n  \n  -- Safety and features\n  safety_features TEXT[] DEFAULT '{}',\n  anti_theft_devices TEXT[] DEFAULT '{}',\n  \n  -- Metadata\n  metadata JSONB DEFAULT '{}',\n  notes TEXT,\n  \n  -- Audit fields\n  created_by UUID REFERENCES public.users(id),\n  updated_by UUID REFERENCES public.users(id),\n  \n  -- Timestamps\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n)","-- =============================================================================\n-- HOMES TABLE\n-- =============================================================================\n\nCREATE TABLE public.homes (\n  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n  \n  -- Relationships\n  client_id UUID REFERENCES public.clients(id) ON DELETE CASCADE,\n  lead_id UUID REFERENCES public.leads(id) ON DELETE CASCADE,\n  address_id UUID REFERENCES public.addresses(id),\n  \n  -- Property details\n  property_type TEXT, -- Single Family, Condo, Townhouse, etc.\n  year_built INTEGER,\n  square_feet INTEGER,\n  lot_size DECIMAL(10,2),\n  bedrooms INTEGER,\n  bathrooms DECIMAL(3,1),\n  stories INTEGER,\n  \n  -- Construction details\n  construction_type TEXT, -- Frame, Masonry, Steel, etc.\n  roof_type TEXT, -- Shingle, Tile, Metal, etc.\n  roof_age INTEGER,\n  foundation_type TEXT,\n  heating_type TEXT,\n  cooling_type TEXT,\n  \n  -- Property value\n  purchase_price DECIMAL(15,2),\n  current_value DECIMAL(15,2),\n  mortgage_balance DECIMAL(15,2),\n  \n  -- Insurance information\n  current_coverage JSONB DEFAULT '{}',\n  coverage_limits JSONB DEFAULT '{}',\n  deductibles JSONB DEFAULT '{}',\n  \n  -- Safety and features\n  safety_features TEXT[] DEFAULT '{}',\n  security_features TEXT[] DEFAULT '{}',\n  \n  -- Risk factors\n  distance_to_fire_station DECIMAL(5,2), -- in miles\n  distance_to_coast DECIMAL(5,2), -- in miles\n  flood_zone TEXT,\n  wildfire_risk TEXT,\n  earthquake_risk TEXT,\n  \n  -- Metadata\n  metadata JSONB DEFAULT '{}',\n  notes TEXT,\n  \n  -- Audit fields\n  created_by UUID REFERENCES public.users(id),\n  updated_by UUID REFERENCES public.users(id),\n  \n  -- Timestamps\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n)","-- =============================================================================\n-- SPECIALTY ITEMS TABLE\n-- =============================================================================\n\nCREATE TABLE public.specialty_items (\n  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n  \n  -- Relationships\n  client_id UUID REFERENCES public.clients(id) ON DELETE CASCADE,\n  lead_id UUID REFERENCES public.leads(id) ON DELETE CASCADE,\n  \n  -- Item details\n  name TEXT NOT NULL,\n  category TEXT, -- Jewelry, Art, Collectibles, Electronics, etc.\n  description TEXT,\n  brand TEXT,\n  model TEXT,\n  serial_number TEXT,\n  \n  -- Value information\n  appraised_value DECIMAL(15,2),\n  purchase_price DECIMAL(15,2),\n  current_value DECIMAL(15,2),\n  appraisal_date DATE,\n  appraiser_name TEXT,\n  \n  -- Coverage information\n  coverage_type TEXT, -- Scheduled, Blanket, etc.\n  coverage_limit DECIMAL(15,2),\n  deductible DECIMAL(10,2),\n  \n  -- Storage and security\n  storage_location TEXT,\n  security_measures TEXT[] DEFAULT '{}',\n  \n  -- Documentation\n  photos TEXT[] DEFAULT '{}',\n  documents TEXT[] DEFAULT '{}',\n  \n  -- Metadata\n  metadata JSONB DEFAULT '{}',\n  notes TEXT,\n  \n  -- Audit fields\n  created_by UUID REFERENCES public.users(id),\n  updated_by UUID REFERENCES public.users(id),\n  \n  -- Timestamps\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n)","-- =============================================================================\n-- QUOTES TABLE\n-- =============================================================================\n\nCREATE TABLE public.quotes (\n  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n  \n  -- Relationships\n  lead_id UUID NOT NULL REFERENCES public.leads(id) ON DELETE CASCADE,\n  insurance_type_id INTEGER REFERENCES public.insurance_types(id),\n  \n  -- Quote details\n  carrier TEXT NOT NULL,\n  policy_number TEXT,\n  quote_number TEXT,\n  \n  -- Pricing\n  paid_in_full_amount DECIMAL(10,2),\n  monthly_payment_amount DECIMAL(10,2),\n  down_payment_amount DECIMAL(10,2),\n  \n  -- Terms\n  contract_term TEXT CHECK (contract_term IN ('6mo', '12mo', '24mo')),\n  effective_date DATE,\n  expiration_date DATE,\n  \n  -- Coverage details\n  coverage_details JSONB DEFAULT '{}',\n  limits JSONB DEFAULT '{}',\n  deductibles JSONB DEFAULT '{}',\n  \n  -- Quote status\n  status TEXT DEFAULT 'Draft' CHECK (status IN ('Draft', 'Pending', 'Approved', 'Declined', 'Expired', 'Bound')),\n  \n  -- Comparison data\n  competitor_quotes JSONB DEFAULT '[]',\n  savings_amount DECIMAL(10,2),\n  savings_percentage DECIMAL(5,2),\n  \n  -- AI insights\n  ai_recommendation TEXT,\n  ai_risk_assessment JSONB DEFAULT '{}',\n  ai_pricing_factors JSONB DEFAULT '{}',\n  \n  -- Metadata\n  metadata JSONB DEFAULT '{}',\n  notes TEXT,\n  \n  -- Audit fields\n  created_by UUID REFERENCES public.users(id),\n  updated_by UUID REFERENCES public.users(id),\n  \n  -- Timestamps\n  quote_date TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  bound_at TIMESTAMP WITH TIME ZONE,\n  expired_at TIMESTAMP WITH TIME ZONE\n)","-- =============================================================================\n-- INDEXES\n-- =============================================================================\n\n-- Insurance types indexes\nCREATE INDEX idx_insurance_types_name ON public.insurance_types(name)","CREATE INDEX idx_insurance_types_is_active ON public.insurance_types(is_active)","CREATE INDEX idx_insurance_types_display_order ON public.insurance_types(display_order)","-- Vehicles indexes\nCREATE INDEX idx_vehicles_client_id ON public.vehicles(client_id)","CREATE INDEX idx_vehicles_lead_id ON public.vehicles(lead_id)","CREATE INDEX idx_vehicles_make_model ON public.vehicles(make, model)","CREATE INDEX idx_vehicles_year ON public.vehicles(year)","CREATE INDEX idx_vehicles_vin ON public.vehicles(vin)","CREATE INDEX idx_vehicles_created_at ON public.vehicles(created_at)","-- Homes indexes\nCREATE INDEX idx_homes_client_id ON public.homes(client_id)","CREATE INDEX idx_homes_lead_id ON public.homes(lead_id)","CREATE INDEX idx_homes_address_id ON public.homes(address_id)","CREATE INDEX idx_homes_property_type ON public.homes(property_type)","CREATE INDEX idx_homes_year_built ON public.homes(year_built)","CREATE INDEX idx_homes_created_at ON public.homes(created_at)","-- Specialty items indexes\nCREATE INDEX idx_specialty_items_client_id ON public.specialty_items(client_id)","CREATE INDEX idx_specialty_items_lead_id ON public.specialty_items(lead_id)","CREATE INDEX idx_specialty_items_category ON public.specialty_items(category)","CREATE INDEX idx_specialty_items_value ON public.specialty_items(current_value)","CREATE INDEX idx_specialty_items_created_at ON public.specialty_items(created_at)","-- Quotes indexes\nCREATE INDEX idx_quotes_lead_id ON public.quotes(lead_id)","CREATE INDEX idx_quotes_insurance_type_id ON public.quotes(insurance_type_id)","CREATE INDEX idx_quotes_carrier ON public.quotes(carrier)","CREATE INDEX idx_quotes_status ON public.quotes(status)","CREATE INDEX idx_quotes_quote_date ON public.quotes(quote_date)","CREATE INDEX idx_quotes_effective_date ON public.quotes(effective_date)","-- JSONB indexes\nCREATE INDEX idx_vehicles_metadata ON public.vehicles USING GIN (metadata)","CREATE INDEX idx_homes_metadata ON public.homes USING GIN (metadata)","CREATE INDEX idx_specialty_items_metadata ON public.specialty_items USING GIN (metadata)","CREATE INDEX idx_quotes_coverage_details ON public.quotes USING GIN (coverage_details)","CREATE INDEX idx_quotes_metadata ON public.quotes USING GIN (metadata)","-- =============================================================================\n-- ROW LEVEL SECURITY (RLS)\n-- =============================================================================\n\n-- Enable RLS on all tables\nALTER TABLE public.insurance_types ENABLE ROW LEVEL SECURITY","ALTER TABLE public.vehicles ENABLE ROW LEVEL SECURITY","ALTER TABLE public.homes ENABLE ROW LEVEL SECURITY","ALTER TABLE public.specialty_items ENABLE ROW LEVEL SECURITY","ALTER TABLE public.quotes ENABLE ROW LEVEL SECURITY","-- Insurance types - readable by all authenticated users\nCREATE POLICY \\"Insurance types are viewable by all users\\" ON public.insurance_types\n  FOR SELECT USING (auth.uid() IS NOT NULL)","CREATE POLICY \\"Admins can manage insurance types\\" ON public.insurance_types\n  FOR ALL USING (\n    EXISTS (\n      SELECT 1 FROM public.users \n      WHERE id = auth.uid() AND role = 'admin'\n    )\n  )","-- Vehicles, homes, specialty items - same pattern\nCREATE POLICY \\"Users can view vehicles they have access to\\" ON public.vehicles\n  FOR SELECT USING (\n    created_by = auth.uid() OR\n    EXISTS (\n      SELECT 1 FROM public.clients c \n      WHERE c.id = vehicles.client_id AND c.created_by = auth.uid()\n    ) OR\n    EXISTS (\n      SELECT 1 FROM public.leads l \n      WHERE l.id = vehicles.lead_id AND (l.created_by = auth.uid() OR l.assigned_to = auth.uid())\n    ) OR\n    EXISTS (\n      SELECT 1 FROM public.users \n      WHERE id = auth.uid() AND role IN ('admin', 'manager')\n    )\n  )","-- Similar policies for homes and specialty_items (abbreviated for space)\nCREATE POLICY \\"Users can view homes they have access to\\" ON public.homes\n  FOR SELECT USING (\n    created_by = auth.uid() OR\n    EXISTS (SELECT 1 FROM public.clients c WHERE c.id = homes.client_id AND c.created_by = auth.uid()) OR\n    EXISTS (SELECT 1 FROM public.leads l WHERE l.id = homes.lead_id AND (l.created_by = auth.uid() OR l.assigned_to = auth.uid())) OR\n    EXISTS (SELECT 1 FROM public.users WHERE id = auth.uid() AND role IN ('admin', 'manager'))\n  )","CREATE POLICY \\"Users can view specialty items they have access to\\" ON public.specialty_items\n  FOR SELECT USING (\n    created_by = auth.uid() OR\n    EXISTS (SELECT 1 FROM public.clients c WHERE c.id = specialty_items.client_id AND c.created_by = auth.uid()) OR\n    EXISTS (SELECT 1 FROM public.leads l WHERE l.id = specialty_items.lead_id AND (l.created_by = auth.uid() OR l.assigned_to = auth.uid())) OR\n    EXISTS (SELECT 1 FROM public.users WHERE id = auth.uid() AND role IN ('admin', 'manager'))\n  )","CREATE POLICY \\"Users can view quotes they have access to\\" ON public.quotes\n  FOR SELECT USING (\n    created_by = auth.uid() OR\n    EXISTS (SELECT 1 FROM public.leads l WHERE l.id = quotes.lead_id AND (l.created_by = auth.uid() OR l.assigned_to = auth.uid())) OR\n    EXISTS (SELECT 1 FROM public.users WHERE id = auth.uid() AND role IN ('admin', 'manager'))\n  )","-- Insert/Update policies (abbreviated)\nCREATE POLICY \\"Users can insert vehicles\\" ON public.vehicles FOR INSERT WITH CHECK (auth.uid() IS NOT NULL)","CREATE POLICY \\"Users can insert homes\\" ON public.homes FOR INSERT WITH CHECK (auth.uid() IS NOT NULL)","CREATE POLICY \\"Users can insert specialty items\\" ON public.specialty_items FOR INSERT WITH CHECK (auth.uid() IS NOT NULL)","CREATE POLICY \\"Users can insert quotes\\" ON public.quotes FOR INSERT WITH CHECK (auth.uid() IS NOT NULL)","-- =============================================================================\n-- TRIGGERS\n-- =============================================================================\n\n-- Apply audit field triggers to all tables\nCREATE TRIGGER update_vehicles_audit_fields\n  BEFORE UPDATE ON public.vehicles\n  FOR EACH ROW EXECUTE FUNCTION public.update_address_audit_fields()","CREATE TRIGGER update_homes_audit_fields\n  BEFORE UPDATE ON public.homes\n  FOR EACH ROW EXECUTE FUNCTION public.update_address_audit_fields()","CREATE TRIGGER update_specialty_items_audit_fields\n  BEFORE UPDATE ON public.specialty_items\n  FOR EACH ROW EXECUTE FUNCTION public.update_address_audit_fields()","CREATE TRIGGER update_quotes_audit_fields\n  BEFORE UPDATE ON public.quotes\n  FOR EACH ROW EXECUTE FUNCTION public.update_address_audit_fields()","-- Set created_by triggers\nCREATE TRIGGER set_vehicles_created_by\n  BEFORE INSERT ON public.vehicles\n  FOR EACH ROW EXECUTE FUNCTION public.set_created_by()","CREATE TRIGGER set_homes_created_by\n  BEFORE INSERT ON public.homes\n  FOR EACH ROW EXECUTE FUNCTION public.set_created_by()","CREATE TRIGGER set_specialty_items_created_by\n  BEFORE INSERT ON public.specialty_items\n  FOR EACH ROW EXECUTE FUNCTION public.set_created_by()","CREATE TRIGGER set_quotes_created_by\n  BEFORE INSERT ON public.quotes\n  FOR EACH ROW EXECUTE FUNCTION public.set_created_by()","-- =============================================================================\n-- COMMENTS\n-- =============================================================================\n\nCOMMENT ON TABLE public.insurance_types IS 'Insurance product types with form schemas and AI configuration'","COMMENT ON TABLE public.vehicles IS 'Vehicle information for auto insurance quotes'","COMMENT ON TABLE public.homes IS 'Property information for home insurance quotes'","COMMENT ON TABLE public.specialty_items IS 'High-value items requiring special coverage'","COMMENT ON TABLE public.quotes IS 'Insurance quotes with pricing and coverage details'","-- =============================================================================\n-- GRANTS\n-- =============================================================================\n\nGRANT SELECT ON public.insurance_types TO authenticated","GRANT SELECT, INSERT, UPDATE, DELETE ON public.vehicles TO authenticated","GRANT SELECT, INSERT, UPDATE, DELETE ON public.homes TO authenticated","GRANT SELECT, INSERT, UPDATE, DELETE ON public.specialty_items TO authenticated","GRANT SELECT, INSERT, UPDATE, DELETE ON public.quotes TO authenticated"}	create_insurance_tables
20250112000005	{"-- =============================================================================\n-- MIGRATION: Pipeline and Status Management\n-- =============================================================================\n-- Description: Creates pipelines, pipeline_statuses, and lead_statuses with AI action templates\n-- Version: 1.0.0\n-- Created: 2025-01-12\n\n-- =============================================================================\n-- LEAD STATUSES TABLE\n-- =============================================================================\n\nCREATE TABLE public.lead_statuses (\n  id SERIAL PRIMARY KEY,\n  value TEXT NOT NULL UNIQUE,\n  description TEXT,\n  \n  -- Status configuration\n  is_final BOOLEAN DEFAULT FALSE,\n  is_active BOOLEAN DEFAULT TRUE,\n  display_order INTEGER,\n  \n  -- UI configuration\n  color_hex TEXT,\n  icon_name TEXT,\n  badge_variant TEXT DEFAULT 'default',\n  \n  -- AI configuration\n  ai_action_template TEXT,\n  ai_follow_up_suggestions JSONB DEFAULT '[]',\n  ai_next_steps JSONB DEFAULT '[]',\n  \n  -- Automation configuration\n  auto_actions JSONB DEFAULT '{}',\n  notification_settings JSONB DEFAULT '{}',\n  \n  -- Metadata\n  metadata JSONB DEFAULT '{}',\n  \n  -- Timestamps\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n)","-- =============================================================================\n-- PIPELINES TABLE\n-- =============================================================================\n\nCREATE TABLE public.pipelines (\n  id SERIAL PRIMARY KEY,\n  name TEXT NOT NULL,\n  description TEXT,\n  \n  -- Pipeline configuration\n  is_default BOOLEAN DEFAULT FALSE,\n  is_active BOOLEAN DEFAULT TRUE,\n  display_order INTEGER,\n  \n  -- Pipeline type and targeting\n  lead_type TEXT DEFAULT 'Personal' CHECK (lead_type IN ('Personal', 'Business', 'Both')),\n  insurance_types INTEGER[] DEFAULT '{}', -- Array of insurance_type IDs\n  \n  -- Conversion tracking\n  conversion_goals JSONB DEFAULT '{}',\n  target_conversion_rate DECIMAL(5,2),\n  average_cycle_time INTEGER, -- in days\n  \n  -- AI configuration\n  ai_optimization_enabled BOOLEAN DEFAULT FALSE,\n  ai_scoring_model JSONB DEFAULT '{}',\n  ai_automation_rules JSONB DEFAULT '{}',\n  \n  -- Metadata\n  metadata JSONB DEFAULT '{}',\n  \n  -- Audit fields\n  created_by UUID REFERENCES public.users(id),\n  updated_by UUID REFERENCES public.users(id),\n  \n  -- Timestamps\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n)","-- =============================================================================\n-- PIPELINE STATUSES TABLE\n-- =============================================================================\n\nCREATE TABLE public.pipeline_statuses (\n  id SERIAL PRIMARY KEY,\n  pipeline_id INTEGER REFERENCES public.pipelines(id) ON DELETE CASCADE,\n  name TEXT NOT NULL,\n  description TEXT,\n  \n  -- Status configuration\n  is_final BOOLEAN DEFAULT FALSE,\n  is_active BOOLEAN DEFAULT TRUE,\n  display_order INTEGER NOT NULL,\n  \n  -- UI configuration\n  color_hex TEXT,\n  icon_name TEXT,\n  badge_variant TEXT DEFAULT 'default',\n  \n  -- Stage configuration\n  stage_type TEXT DEFAULT 'active' CHECK (stage_type IN ('active', 'waiting', 'final')),\n  required_fields TEXT[] DEFAULT '{}',\n  optional_fields TEXT[] DEFAULT '{}',\n  \n  -- Time tracking\n  target_duration INTEGER, -- Expected time in this status (days)\n  max_duration INTEGER, -- Maximum time before escalation (days)\n  \n  -- AI configuration\n  ai_action_template TEXT,\n  ai_follow_up_suggestions JSONB DEFAULT '[]',\n  ai_next_steps JSONB DEFAULT '[]',\n  ai_exit_criteria JSONB DEFAULT '{}',\n  \n  -- Automation configuration\n  auto_actions JSONB DEFAULT '{}',\n  notification_settings JSONB DEFAULT '{}',\n  escalation_rules JSONB DEFAULT '{}',\n  \n  -- Conversion tracking\n  conversion_probability DECIMAL(5,2), -- Expected conversion rate from this stage\n  \n  -- Metadata\n  metadata JSONB DEFAULT '{}',\n  \n  -- Timestamps\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  \n  -- Constraints\n  UNIQUE(pipeline_id, display_order),\n  UNIQUE(pipeline_id, name)\n)","-- =============================================================================\n-- LEAD STATUS HISTORY TABLE\n-- =============================================================================\n\nCREATE TABLE public.lead_status_history (\n  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n  lead_id UUID NOT NULL REFERENCES public.leads(id) ON DELETE CASCADE,\n  \n  -- Status change details\n  from_status TEXT,\n  to_status TEXT NOT NULL,\n  from_pipeline_status_id INTEGER REFERENCES public.pipeline_statuses(id),\n  to_pipeline_status_id INTEGER REFERENCES public.pipeline_statuses(id),\n  \n  -- Change context\n  reason TEXT,\n  notes TEXT,\n  automated BOOLEAN DEFAULT FALSE,\n  \n  -- Duration tracking\n  duration_in_previous_status INTEGER, -- in hours\n  \n  -- AI insights\n  ai_trigger TEXT, -- What AI action triggered this change\n  ai_confidence DECIMAL(5,2), -- AI confidence in this status change\n  \n  -- Metadata\n  metadata JSONB DEFAULT '{}',\n  \n  -- Audit fields\n  changed_by UUID REFERENCES public.users(id),\n  \n  -- Timestamps\n  changed_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n)","-- =============================================================================\n-- INDEXES\n-- =============================================================================\n\n-- Lead statuses indexes\nCREATE INDEX idx_lead_statuses_value ON public.lead_statuses(value)","CREATE INDEX idx_lead_statuses_is_active ON public.lead_statuses(is_active)","CREATE INDEX idx_lead_statuses_display_order ON public.lead_statuses(display_order)","-- Pipelines indexes\nCREATE INDEX idx_pipelines_name ON public.pipelines(name)","CREATE INDEX idx_pipelines_is_default ON public.pipelines(is_default)","CREATE INDEX idx_pipelines_is_active ON public.pipelines(is_active)","CREATE INDEX idx_pipelines_lead_type ON public.pipelines(lead_type)","CREATE INDEX idx_pipelines_display_order ON public.pipelines(display_order)","CREATE INDEX idx_pipelines_created_by ON public.pipelines(created_by)","-- Pipeline statuses indexes\nCREATE INDEX idx_pipeline_statuses_pipeline_id ON public.pipeline_statuses(pipeline_id)","CREATE INDEX idx_pipeline_statuses_name ON public.pipeline_statuses(name)","CREATE INDEX idx_pipeline_statuses_is_active ON public.pipeline_statuses(is_active)","CREATE INDEX idx_pipeline_statuses_display_order ON public.pipeline_statuses(display_order)","CREATE INDEX idx_pipeline_statuses_stage_type ON public.pipeline_statuses(stage_type)","-- Lead status history indexes\nCREATE INDEX idx_lead_status_history_lead_id ON public.lead_status_history(lead_id)","CREATE INDEX idx_lead_status_history_to_status ON public.lead_status_history(to_status)","CREATE INDEX idx_lead_status_history_changed_at ON public.lead_status_history(changed_at)","CREATE INDEX idx_lead_status_history_changed_by ON public.lead_status_history(changed_by)","CREATE INDEX idx_lead_status_history_automated ON public.lead_status_history(automated)","-- JSONB indexes\nCREATE INDEX idx_lead_statuses_metadata ON public.lead_statuses USING GIN (metadata)","CREATE INDEX idx_pipelines_metadata ON public.pipelines USING GIN (metadata)","CREATE INDEX idx_pipeline_statuses_metadata ON public.pipeline_statuses USING GIN (metadata)","CREATE INDEX idx_lead_status_history_metadata ON public.lead_status_history USING GIN (metadata)","-- =============================================================================\n-- ROW LEVEL SECURITY (RLS)\n-- =============================================================================\n\n-- Enable RLS on all tables\nALTER TABLE public.lead_statuses ENABLE ROW LEVEL SECURITY","ALTER TABLE public.pipelines ENABLE ROW LEVEL SECURITY","ALTER TABLE public.pipeline_statuses ENABLE ROW LEVEL SECURITY","ALTER TABLE public.lead_status_history ENABLE ROW LEVEL SECURITY","-- Lead statuses - readable by all authenticated users\nCREATE POLICY \\"Lead statuses are viewable by all users\\" ON public.lead_statuses\n  FOR SELECT USING (auth.uid() IS NOT NULL)","CREATE POLICY \\"Admins can manage lead statuses\\" ON public.lead_statuses\n  FOR ALL USING (\n    EXISTS (\n      SELECT 1 FROM public.users \n      WHERE id = auth.uid() AND role = 'admin'\n    )\n  )","-- Pipelines - readable by all, manageable by admins/managers\nCREATE POLICY \\"Pipelines are viewable by all users\\" ON public.pipelines\n  FOR SELECT USING (auth.uid() IS NOT NULL)","CREATE POLICY \\"Managers can manage pipelines\\" ON public.pipelines\n  FOR ALL USING (\n    EXISTS (\n      SELECT 1 FROM public.users \n      WHERE id = auth.uid() AND role IN ('admin', 'manager')\n    )\n  )","-- Pipeline statuses - readable by all, manageable by admins/managers\nCREATE POLICY \\"Pipeline statuses are viewable by all users\\" ON public.pipeline_statuses\n  FOR SELECT USING (auth.uid() IS NOT NULL)","CREATE POLICY \\"Managers can manage pipeline statuses\\" ON public.pipeline_statuses\n  FOR ALL USING (\n    EXISTS (\n      SELECT 1 FROM public.users \n      WHERE id = auth.uid() AND role IN ('admin', 'manager')\n    )\n  )","-- Lead status history - users can view history for leads they have access to\nCREATE POLICY \\"Users can view lead status history they have access to\\" ON public.lead_status_history\n  FOR SELECT USING (\n    EXISTS (\n      SELECT 1 FROM public.leads l \n      WHERE l.id = lead_status_history.lead_id \n      AND (l.created_by = auth.uid() OR l.assigned_to = auth.uid())\n    ) OR\n    EXISTS (\n      SELECT 1 FROM public.users \n      WHERE id = auth.uid() AND role IN ('admin', 'manager')\n    )\n  )","CREATE POLICY \\"Users can insert lead status history\\" ON public.lead_status_history\n  FOR INSERT WITH CHECK (auth.uid() IS NOT NULL)","-- =============================================================================\n-- FUNCTIONS AND TRIGGERS\n-- =============================================================================\n\n-- Function to update pipeline references in leads table\nALTER TABLE public.leads ADD COLUMN IF NOT EXISTS pipeline_id INTEGER REFERENCES public.pipelines(id)","ALTER TABLE public.leads ADD COLUMN IF NOT EXISTS pipeline_status_id INTEGER REFERENCES public.pipeline_statuses(id)","-- Function to track lead status changes\nCREATE OR REPLACE FUNCTION public.track_lead_status_change()\nRETURNS TRIGGER AS $$\nDECLARE\n  duration_hours INTEGER;\n  previous_history RECORD;\nBEGIN\n  -- Calculate duration in previous status\n  SELECT changed_at INTO previous_history\n  FROM public.lead_status_history \n  WHERE lead_id = NEW.id \n  ORDER BY changed_at DESC \n  LIMIT 1;\n  \n  IF previous_history.changed_at IS NOT NULL THEN\n    duration_hours := EXTRACT(EPOCH FROM (NOW() - previous_history.changed_at)) / 3600;\n  ELSE\n    duration_hours := EXTRACT(EPOCH FROM (NOW() - NEW.created_at)) / 3600;\n  END IF;\n  \n  -- Insert status change record if status actually changed\n  IF OLD.status IS DISTINCT FROM NEW.status OR OLD.pipeline_status_id IS DISTINCT FROM NEW.pipeline_status_id THEN\n    INSERT INTO public.lead_status_history (\n      lead_id,\n      from_status,\n      to_status,\n      from_pipeline_status_id,\n      to_pipeline_status_id,\n      duration_in_previous_status,\n      changed_by,\n      automated\n    ) VALUES (\n      NEW.id,\n      OLD.status,\n      NEW.status,\n      OLD.pipeline_status_id,\n      NEW.pipeline_status_id,\n      duration_hours,\n      auth.uid(),\n      FALSE -- Assume manual unless specified otherwise\n    );\n  END IF;\n  \n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER","-- Trigger to track lead status changes\nCREATE TRIGGER track_lead_status_changes\n  AFTER UPDATE ON public.leads\n  FOR EACH ROW EXECUTE FUNCTION public.track_lead_status_change()","-- Function to ensure only one default pipeline per lead type\nCREATE OR REPLACE FUNCTION public.ensure_single_default_pipeline()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF NEW.is_default = TRUE THEN\n    -- Remove default flag from other pipelines of the same lead type\n    UPDATE public.pipelines \n    SET is_default = FALSE \n    WHERE lead_type = NEW.lead_type \n    AND id != NEW.id \n    AND is_default = TRUE;\n  END IF;\n  \n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql","-- Trigger to ensure single default pipeline\nCREATE TRIGGER ensure_single_default_pipeline\n  BEFORE INSERT OR UPDATE ON public.pipelines\n  FOR EACH ROW EXECUTE FUNCTION public.ensure_single_default_pipeline()","-- Apply standard audit triggers\nCREATE TRIGGER update_pipelines_audit_fields\n  BEFORE UPDATE ON public.pipelines\n  FOR EACH ROW EXECUTE FUNCTION public.update_address_audit_fields()","CREATE TRIGGER set_pipelines_created_by\n  BEFORE INSERT ON public.pipelines\n  FOR EACH ROW EXECUTE FUNCTION public.set_created_by()","-- =============================================================================\n-- HELPER FUNCTIONS\n-- =============================================================================\n\n-- Function to get default pipeline for lead type\nCREATE OR REPLACE FUNCTION public.get_default_pipeline(lead_type_param TEXT DEFAULT 'Personal')\nRETURNS INTEGER AS $$\nBEGIN\n  RETURN (\n    SELECT id FROM public.pipelines \n    WHERE lead_type IN (lead_type_param, 'Both') \n    AND is_default = TRUE \n    AND is_active = TRUE\n    LIMIT 1\n  );\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER","-- Function to get first status in pipeline\nCREATE OR REPLACE FUNCTION public.get_first_pipeline_status(pipeline_id_param INTEGER)\nRETURNS INTEGER AS $$\nBEGIN\n  RETURN (\n    SELECT id FROM public.pipeline_statuses \n    WHERE pipeline_id = pipeline_id_param \n    AND is_active = TRUE\n    ORDER BY display_order ASC\n    LIMIT 1\n  );\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER","-- =============================================================================\n-- COMMENTS\n-- =============================================================================\n\nCOMMENT ON TABLE public.lead_statuses IS 'Global lead status definitions with AI action templates'","COMMENT ON TABLE public.pipelines IS 'Sales pipelines for different lead types and insurance products'","COMMENT ON TABLE public.pipeline_statuses IS 'Status definitions within specific pipelines'","COMMENT ON TABLE public.lead_status_history IS 'Historical tracking of lead status changes'","-- =============================================================================\n-- GRANTS\n-- =============================================================================\n\nGRANT SELECT ON public.lead_statuses TO authenticated","GRANT SELECT ON public.pipelines TO authenticated","GRANT SELECT ON public.pipeline_statuses TO authenticated","GRANT SELECT, INSERT ON public.lead_status_history TO authenticated","GRANT EXECUTE ON FUNCTION public.get_default_pipeline(TEXT) TO authenticated","GRANT EXECUTE ON FUNCTION public.get_first_pipeline_status(INTEGER) TO authenticated"}	create_pipelines_and_statuses
20250112000006	{"-- =============================================================================\n-- MIGRATION: Communication and Marketing Tables\n-- =============================================================================\n-- Description: Creates communications, campaigns, ab_tests, content_templates, and customer_touchpoints\n-- Version: 1.0.0\n-- Created: 2025-01-12\n\n-- =============================================================================\n-- CAMPAIGNS TABLE\n-- =============================================================================\n\nCREATE TABLE public.campaigns (\n  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n  name TEXT NOT NULL,\n  description TEXT,\n  \n  -- Campaign configuration\n  campaign_type TEXT NOT NULL CHECK (campaign_type IN ('Email', 'SMS', 'Phone', 'Social', 'Direct Mail', 'Digital Ads', 'Webinar', 'Event')),\n  status TEXT DEFAULT 'Draft' CHECK (status IN ('Draft', 'Active', 'Paused', 'Completed', 'Cancelled')),\n  \n  -- Timing\n  start_date TIMESTAMP WITH TIME ZONE,\n  end_date TIMESTAMP WITH TIME ZONE,\n  \n  -- Budget and goals\n  budget DECIMAL(15,2),\n  target_audience JSONB DEFAULT '{}',\n  goals JSONB DEFAULT '{}',\n  success_metrics JSONB DEFAULT '{}',\n  \n  -- Targeting\n  audience_filters JSONB DEFAULT '{}',\n  geographic_targeting JSONB DEFAULT '{}',\n  demographic_targeting JSONB DEFAULT '{}',\n  \n  -- Performance tracking\n  total_sent INTEGER DEFAULT 0,\n  total_delivered INTEGER DEFAULT 0,\n  total_opened INTEGER DEFAULT 0,\n  total_clicked INTEGER DEFAULT 0,\n  total_converted INTEGER DEFAULT 0,\n  total_cost DECIMAL(15,2) DEFAULT 0,\n  \n  -- AI optimization\n  ai_optimization_enabled BOOLEAN DEFAULT FALSE,\n  ai_insights JSONB DEFAULT '{}',\n  ai_recommendations JSONB DEFAULT '{}',\n  \n  -- Metadata\n  metadata JSONB DEFAULT '{}',\n  tags TEXT[] DEFAULT '{}',\n  \n  -- Audit fields\n  created_by UUID REFERENCES public.users(id),\n  updated_by UUID REFERENCES public.users(id),\n  \n  -- Timestamps\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n)","-- =============================================================================\n-- A/B TESTS TABLE\n-- =============================================================================\n\nCREATE TABLE public.ab_tests (\n  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n  name TEXT NOT NULL,\n  description TEXT,\n  campaign_id UUID REFERENCES public.campaigns(id) ON DELETE CASCADE,\n  \n  -- Test configuration\n  test_type TEXT NOT NULL CHECK (test_type IN ('Subject Line', 'Content', 'Send Time', 'Call Script', 'Landing Page', 'Offer', 'CTA')),\n  status TEXT DEFAULT 'Draft' CHECK (status IN ('Draft', 'Running', 'Completed', 'Cancelled')),\n  \n  -- Timing\n  start_date TIMESTAMP WITH TIME ZONE,\n  end_date TIMESTAMP WITH TIME ZONE,\n  \n  -- Test setup\n  traffic_split JSONB DEFAULT '{\\"variant_a\\": 50, \\"variant_b\\": 50}',\n  sample_size INTEGER,\n  confidence_level DECIMAL(5,2) DEFAULT 95.0,\n  \n  -- Success criteria\n  success_metric TEXT NOT NULL,\n  minimum_effect_size DECIMAL(5,2),\n  statistical_significance DECIMAL(5,2),\n  \n  -- Results\n  winner_variant TEXT,\n  variants JSONB DEFAULT '{}',\n  results JSONB DEFAULT '{}',\n  \n  -- AI insights\n  ai_analysis JSONB DEFAULT '{}',\n  ai_recommendations JSONB DEFAULT '{}',\n  \n  -- Metadata\n  metadata JSONB DEFAULT '{}',\n  \n  -- Audit fields\n  created_by UUID REFERENCES public.users(id),\n  updated_by UUID REFERENCES public.users(id),\n  \n  -- Timestamps\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n)","-- =============================================================================\n-- CONTENT TEMPLATES TABLE\n-- =============================================================================\n\nCREATE TABLE public.content_templates (\n  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n  name TEXT NOT NULL,\n  description TEXT,\n  \n  -- Template configuration\n  template_type TEXT NOT NULL CHECK (template_type IN ('Email', 'SMS', 'Call Script', 'Social Post', 'Ad Copy', 'Letter', 'Proposal')),\n  category TEXT,\n  \n  -- Content\n  subject TEXT,\n  content TEXT NOT NULL,\n  variables JSONB DEFAULT '{}', -- Template variables for personalization\n  \n  -- Personalization\n  personalization_fields TEXT[] DEFAULT '{}',\n  dynamic_content JSONB DEFAULT '{}',\n  \n  -- Performance tracking\n  usage_count INTEGER DEFAULT 0,\n  performance_score DECIMAL(5,2),\n  conversion_rate DECIMAL(5,2),\n  engagement_rate DECIMAL(5,2),\n  \n  -- AI optimization\n  ai_optimized BOOLEAN DEFAULT FALSE,\n  ai_suggestions JSONB DEFAULT '{}',\n  ai_performance_insights JSONB DEFAULT '{}',\n  \n  -- Status and organization\n  is_active BOOLEAN DEFAULT TRUE,\n  tags TEXT[] DEFAULT '{}',\n  \n  -- Metadata\n  metadata JSONB DEFAULT '{}',\n  \n  -- Audit fields\n  created_by UUID REFERENCES public.users(id),\n  updated_by UUID REFERENCES public.users(id),\n  \n  -- Timestamps\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n)","-- =============================================================================\n-- COMMUNICATIONS TABLE\n-- =============================================================================\n\nCREATE TABLE public.communications (\n  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n  \n  -- Relationships\n  client_id UUID REFERENCES public.clients(id) ON DELETE CASCADE,\n  lead_id UUID REFERENCES public.leads(id) ON DELETE CASCADE,\n  campaign_id UUID REFERENCES public.campaigns(id),\n  ab_test_id UUID REFERENCES public.ab_tests(id),\n  content_template_id UUID REFERENCES public.content_templates(id),\n  \n  -- Communication details\n  type TEXT NOT NULL CHECK (type IN ('call', 'email', 'sms', 'meeting', 'note', 'voicemail', 'social', 'letter')),\n  direction TEXT CHECK (direction IN ('Inbound', 'Outbound')),\n  \n  -- Content\n  subject TEXT,\n  content TEXT,\n  attachments TEXT[] DEFAULT '{}',\n  \n  -- Status and outcome\n  status TEXT DEFAULT 'Pending' CHECK (status IN ('Pending', 'Sent', 'Delivered', 'Opened', 'Clicked', 'Replied', 'Failed', 'Bounced')),\n  outcome TEXT,\n  \n  -- Call-specific fields\n  duration INTEGER, -- in seconds\n  recording_url TEXT,\n  call_quality_score INTEGER CHECK (call_quality_score >= 1 AND call_quality_score <= 5),\n  \n  -- Email-specific fields\n  email_provider TEXT,\n  tracking_pixel_url TEXT,\n  unsubscribe_url TEXT,\n  \n  -- AI analysis\n  ai_summary TEXT,\n  ai_sentiment TEXT CHECK (ai_sentiment IN ('Positive', 'Neutral', 'Negative')),\n  ai_entities JSONB DEFAULT '{}',\n  ai_action_items JSONB DEFAULT '[]',\n  ai_follow_up_suggestions JSONB DEFAULT '[]',\n  \n  -- Personalization and targeting\n  personalization_data JSONB DEFAULT '{}',\n  targeting_data JSONB DEFAULT '{}',\n  \n  -- Metadata\n  metadata JSONB DEFAULT '{}',\n  tags TEXT[] DEFAULT '{}',\n  \n  -- Audit fields\n  created_by UUID REFERENCES public.users(id),\n  updated_by UUID REFERENCES public.users(id),\n  \n  -- Timestamps\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  scheduled_at TIMESTAMP WITH TIME ZONE,\n  sent_at TIMESTAMP WITH TIME ZONE,\n  delivered_at TIMESTAMP WITH TIME ZONE,\n  opened_at TIMESTAMP WITH TIME ZONE,\n  clicked_at TIMESTAMP WITH TIME ZONE,\n  replied_at TIMESTAMP WITH TIME ZONE,\n  completed_at TIMESTAMP WITH TIME ZONE\n)","-- =============================================================================\n-- CUSTOMER TOUCHPOINTS TABLE\n-- =============================================================================\n\nCREATE TABLE public.customer_touchpoints (\n  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n  \n  -- Relationships\n  client_id UUID REFERENCES public.clients(id) ON DELETE CASCADE,\n  lead_id UUID REFERENCES public.leads(id) ON DELETE CASCADE,\n  campaign_id UUID REFERENCES public.campaigns(id),\n  ab_test_id UUID REFERENCES public.ab_tests(id),\n  communication_id UUID REFERENCES public.communications(id),\n  \n  -- Touchpoint details\n  touchpoint_type TEXT NOT NULL CHECK (touchpoint_type IN (\n    'Email Open', 'Email Click', 'SMS Click', 'Phone Call', 'Website Visit', \n    'Form Submit', 'Ad Click', 'Social Engagement', 'Download', 'Purchase'\n  )),\n  channel TEXT NOT NULL,\n  source TEXT,\n  medium TEXT,\n  campaign TEXT,\n  content TEXT,\n  \n  -- Attribution\n  attribution_weight DECIMAL(5,4) DEFAULT 1.0,\n  attribution_model TEXT DEFAULT 'last_touch' CHECK (attribution_model IN ('first_touch', 'last_touch', 'linear', 'time_decay', 'position_based')),\n  conversion_value DECIMAL(15,2),\n  \n  -- Context\n  page_url TEXT,\n  referrer_url TEXT,\n  user_agent TEXT,\n  ip_address INET,\n  device_type TEXT,\n  browser TEXT,\n  \n  -- Metadata\n  metadata JSONB DEFAULT '{}',\n  \n  -- Timestamps\n  occurred_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n)","-- =============================================================================\n-- INDEXES\n-- =============================================================================\n\n-- Campaigns indexes\nCREATE INDEX idx_campaigns_name ON public.campaigns(name)","CREATE INDEX idx_campaigns_type ON public.campaigns(campaign_type)","CREATE INDEX idx_campaigns_status ON public.campaigns(status)","CREATE INDEX idx_campaigns_start_date ON public.campaigns(start_date)","CREATE INDEX idx_campaigns_created_by ON public.campaigns(created_by)","-- A/B tests indexes\nCREATE INDEX idx_ab_tests_campaign_id ON public.ab_tests(campaign_id)","CREATE INDEX idx_ab_tests_status ON public.ab_tests(status)","CREATE INDEX idx_ab_tests_test_type ON public.ab_tests(test_type)","-- Content templates indexes\nCREATE INDEX idx_content_templates_type ON public.content_templates(template_type)","CREATE INDEX idx_content_templates_category ON public.content_templates(category)","CREATE INDEX idx_content_templates_is_active ON public.content_templates(is_active)","CREATE INDEX idx_content_templates_usage_count ON public.content_templates(usage_count)","-- Communications indexes\nCREATE INDEX idx_communications_client_id ON public.communications(client_id)","CREATE INDEX idx_communications_lead_id ON public.communications(lead_id)","CREATE INDEX idx_communications_campaign_id ON public.communications(campaign_id)","CREATE INDEX idx_communications_type ON public.communications(type)","CREATE INDEX idx_communications_direction ON public.communications(direction)","CREATE INDEX idx_communications_status ON public.communications(status)","CREATE INDEX idx_communications_created_at ON public.communications(created_at)","CREATE INDEX idx_communications_scheduled_at ON public.communications(scheduled_at)","-- Customer touchpoints indexes\nCREATE INDEX idx_customer_touchpoints_client_id ON public.customer_touchpoints(client_id)","CREATE INDEX idx_customer_touchpoints_lead_id ON public.customer_touchpoints(lead_id)","CREATE INDEX idx_customer_touchpoints_campaign_id ON public.customer_touchpoints(campaign_id)","CREATE INDEX idx_customer_touchpoints_type ON public.customer_touchpoints(touchpoint_type)","CREATE INDEX idx_customer_touchpoints_channel ON public.customer_touchpoints(channel)","CREATE INDEX idx_customer_touchpoints_occurred_at ON public.customer_touchpoints(occurred_at)","-- JSONB indexes\nCREATE INDEX idx_campaigns_metadata ON public.campaigns USING GIN (metadata)","CREATE INDEX idx_ab_tests_results ON public.ab_tests USING GIN (results)","CREATE INDEX idx_content_templates_variables ON public.content_templates USING GIN (variables)","CREATE INDEX idx_communications_ai_entities ON public.communications USING GIN (ai_entities)","CREATE INDEX idx_customer_touchpoints_metadata ON public.customer_touchpoints USING GIN (metadata)","-- Full-text search indexes\nCREATE INDEX idx_campaigns_search ON public.campaigns \n  USING GIN (to_tsvector('english', COALESCE(name, '') || ' ' || COALESCE(description, '')))","CREATE INDEX idx_content_templates_search ON public.content_templates \n  USING GIN (to_tsvector('english', COALESCE(name, '') || ' ' || COALESCE(content, '')))","-- =============================================================================\n-- ROW LEVEL SECURITY (RLS)\n-- =============================================================================\n\n-- Enable RLS on all tables\nALTER TABLE public.campaigns ENABLE ROW LEVEL SECURITY","ALTER TABLE public.ab_tests ENABLE ROW LEVEL SECURITY","ALTER TABLE public.content_templates ENABLE ROW LEVEL SECURITY","ALTER TABLE public.communications ENABLE ROW LEVEL SECURITY","ALTER TABLE public.customer_touchpoints ENABLE ROW LEVEL SECURITY","-- Campaigns RLS policies\nCREATE POLICY \\"Users can view campaigns they created or have access to\\" ON public.campaigns\n  FOR SELECT USING (\n    created_by = auth.uid() OR\n    EXISTS (\n      SELECT 1 FROM public.users\n      WHERE id = auth.uid() AND role IN ('admin', 'manager')\n    )\n  )","CREATE POLICY \\"Users can insert campaigns\\" ON public.campaigns\n  FOR INSERT WITH CHECK (auth.uid() IS NOT NULL)","CREATE POLICY \\"Users can update campaigns they have access to\\" ON public.campaigns\n  FOR UPDATE USING (\n    created_by = auth.uid() OR\n    EXISTS (\n      SELECT 1 FROM public.users\n      WHERE id = auth.uid() AND role IN ('admin', 'manager')\n    )\n  )","-- A/B tests RLS policies\nCREATE POLICY \\"Users can view ab_tests they have access to\\" ON public.ab_tests\n  FOR SELECT USING (\n    created_by = auth.uid() OR\n    EXISTS (\n      SELECT 1 FROM public.campaigns c\n      WHERE c.id = ab_tests.campaign_id AND c.created_by = auth.uid()\n    ) OR\n    EXISTS (\n      SELECT 1 FROM public.users\n      WHERE id = auth.uid() AND role IN ('admin', 'manager')\n    )\n  )","CREATE POLICY \\"Users can insert ab_tests\\" ON public.ab_tests\n  FOR INSERT WITH CHECK (auth.uid() IS NOT NULL)","-- Content templates RLS policies\nCREATE POLICY \\"Users can view content templates\\" ON public.content_templates\n  FOR SELECT USING (\n    created_by = auth.uid() OR\n    is_active = TRUE OR\n    EXISTS (\n      SELECT 1 FROM public.users\n      WHERE id = auth.uid() AND role IN ('admin', 'manager')\n    )\n  )","CREATE POLICY \\"Users can insert content templates\\" ON public.content_templates\n  FOR INSERT WITH CHECK (auth.uid() IS NOT NULL)","CREATE POLICY \\"Users can update their content templates\\" ON public.content_templates\n  FOR UPDATE USING (\n    created_by = auth.uid() OR\n    EXISTS (\n      SELECT 1 FROM public.users\n      WHERE id = auth.uid() AND role IN ('admin', 'manager')\n    )\n  )","-- Communications RLS policies\nCREATE POLICY \\"Users can view communications they have access to\\" ON public.communications\n  FOR SELECT USING (\n    created_by = auth.uid() OR\n    EXISTS (\n      SELECT 1 FROM public.leads l\n      WHERE l.id = communications.lead_id AND (l.created_by = auth.uid() OR l.assigned_to = auth.uid())\n    ) OR\n    EXISTS (\n      SELECT 1 FROM public.clients c\n      WHERE c.id = communications.client_id AND c.created_by = auth.uid()\n    ) OR\n    EXISTS (\n      SELECT 1 FROM public.users\n      WHERE id = auth.uid() AND role IN ('admin', 'manager')\n    )\n  )","CREATE POLICY \\"Users can insert communications\\" ON public.communications\n  FOR INSERT WITH CHECK (auth.uid() IS NOT NULL)","-- Customer touchpoints RLS policies\nCREATE POLICY \\"Users can view touchpoints they have access to\\" ON public.customer_touchpoints\n  FOR SELECT USING (\n    EXISTS (\n      SELECT 1 FROM public.leads l\n      WHERE l.id = customer_touchpoints.lead_id AND (l.created_by = auth.uid() OR l.assigned_to = auth.uid())\n    ) OR\n    EXISTS (\n      SELECT 1 FROM public.clients c\n      WHERE c.id = customer_touchpoints.client_id AND c.created_by = auth.uid()\n    ) OR\n    EXISTS (\n      SELECT 1 FROM public.users\n      WHERE id = auth.uid() AND role IN ('admin', 'manager')\n    )\n  )","CREATE POLICY \\"Users can insert touchpoints\\" ON public.customer_touchpoints\n  FOR INSERT WITH CHECK (auth.uid() IS NOT NULL)","-- =============================================================================\n-- FUNCTIONS AND TRIGGERS\n-- =============================================================================\n\n-- Apply standard audit triggers\nCREATE TRIGGER update_campaigns_audit_fields\n  BEFORE UPDATE ON public.campaigns\n  FOR EACH ROW EXECUTE FUNCTION public.update_address_audit_fields()","CREATE TRIGGER update_ab_tests_audit_fields\n  BEFORE UPDATE ON public.ab_tests\n  FOR EACH ROW EXECUTE FUNCTION public.update_address_audit_fields()","CREATE TRIGGER update_content_templates_audit_fields\n  BEFORE UPDATE ON public.content_templates\n  FOR EACH ROW EXECUTE FUNCTION public.update_address_audit_fields()","CREATE TRIGGER update_communications_audit_fields\n  BEFORE UPDATE ON public.communications\n  FOR EACH ROW EXECUTE FUNCTION public.update_address_audit_fields()","-- Set created_by triggers\nCREATE TRIGGER set_campaigns_created_by\n  BEFORE INSERT ON public.campaigns\n  FOR EACH ROW EXECUTE FUNCTION public.set_created_by()","CREATE TRIGGER set_ab_tests_created_by\n  BEFORE INSERT ON public.ab_tests\n  FOR EACH ROW EXECUTE FUNCTION public.set_created_by()","CREATE TRIGGER set_content_templates_created_by\n  BEFORE INSERT ON public.content_templates\n  FOR EACH ROW EXECUTE FUNCTION public.set_created_by()","CREATE TRIGGER set_communications_created_by\n  BEFORE INSERT ON public.communications\n  FOR EACH ROW EXECUTE FUNCTION public.set_created_by()","-- Function to update content template usage count\nCREATE OR REPLACE FUNCTION public.increment_template_usage()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF NEW.content_template_id IS NOT NULL THEN\n    UPDATE public.content_templates\n    SET usage_count = usage_count + 1,\n        updated_at = NOW()\n    WHERE id = NEW.content_template_id;\n  END IF;\n\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER","-- Trigger to increment template usage\nCREATE TRIGGER increment_template_usage_on_communication\n  AFTER INSERT ON public.communications\n  FOR EACH ROW EXECUTE FUNCTION public.increment_template_usage()","-- =============================================================================\n-- COMMENTS\n-- =============================================================================\n\nCOMMENT ON TABLE public.campaigns IS 'Marketing campaigns with performance tracking and AI optimization'","COMMENT ON TABLE public.ab_tests IS 'A/B testing framework for campaign optimization'","COMMENT ON TABLE public.content_templates IS 'Reusable content templates with personalization and performance tracking'","COMMENT ON TABLE public.communications IS 'Communication tracking with AI analysis and sentiment detection'","COMMENT ON TABLE public.customer_touchpoints IS 'Customer interaction tracking for attribution and journey mapping'","-- =============================================================================\n-- GRANTS\n-- =============================================================================\n\nGRANT SELECT, INSERT, UPDATE, DELETE ON public.campaigns TO authenticated","GRANT SELECT, INSERT, UPDATE, DELETE ON public.ab_tests TO authenticated","GRANT SELECT, INSERT, UPDATE, DELETE ON public.content_templates TO authenticated","GRANT SELECT, INSERT, UPDATE, DELETE ON public.communications TO authenticated","GRANT SELECT, INSERT, UPDATE, DELETE ON public.customer_touchpoints TO authenticated"}	create_communications_and_marketing
20250112000007	{"-- =============================================================================\n-- MIGRATION: AI Agents and Interactions\n-- =============================================================================\n-- Description: Creates ai_agents, agent_memory, ai_interactions with vector embeddings and proper indexing\n-- Version: 1.0.0\n-- Created: 2025-01-12\n\n-- Enable required extensions for vector operations\nCREATE EXTENSION IF NOT EXISTS \\"vector\\"","-- =============================================================================\n-- AI AGENTS TABLE\n-- =============================================================================\n\nCREATE TABLE public.ai_agents (\n  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n  name TEXT NOT NULL,\n  description TEXT,\n  \n  -- Agent configuration\n  role TEXT NOT NULL CHECK (role IN ('follow_up', 'insight', 'design', 'support', 'marketing', 'sales', 'analysis')),\n  agent_type TEXT DEFAULT 'assistant' CHECK (agent_type IN ('assistant', 'workflow', 'analyzer', 'generator')),\n  \n  -- AI model configuration\n  model_provider TEXT DEFAULT 'deepinfra' CHECK (model_provider IN ('openai', 'anthropic', 'deepinfra', 'local')),\n  model_name TEXT DEFAULT 'deepseek-ai/DeepSeek-V3-0324',\n  temperature DECIMAL(3,2) DEFAULT 0.7 CHECK (temperature >= 0 AND temperature <= 2),\n  max_tokens INTEGER DEFAULT 4000,\n  \n  -- Agent capabilities\n  capabilities JSONB DEFAULT '{}',\n  tools JSONB DEFAULT '[]',\n  system_prompt TEXT,\n  \n  -- Configuration and settings\n  config JSONB DEFAULT '{}',\n  settings JSONB DEFAULT '{}',\n  \n  -- Performance tracking\n  total_interactions INTEGER DEFAULT 0,\n  successful_interactions INTEGER DEFAULT 0,\n  average_response_time DECIMAL(8,2), -- in milliseconds\n  last_performance_review TIMESTAMP WITH TIME ZONE,\n  \n  -- Status and lifecycle\n  is_active BOOLEAN DEFAULT TRUE,\n  is_learning BOOLEAN DEFAULT TRUE,\n  version TEXT DEFAULT '1.0.0',\n  \n  -- Metadata\n  metadata JSONB DEFAULT '{}',\n  tags TEXT[] DEFAULT '{}',\n  \n  -- Audit fields\n  created_by UUID REFERENCES public.users(id),\n  updated_by UUID REFERENCES public.users(id),\n  \n  -- Timestamps\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  last_used_at TIMESTAMP WITH TIME ZONE\n)","-- =============================================================================\n-- AGENT MEMORY TABLE\n-- =============================================================================\n\nCREATE TABLE public.agent_memory (\n  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n  agent_id UUID REFERENCES public.ai_agents(id) ON DELETE CASCADE,\n  \n  -- Memory context\n  entity_type TEXT NOT NULL CHECK (entity_type IN ('client', 'lead', 'user', 'global', 'conversation', 'task')),\n  entity_id UUID,\n  \n  -- Memory classification\n  memory_type TEXT NOT NULL CHECK (memory_type IN ('conversation', 'insight', 'preference', 'fact', 'pattern', 'feedback')),\n  importance_score INTEGER DEFAULT 5 CHECK (importance_score >= 1 AND importance_score <= 10),\n  \n  -- Memory content\n  title TEXT,\n  content TEXT NOT NULL,\n  summary TEXT,\n  \n  -- Vector embedding for semantic search\n  embedding VECTOR(1536), -- OpenAI embedding dimension\n  \n  -- Context and relationships\n  related_memories UUID[] DEFAULT '{}',\n  conversation_id UUID,\n  session_id UUID,\n  \n  -- Memory lifecycle\n  access_count INTEGER DEFAULT 0,\n  last_accessed_at TIMESTAMP WITH TIME ZONE,\n  confidence_score DECIMAL(5,2) DEFAULT 100.0 CHECK (confidence_score >= 0 AND confidence_score <= 100),\n  \n  -- Expiration and cleanup\n  expires_at TIMESTAMP WITH TIME ZONE,\n  is_archived BOOLEAN DEFAULT FALSE,\n  \n  -- Metadata\n  metadata JSONB DEFAULT '{}',\n  tags TEXT[] DEFAULT '{}',\n  \n  -- Timestamps\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n)","-- =============================================================================\n-- AI INTERACTIONS TABLE\n-- =============================================================================\n\nCREATE TABLE public.ai_interactions (\n  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n  \n  -- Relationships\n  agent_id UUID REFERENCES public.ai_agents(id),\n  client_id UUID REFERENCES public.clients(id),\n  lead_id UUID REFERENCES public.leads(id),\n  user_id UUID REFERENCES public.users(id),\n  \n  -- Interaction classification\n  type TEXT CHECK (type IN ('Chat', 'Follow-Up', 'Summary', 'Prediction', 'PromptResponse', 'Analysis', 'Recommendation')),\n  source TEXT CHECK (source IN ('Agent UI', 'Marketing Automation', 'AI Assistant', 'Backend Middleware', 'API', 'Webhook')),\n  \n  -- Interaction content\n  prompt TEXT,\n  content TEXT,\n  ai_response TEXT,\n  summary TEXT,\n  \n  -- AI model details\n  model_used TEXT,\n  model_provider TEXT,\n  temperature DOUBLE PRECISION,\n  tokens_used INTEGER,\n  \n  -- Performance metrics\n  response_time_ms INTEGER,\n  quality_score DECIMAL(3,2) CHECK (quality_score >= 0 AND quality_score <= 5),\n  user_feedback TEXT CHECK (user_feedback IN ('positive', 'negative', 'neutral')),\n  \n  -- Context and session\n  conversation_id UUID,\n  session_id UUID,\n  context JSONB DEFAULT '{}',\n  \n  -- Results and actions\n  actions_taken JSONB DEFAULT '[]',\n  results JSONB DEFAULT '{}',\n  follow_up_required BOOLEAN DEFAULT FALSE,\n  follow_up_date TIMESTAMP WITH TIME ZONE,\n  \n  -- Error handling\n  error_message TEXT,\n  retry_count INTEGER DEFAULT 0,\n  \n  -- Metadata\n  metadata JSONB DEFAULT '{}',\n  tags TEXT[] DEFAULT '{}',\n  \n  -- Timestamps\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  completed_at TIMESTAMP WITH TIME ZONE\n)","-- =============================================================================\n-- CONVERSATION SESSIONS TABLE\n-- =============================================================================\n\nCREATE TABLE public.conversation_sessions (\n  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n  \n  -- Relationships\n  agent_id UUID REFERENCES public.ai_agents(id),\n  user_id UUID REFERENCES public.users(id),\n  client_id UUID REFERENCES public.clients(id),\n  lead_id UUID REFERENCES public.leads(id),\n  \n  -- Session details\n  title TEXT,\n  purpose TEXT,\n  status TEXT DEFAULT 'active' CHECK (status IN ('active', 'completed', 'paused', 'error')),\n  \n  -- Session metrics\n  total_interactions INTEGER DEFAULT 0,\n  total_tokens_used INTEGER DEFAULT 0,\n  average_response_time DECIMAL(8,2),\n  \n  -- Session context\n  context JSONB DEFAULT '{}',\n  summary TEXT,\n  \n  -- Outcomes\n  goals_achieved JSONB DEFAULT '[]',\n  action_items JSONB DEFAULT '[]',\n  next_steps JSONB DEFAULT '[]',\n  \n  -- Metadata\n  metadata JSONB DEFAULT '{}',\n  \n  -- Timestamps\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  completed_at TIMESTAMP WITH TIME ZONE\n)","-- =============================================================================\n-- INDEXES\n-- =============================================================================\n\n-- AI agents indexes\nCREATE INDEX idx_ai_agents_role ON public.ai_agents(role)","CREATE INDEX idx_ai_agents_agent_type ON public.ai_agents(agent_type)","CREATE INDEX idx_ai_agents_is_active ON public.ai_agents(is_active)","CREATE INDEX idx_ai_agents_model_provider ON public.ai_agents(model_provider)","CREATE INDEX idx_ai_agents_created_by ON public.ai_agents(created_by)","CREATE INDEX idx_ai_agents_last_used_at ON public.ai_agents(last_used_at)","-- Agent memory indexes\nCREATE INDEX idx_agent_memory_agent_id ON public.agent_memory(agent_id)","CREATE INDEX idx_agent_memory_entity ON public.agent_memory(entity_type, entity_id)","CREATE INDEX idx_agent_memory_memory_type ON public.agent_memory(memory_type)","CREATE INDEX idx_agent_memory_importance ON public.agent_memory(importance_score)","CREATE INDEX idx_agent_memory_created_at ON public.agent_memory(created_at)","CREATE INDEX idx_agent_memory_expires_at ON public.agent_memory(expires_at)","CREATE INDEX idx_agent_memory_is_archived ON public.agent_memory(is_archived)","-- Vector similarity search index\nCREATE INDEX idx_agent_memory_embedding ON public.agent_memory \n  USING ivfflat (embedding vector_cosine_ops) WITH (lists = 100)","-- AI interactions indexes\nCREATE INDEX idx_ai_interactions_agent_id ON public.ai_interactions(agent_id)","CREATE INDEX idx_ai_interactions_client_id ON public.ai_interactions(client_id)","CREATE INDEX idx_ai_interactions_lead_id ON public.ai_interactions(lead_id)","CREATE INDEX idx_ai_interactions_user_id ON public.ai_interactions(user_id)","CREATE INDEX idx_ai_interactions_type ON public.ai_interactions(type)","CREATE INDEX idx_ai_interactions_source ON public.ai_interactions(source)","CREATE INDEX idx_ai_interactions_conversation_id ON public.ai_interactions(conversation_id)","CREATE INDEX idx_ai_interactions_created_at ON public.ai_interactions(created_at)","CREATE INDEX idx_ai_interactions_follow_up_required ON public.ai_interactions(follow_up_required)","CREATE INDEX idx_ai_interactions_follow_up_date ON public.ai_interactions(follow_up_date)","-- Conversation sessions indexes\nCREATE INDEX idx_conversation_sessions_agent_id ON public.conversation_sessions(agent_id)","CREATE INDEX idx_conversation_sessions_user_id ON public.conversation_sessions(user_id)","CREATE INDEX idx_conversation_sessions_client_id ON public.conversation_sessions(client_id)","CREATE INDEX idx_conversation_sessions_lead_id ON public.conversation_sessions(lead_id)","CREATE INDEX idx_conversation_sessions_status ON public.conversation_sessions(status)","CREATE INDEX idx_conversation_sessions_created_at ON public.conversation_sessions(created_at)","-- JSONB indexes\nCREATE INDEX idx_ai_agents_config ON public.ai_agents USING GIN (config)","CREATE INDEX idx_ai_agents_capabilities ON public.ai_agents USING GIN (capabilities)","CREATE INDEX idx_agent_memory_metadata ON public.agent_memory USING GIN (metadata)","CREATE INDEX idx_ai_interactions_context ON public.ai_interactions USING GIN (context)","CREATE INDEX idx_ai_interactions_results ON public.ai_interactions USING GIN (results)","CREATE INDEX idx_conversation_sessions_context ON public.conversation_sessions USING GIN (context)","-- Full-text search indexes\nCREATE INDEX idx_agent_memory_content_search ON public.agent_memory \n  USING GIN (to_tsvector('english', COALESCE(title, '') || ' ' || COALESCE(content, '') || ' ' || COALESCE(summary, '')))","CREATE INDEX idx_ai_interactions_content_search ON public.ai_interactions \n  USING GIN (to_tsvector('english', COALESCE(prompt, '') || ' ' || COALESCE(ai_response, '') || ' ' || COALESCE(summary, '')))","-- =============================================================================\n-- ROW LEVEL SECURITY (RLS)\n-- =============================================================================\n\n-- Enable RLS on all tables\nALTER TABLE public.ai_agents ENABLE ROW LEVEL SECURITY","ALTER TABLE public.agent_memory ENABLE ROW LEVEL SECURITY","ALTER TABLE public.ai_interactions ENABLE ROW LEVEL SECURITY","ALTER TABLE public.conversation_sessions ENABLE ROW LEVEL SECURITY","-- AI agents - viewable by all authenticated users, manageable by admins\nCREATE POLICY \\"AI agents are viewable by all users\\" ON public.ai_agents\n  FOR SELECT USING (auth.uid() IS NOT NULL)","CREATE POLICY \\"Admins can manage AI agents\\" ON public.ai_agents\n  FOR ALL USING (\n    EXISTS (\n      SELECT 1 FROM public.users\n      WHERE id = auth.uid() AND role = 'admin'\n    )\n  )","-- Agent memory - users can view memory for entities they have access to\nCREATE POLICY \\"Users can view agent memory they have access to\\" ON public.agent_memory\n  FOR SELECT USING (\n    -- Global memory is viewable by all\n    entity_type = 'global' OR\n    -- User-specific memory\n    (entity_type = 'user' AND entity_id = auth.uid()) OR\n    -- Client memory - if user has access to client\n    (entity_type = 'client' AND EXISTS (\n      SELECT 1 FROM public.clients c\n      WHERE c.id = agent_memory.entity_id AND c.created_by = auth.uid()\n    )) OR\n    -- Lead memory - if user has access to lead\n    (entity_type = 'lead' AND EXISTS (\n      SELECT 1 FROM public.leads l\n      WHERE l.id = agent_memory.entity_id AND (l.created_by = auth.uid() OR l.assigned_to = auth.uid())\n    )) OR\n    -- Admins can view all\n    EXISTS (\n      SELECT 1 FROM public.users\n      WHERE id = auth.uid() AND role IN ('admin', 'manager')\n    )\n  )","CREATE POLICY \\"Users can insert agent memory\\" ON public.agent_memory\n  FOR INSERT WITH CHECK (auth.uid() IS NOT NULL)","-- AI interactions - users can view interactions for entities they have access to\nCREATE POLICY \\"Users can view AI interactions they have access to\\" ON public.ai_interactions\n  FOR SELECT USING (\n    user_id = auth.uid() OR\n    EXISTS (\n      SELECT 1 FROM public.clients c\n      WHERE c.id = ai_interactions.client_id AND c.created_by = auth.uid()\n    ) OR\n    EXISTS (\n      SELECT 1 FROM public.leads l\n      WHERE l.id = ai_interactions.lead_id AND (l.created_by = auth.uid() OR l.assigned_to = auth.uid())\n    ) OR\n    EXISTS (\n      SELECT 1 FROM public.users\n      WHERE id = auth.uid() AND role IN ('admin', 'manager')\n    )\n  )","CREATE POLICY \\"Users can insert AI interactions\\" ON public.ai_interactions\n  FOR INSERT WITH CHECK (auth.uid() IS NOT NULL)","-- Conversation sessions - similar access pattern\nCREATE POLICY \\"Users can view conversation sessions they have access to\\" ON public.conversation_sessions\n  FOR SELECT USING (\n    user_id = auth.uid() OR\n    EXISTS (\n      SELECT 1 FROM public.clients c\n      WHERE c.id = conversation_sessions.client_id AND c.created_by = auth.uid()\n    ) OR\n    EXISTS (\n      SELECT 1 FROM public.leads l\n      WHERE l.id = conversation_sessions.lead_id AND (l.created_by = auth.uid() OR l.assigned_to = auth.uid())\n    ) OR\n    EXISTS (\n      SELECT 1 FROM public.users\n      WHERE id = auth.uid() AND role IN ('admin', 'manager')\n    )\n  )","CREATE POLICY \\"Users can insert conversation sessions\\" ON public.conversation_sessions\n  FOR INSERT WITH CHECK (auth.uid() IS NOT NULL)","-- =============================================================================\n-- FUNCTIONS AND TRIGGERS\n-- =============================================================================\n\n-- Apply standard audit triggers\nCREATE TRIGGER update_ai_agents_audit_fields\n  BEFORE UPDATE ON public.ai_agents\n  FOR EACH ROW EXECUTE FUNCTION public.update_address_audit_fields()","CREATE TRIGGER update_agent_memory_updated_at\n  BEFORE UPDATE ON public.agent_memory\n  FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column()","CREATE TRIGGER update_conversation_sessions_updated_at\n  BEFORE UPDATE ON public.conversation_sessions\n  FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column()","-- Set created_by triggers\nCREATE TRIGGER set_ai_agents_created_by\n  BEFORE INSERT ON public.ai_agents\n  FOR EACH ROW EXECUTE FUNCTION public.set_created_by()","-- Function to update agent performance metrics\nCREATE OR REPLACE FUNCTION public.update_agent_performance()\nRETURNS TRIGGER AS $$\nBEGIN\n  -- Update agent statistics when interaction is completed\n  IF NEW.completed_at IS NOT NULL AND OLD.completed_at IS NULL THEN\n    UPDATE public.ai_agents\n    SET\n      total_interactions = total_interactions + 1,\n      successful_interactions = CASE\n        WHEN NEW.error_message IS NULL THEN successful_interactions + 1\n        ELSE successful_interactions\n      END,\n      last_used_at = NEW.completed_at,\n      updated_at = NOW()\n    WHERE id = NEW.agent_id;\n  END IF;\n\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER","-- Trigger to update agent performance\nCREATE TRIGGER update_agent_performance_on_interaction\n  AFTER UPDATE ON public.ai_interactions\n  FOR EACH ROW EXECUTE FUNCTION public.update_agent_performance()","-- Function to update memory access tracking\nCREATE OR REPLACE FUNCTION public.track_memory_access()\nRETURNS TRIGGER AS $$\nBEGIN\n  NEW.access_count = OLD.access_count + 1;\n  NEW.last_accessed_at = NOW();\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql","-- Function for semantic memory search\nCREATE OR REPLACE FUNCTION public.search_agent_memory(\n  agent_id_param UUID,\n  query_embedding VECTOR(1536),\n  entity_type_param TEXT DEFAULT NULL,\n  entity_id_param UUID DEFAULT NULL,\n  limit_param INTEGER DEFAULT 10,\n  similarity_threshold DECIMAL DEFAULT 0.7\n)\nRETURNS TABLE(\n  id UUID,\n  title TEXT,\n  content TEXT,\n  similarity DECIMAL,\n  memory_type TEXT,\n  importance_score INTEGER\n) AS $$\nBEGIN\n  RETURN QUERY\n  SELECT\n    m.id,\n    m.title,\n    m.content,\n    (1 - (m.embedding <=> query_embedding))::DECIMAL as similarity,\n    m.memory_type,\n    m.importance_score\n  FROM public.agent_memory m\n  WHERE m.agent_id = agent_id_param\n    AND m.is_archived = FALSE\n    AND (entity_type_param IS NULL OR m.entity_type = entity_type_param)\n    AND (entity_id_param IS NULL OR m.entity_id = entity_id_param)\n    AND (m.expires_at IS NULL OR m.expires_at > NOW())\n    AND (1 - (m.embedding <=> query_embedding)) >= similarity_threshold\n  ORDER BY similarity DESC, m.importance_score DESC\n  LIMIT limit_param;\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER","-- =============================================================================\n-- COMMENTS\n-- =============================================================================\n\nCOMMENT ON TABLE public.ai_agents IS 'AI agents with configurable models and capabilities'","COMMENT ON TABLE public.agent_memory IS 'Agent memory storage with vector embeddings for semantic search'","COMMENT ON TABLE public.ai_interactions IS 'AI interaction logging with performance metrics and context'","COMMENT ON TABLE public.conversation_sessions IS 'Conversation session management for multi-turn interactions'","-- =============================================================================\n-- GRANTS\n-- =============================================================================\n\nGRANT SELECT ON public.ai_agents TO authenticated","GRANT SELECT, INSERT, UPDATE, DELETE ON public.agent_memory TO authenticated","GRANT SELECT, INSERT, UPDATE, DELETE ON public.ai_interactions TO authenticated","GRANT SELECT, INSERT, UPDATE, DELETE ON public.conversation_sessions TO authenticated","GRANT EXECUTE ON FUNCTION public.search_agent_memory(UUID, VECTOR(1536), TEXT, UUID, INTEGER, DECIMAL) TO authenticated"}	create_ai_agents_and_interactions
20250112000008	{"-- =============================================================================\n-- MIGRATION: RingCentral Integration\n-- =============================================================================\n-- Description: Creates ringcentral_tokens and user_phone_preferences with proper security\n-- Version: 1.0.0\n-- Created: 2025-01-12\n\n-- =============================================================================\n-- RINGCENTRAL TOKENS TABLE\n-- =============================================================================\n\nCREATE TABLE public.ringcentral_tokens (\n  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n  user_id UUID NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,\n  \n  -- OAuth tokens (encrypted)\n  access_token TEXT NOT NULL,\n  refresh_token TEXT NOT NULL,\n  token_type TEXT NOT NULL DEFAULT 'Bearer',\n  \n  -- Token expiration\n  expires_at TIMESTAMP WITH TIME ZONE NOT NULL,\n  refresh_token_expires_at TIMESTAMP WITH TIME ZONE,\n  \n  -- OAuth scope and permissions\n  scope TEXT,\n  granted_permissions JSONB DEFAULT '[]',\n  \n  -- RingCentral account information\n  account_id TEXT,\n  extension_id TEXT,\n  extension_number TEXT,\n  \n  -- Token status and validation\n  is_active BOOLEAN DEFAULT TRUE,\n  last_validated_at TIMESTAMP WITH TIME ZONE,\n  validation_error TEXT,\n  \n  -- Usage tracking\n  api_calls_count INTEGER DEFAULT 0,\n  last_api_call_at TIMESTAMP WITH TIME ZONE,\n  rate_limit_remaining INTEGER,\n  rate_limit_reset_at TIMESTAMP WITH TIME ZONE,\n  \n  -- Metadata\n  metadata JSONB DEFAULT '{}',\n  \n  -- Timestamps\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  \n  -- Constraints\n  UNIQUE(user_id) -- One token set per user\n)","-- =============================================================================\n-- USER PHONE PREFERENCES TABLE\n-- =============================================================================\n\nCREATE TABLE public.user_phone_preferences (\n  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n  user_id UUID NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,\n  \n  -- Phone number configuration\n  selected_phone_number TEXT NOT NULL,\n  phone_number_label TEXT,\n  phone_number_type TEXT CHECK (phone_number_type IN ('Direct', 'Main', 'Toll-Free', 'Local')),\n  \n  -- Preferences\n  is_default BOOLEAN DEFAULT FALSE,\n  is_active BOOLEAN DEFAULT TRUE,\n  \n  -- Call settings\n  call_forwarding_enabled BOOLEAN DEFAULT FALSE,\n  call_forwarding_number TEXT,\n  voicemail_enabled BOOLEAN DEFAULT TRUE,\n  call_recording_enabled BOOLEAN DEFAULT FALSE,\n  \n  -- Notification preferences\n  sms_notifications BOOLEAN DEFAULT TRUE,\n  email_notifications BOOLEAN DEFAULT TRUE,\n  desktop_notifications BOOLEAN DEFAULT TRUE,\n  \n  -- Business hours\n  business_hours JSONB DEFAULT '{}', -- {\\"monday\\": {\\"start\\": \\"09:00\\", \\"end\\": \\"17:00\\"}, ...}\n  timezone TEXT DEFAULT 'America/Chicago',\n  \n  -- Auto-response settings\n  auto_response_enabled BOOLEAN DEFAULT FALSE,\n  auto_response_message TEXT,\n  out_of_office_enabled BOOLEAN DEFAULT FALSE,\n  out_of_office_message TEXT,\n  \n  -- Integration settings\n  crm_integration_enabled BOOLEAN DEFAULT TRUE,\n  auto_log_calls BOOLEAN DEFAULT TRUE,\n  auto_create_activities BOOLEAN DEFAULT TRUE,\n  \n  -- Metadata\n  metadata JSONB DEFAULT '{}',\n  \n  -- Timestamps\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  \n  -- Constraints\n  UNIQUE(user_id, selected_phone_number)\n)","-- =============================================================================\n-- CALL LOGS TABLE\n-- =============================================================================\n\nCREATE TABLE public.call_logs (\n  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n  \n  -- Relationships\n  user_id UUID REFERENCES public.users(id),\n  client_id UUID REFERENCES public.clients(id),\n  lead_id UUID REFERENCES public.leads(id),\n  communication_id UUID REFERENCES public.communications(id),\n  \n  -- RingCentral call details\n  ringcentral_call_id TEXT UNIQUE,\n  session_id TEXT,\n  \n  -- Call information\n  direction TEXT NOT NULL CHECK (direction IN ('Inbound', 'Outbound')),\n  from_number TEXT NOT NULL,\n  to_number TEXT NOT NULL,\n  \n  -- Call status and outcome\n  status TEXT CHECK (status IN ('Ringing', 'Connected', 'Disconnected', 'Busy', 'NoAnswer', 'Rejected', 'VoiceMail')),\n  result TEXT CHECK (result IN ('Call connected', 'Voicemail', 'Busy', 'No Answer', 'Rejected', 'Failed')),\n  \n  -- Timing\n  start_time TIMESTAMP WITH TIME ZONE,\n  answer_time TIMESTAMP WITH TIME ZONE,\n  end_time TIMESTAMP WITH TIME ZONE,\n  duration INTEGER, -- in seconds\n  \n  -- Recording and transcription\n  recording_url TEXT,\n  recording_id TEXT,\n  transcription TEXT,\n  transcription_confidence DECIMAL(5,2),\n  \n  -- AI analysis\n  ai_summary TEXT,\n  ai_sentiment TEXT CHECK (ai_sentiment IN ('Positive', 'Neutral', 'Negative')),\n  ai_action_items JSONB DEFAULT '[]',\n  ai_follow_up_required BOOLEAN DEFAULT FALSE,\n  \n  -- Call quality\n  quality_score INTEGER CHECK (quality_score >= 1 AND quality_score <= 5),\n  connection_quality TEXT,\n  \n  -- Metadata\n  metadata JSONB DEFAULT '{}',\n  tags TEXT[] DEFAULT '{}',\n  \n  -- Timestamps\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n)","-- =============================================================================\n-- SMS LOGS TABLE\n-- =============================================================================\n\nCREATE TABLE public.sms_logs (\n  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n  \n  -- Relationships\n  user_id UUID REFERENCES public.users(id),\n  client_id UUID REFERENCES public.clients(id),\n  lead_id UUID REFERENCES public.leads(id),\n  communication_id UUID REFERENCES public.communications(id),\n  \n  -- RingCentral message details\n  ringcentral_message_id TEXT UNIQUE,\n  conversation_id TEXT,\n  \n  -- Message information\n  direction TEXT NOT NULL CHECK (direction IN ('Inbound', 'Outbound')),\n  from_number TEXT NOT NULL,\n  to_number TEXT NOT NULL,\n  \n  -- Message content\n  message_text TEXT NOT NULL,\n  attachments JSONB DEFAULT '[]',\n  \n  -- Message status\n  status TEXT CHECK (status IN ('Queued', 'Sent', 'Delivered', 'DeliveryFailed', 'SendingFailed', 'Received')),\n  \n  -- AI analysis\n  ai_summary TEXT,\n  ai_sentiment TEXT CHECK (ai_sentiment IN ('Positive', 'Neutral', 'Negative')),\n  ai_intent TEXT,\n  ai_action_items JSONB DEFAULT '[]',\n  \n  -- Metadata\n  metadata JSONB DEFAULT '{}',\n  tags TEXT[] DEFAULT '{}',\n  \n  -- Timestamps\n  sent_at TIMESTAMP WITH TIME ZONE,\n  delivered_at TIMESTAMP WITH TIME ZONE,\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n)","-- =============================================================================\n-- INDEXES\n-- =============================================================================\n\n-- RingCentral tokens indexes\nCREATE INDEX idx_ringcentral_tokens_user_id ON public.ringcentral_tokens(user_id)","CREATE INDEX idx_ringcentral_tokens_expires_at ON public.ringcentral_tokens(expires_at)","CREATE INDEX idx_ringcentral_tokens_is_active ON public.ringcentral_tokens(is_active)","CREATE INDEX idx_ringcentral_tokens_account_id ON public.ringcentral_tokens(account_id)","-- User phone preferences indexes\nCREATE INDEX idx_user_phone_preferences_user_id ON public.user_phone_preferences(user_id)","CREATE INDEX idx_user_phone_preferences_phone_number ON public.user_phone_preferences(selected_phone_number)","CREATE INDEX idx_user_phone_preferences_is_default ON public.user_phone_preferences(is_default)","CREATE INDEX idx_user_phone_preferences_is_active ON public.user_phone_preferences(is_active)","-- Call logs indexes\nCREATE INDEX idx_call_logs_user_id ON public.call_logs(user_id)","CREATE INDEX idx_call_logs_client_id ON public.call_logs(client_id)","CREATE INDEX idx_call_logs_lead_id ON public.call_logs(lead_id)","CREATE INDEX idx_call_logs_ringcentral_call_id ON public.call_logs(ringcentral_call_id)","CREATE INDEX idx_call_logs_direction ON public.call_logs(direction)","CREATE INDEX idx_call_logs_status ON public.call_logs(status)","CREATE INDEX idx_call_logs_start_time ON public.call_logs(start_time)","CREATE INDEX idx_call_logs_from_number ON public.call_logs(from_number)","CREATE INDEX idx_call_logs_to_number ON public.call_logs(to_number)","-- SMS logs indexes\nCREATE INDEX idx_sms_logs_user_id ON public.sms_logs(user_id)","CREATE INDEX idx_sms_logs_client_id ON public.sms_logs(client_id)","CREATE INDEX idx_sms_logs_lead_id ON public.sms_logs(lead_id)","CREATE INDEX idx_sms_logs_ringcentral_message_id ON public.sms_logs(ringcentral_message_id)","CREATE INDEX idx_sms_logs_direction ON public.sms_logs(direction)","CREATE INDEX idx_sms_logs_status ON public.sms_logs(status)","CREATE INDEX idx_sms_logs_sent_at ON public.sms_logs(sent_at)","CREATE INDEX idx_sms_logs_from_number ON public.sms_logs(from_number)","CREATE INDEX idx_sms_logs_to_number ON public.sms_logs(to_number)","-- JSONB indexes\nCREATE INDEX idx_ringcentral_tokens_metadata ON public.ringcentral_tokens USING GIN (metadata)","CREATE INDEX idx_user_phone_preferences_business_hours ON public.user_phone_preferences USING GIN (business_hours)","CREATE INDEX idx_call_logs_metadata ON public.call_logs USING GIN (metadata)","CREATE INDEX idx_sms_logs_metadata ON public.sms_logs USING GIN (metadata)","-- Full-text search for call transcriptions and SMS content\nCREATE INDEX idx_call_logs_transcription_search ON public.call_logs \n  USING GIN (to_tsvector('english', COALESCE(transcription, '')))","CREATE INDEX idx_sms_logs_message_search ON public.sms_logs \n  USING GIN (to_tsvector('english', COALESCE(message_text, '')))","-- =============================================================================\n-- ROW LEVEL SECURITY (RLS)\n-- =============================================================================\n\n-- Enable RLS on all tables\nALTER TABLE public.ringcentral_tokens ENABLE ROW LEVEL SECURITY","ALTER TABLE public.user_phone_preferences ENABLE ROW LEVEL SECURITY","ALTER TABLE public.call_logs ENABLE ROW LEVEL SECURITY","ALTER TABLE public.sms_logs ENABLE ROW LEVEL SECURITY","-- RingCentral tokens - users can only access their own tokens\nCREATE POLICY \\"Users can view their own RingCentral tokens\\" ON public.ringcentral_tokens\n  FOR SELECT USING (user_id = auth.uid())","CREATE POLICY \\"Users can insert their own RingCentral tokens\\" ON public.ringcentral_tokens\n  FOR INSERT WITH CHECK (user_id = auth.uid())","CREATE POLICY \\"Users can update their own RingCentral tokens\\" ON public.ringcentral_tokens\n  FOR UPDATE USING (user_id = auth.uid())","CREATE POLICY \\"Users can delete their own RingCentral tokens\\" ON public.ringcentral_tokens\n  FOR DELETE USING (user_id = auth.uid())","-- User phone preferences - users can only access their own preferences\nCREATE POLICY \\"Users can view their own phone preferences\\" ON public.user_phone_preferences\n  FOR SELECT USING (user_id = auth.uid())","CREATE POLICY \\"Users can insert their own phone preferences\\" ON public.user_phone_preferences\n  FOR INSERT WITH CHECK (user_id = auth.uid())","CREATE POLICY \\"Users can update their own phone preferences\\" ON public.user_phone_preferences\n  FOR UPDATE USING (user_id = auth.uid())","CREATE POLICY \\"Users can delete their own phone preferences\\" ON public.user_phone_preferences\n  FOR DELETE USING (user_id = auth.uid())","-- Call logs - users can view calls they made/received or have access to related entities\nCREATE POLICY \\"Users can view call logs they have access to\\" ON public.call_logs\n  FOR SELECT USING (\n    user_id = auth.uid() OR\n    EXISTS (\n      SELECT 1 FROM public.clients c \n      WHERE c.id = call_logs.client_id AND c.created_by = auth.uid()\n    ) OR\n    EXISTS (\n      SELECT 1 FROM public.leads l \n      WHERE l.id = call_logs.lead_id AND (l.created_by = auth.uid() OR l.assigned_to = auth.uid())\n    ) OR\n    EXISTS (\n      SELECT 1 FROM public.users \n      WHERE id = auth.uid() AND role IN ('admin', 'manager')\n    )\n  )","CREATE POLICY \\"Users can insert call logs\\" ON public.call_logs\n  FOR INSERT WITH CHECK (auth.uid() IS NOT NULL)","-- SMS logs - similar access pattern as call logs\nCREATE POLICY \\"Users can view SMS logs they have access to\\" ON public.sms_logs\n  FOR SELECT USING (\n    user_id = auth.uid() OR\n    EXISTS (\n      SELECT 1 FROM public.clients c \n      WHERE c.id = sms_logs.client_id AND c.created_by = auth.uid()\n    ) OR\n    EXISTS (\n      SELECT 1 FROM public.leads l \n      WHERE l.id = sms_logs.lead_id AND (l.created_by = auth.uid() OR l.assigned_to = auth.uid())\n    ) OR\n    EXISTS (\n      SELECT 1 FROM public.users \n      WHERE id = auth.uid() AND role IN ('admin', 'manager')\n    )\n  )","CREATE POLICY \\"Users can insert SMS logs\\" ON public.sms_logs\n  FOR INSERT WITH CHECK (auth.uid() IS NOT NULL)","-- =============================================================================\n-- FUNCTIONS AND TRIGGERS\n-- =============================================================================\n\n-- Apply standard audit triggers\nCREATE TRIGGER update_ringcentral_tokens_updated_at\n  BEFORE UPDATE ON public.ringcentral_tokens\n  FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column()","CREATE TRIGGER update_user_phone_preferences_updated_at\n  BEFORE UPDATE ON public.user_phone_preferences\n  FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column()","CREATE TRIGGER update_call_logs_updated_at\n  BEFORE UPDATE ON public.call_logs\n  FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column()","CREATE TRIGGER update_sms_logs_updated_at\n  BEFORE UPDATE ON public.sms_logs\n  FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column()","-- Function to ensure only one default phone preference per user\nCREATE OR REPLACE FUNCTION public.ensure_single_default_phone()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF NEW.is_default = TRUE THEN\n    -- Remove default flag from other phone preferences for this user\n    UPDATE public.user_phone_preferences \n    SET is_default = FALSE \n    WHERE user_id = NEW.user_id \n    AND id != NEW.id \n    AND is_default = TRUE;\n  END IF;\n  \n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql","-- Trigger to ensure single default phone preference\nCREATE TRIGGER ensure_single_default_phone_preference\n  BEFORE INSERT OR UPDATE ON public.user_phone_preferences\n  FOR EACH ROW EXECUTE FUNCTION public.ensure_single_default_phone()","-- Function to automatically create communication record from call/SMS\nCREATE OR REPLACE FUNCTION public.create_communication_from_call()\nRETURNS TRIGGER AS $$\nBEGIN\n  -- Only create communication record if call was connected and has client/lead\n  IF NEW.status = 'Connected' AND (NEW.client_id IS NOT NULL OR NEW.lead_id IS NOT NULL) THEN\n    INSERT INTO public.communications (\n      client_id,\n      lead_id,\n      type,\n      direction,\n      content,\n      duration,\n      status,\n      ai_summary,\n      ai_sentiment,\n      created_at,\n      completed_at\n    ) VALUES (\n      NEW.client_id,\n      NEW.lead_id,\n      'call',\n      NEW.direction,\n      COALESCE(NEW.transcription, 'Call completed - duration: ' || NEW.duration || ' seconds'),\n      NEW.duration,\n      'Completed',\n      NEW.ai_summary,\n      NEW.ai_sentiment,\n      NEW.start_time,\n      NEW.end_time\n    );\n  END IF;\n  \n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER","-- Trigger to create communication from call\nCREATE TRIGGER create_communication_from_call_log\n  AFTER INSERT OR UPDATE ON public.call_logs\n  FOR EACH ROW EXECUTE FUNCTION public.create_communication_from_call()","-- =============================================================================\n-- COMMENTS\n-- =============================================================================\n\nCOMMENT ON TABLE public.ringcentral_tokens IS 'RingCentral OAuth tokens with encryption and expiration tracking'","COMMENT ON TABLE public.user_phone_preferences IS 'User phone number preferences and call settings'","COMMENT ON TABLE public.call_logs IS 'Call logs from RingCentral with AI analysis and transcription'","COMMENT ON TABLE public.sms_logs IS 'SMS logs from RingCentral with AI analysis'","-- =============================================================================\n-- GRANTS\n-- =============================================================================\n\nGRANT SELECT, INSERT, UPDATE, DELETE ON public.ringcentral_tokens TO authenticated","GRANT SELECT, INSERT, UPDATE, DELETE ON public.user_phone_preferences TO authenticated","GRANT SELECT, INSERT, UPDATE, DELETE ON public.call_logs TO authenticated","GRANT SELECT, INSERT, UPDATE, DELETE ON public.sms_logs TO authenticated"}	create_ringcentral_integration
20250112000009	{"-- =============================================================================\n-- MIGRATION: Comprehensive RLS Policies\n-- =============================================================================\n-- Description: Create Row Level Security policies for all tables ensuring proper multi-tenant data isolation\n-- Version: 1.0.0\n-- Created: 2025-01-12\n\n-- =============================================================================\n-- ADDITIONAL RLS POLICIES FOR COMPREHENSIVE SECURITY\n-- =============================================================================\n\n-- Update leads table to reference pipeline tables\nALTER TABLE public.leads \nADD COLUMN IF NOT EXISTS pipeline_id INTEGER REFERENCES public.pipelines(id),\nADD COLUMN IF NOT EXISTS pipeline_status_id INTEGER REFERENCES public.pipeline_statuses(id),\nADD COLUMN IF NOT EXISTS insurance_type_id INTEGER REFERENCES public.insurance_types(id),\nADD COLUMN IF NOT EXISTS lead_status_id INTEGER REFERENCES public.lead_statuses(id)","-- Update leads table to reference marketing tables\nALTER TABLE public.leads \nADD COLUMN IF NOT EXISTS campaign_id UUID REFERENCES public.campaigns(id),\nADD COLUMN IF NOT EXISTS ab_test_id UUID REFERENCES public.ab_tests(id),\nADD COLUMN IF NOT EXISTS content_template_id UUID REFERENCES public.content_templates(id)","-- =============================================================================\n-- ENHANCED RLS POLICIES FOR EXISTING TABLES\n-- =============================================================================\n\n-- Enhanced policies for vehicles, homes, specialty_items with proper access control\nDROP POLICY IF EXISTS \\"Users can view vehicles they have access to\\" ON public.vehicles","CREATE POLICY \\"Users can view vehicles they have access to\\" ON public.vehicles\n  FOR SELECT USING (\n    created_by = auth.uid() OR\n    EXISTS (\n      SELECT 1 FROM public.clients c \n      WHERE c.id = vehicles.client_id \n      AND (c.created_by = auth.uid() OR \n           EXISTS (SELECT 1 FROM public.leads l WHERE l.client_id = c.id AND (l.created_by = auth.uid() OR l.assigned_to = auth.uid())))\n    ) OR\n    EXISTS (\n      SELECT 1 FROM public.leads l \n      WHERE l.id = vehicles.lead_id AND (l.created_by = auth.uid() OR l.assigned_to = auth.uid())\n    ) OR\n    EXISTS (\n      SELECT 1 FROM public.users \n      WHERE id = auth.uid() AND role IN ('admin', 'manager')\n    )\n  )","CREATE POLICY \\"Users can update vehicles they have access to\\" ON public.vehicles\n  FOR UPDATE USING (\n    created_by = auth.uid() OR\n    EXISTS (\n      SELECT 1 FROM public.clients c \n      WHERE c.id = vehicles.client_id AND c.created_by = auth.uid()\n    ) OR\n    EXISTS (\n      SELECT 1 FROM public.leads l \n      WHERE l.id = vehicles.lead_id AND (l.created_by = auth.uid() OR l.assigned_to = auth.uid())\n    ) OR\n    EXISTS (\n      SELECT 1 FROM public.users \n      WHERE id = auth.uid() AND role IN ('admin', 'manager')\n    )\n  )","-- Similar enhanced policies for homes\nDROP POLICY IF EXISTS \\"Users can view homes they have access to\\" ON public.homes","CREATE POLICY \\"Users can view homes they have access to\\" ON public.homes\n  FOR SELECT USING (\n    created_by = auth.uid() OR\n    EXISTS (\n      SELECT 1 FROM public.clients c \n      WHERE c.id = homes.client_id \n      AND (c.created_by = auth.uid() OR \n           EXISTS (SELECT 1 FROM public.leads l WHERE l.client_id = c.id AND (l.created_by = auth.uid() OR l.assigned_to = auth.uid())))\n    ) OR\n    EXISTS (\n      SELECT 1 FROM public.leads l \n      WHERE l.id = homes.lead_id AND (l.created_by = auth.uid() OR l.assigned_to = auth.uid())\n    ) OR\n    EXISTS (\n      SELECT 1 FROM public.users \n      WHERE id = auth.uid() AND role IN ('admin', 'manager')\n    )\n  )","CREATE POLICY \\"Users can update homes they have access to\\" ON public.homes\n  FOR UPDATE USING (\n    created_by = auth.uid() OR\n    EXISTS (\n      SELECT 1 FROM public.clients c \n      WHERE c.id = homes.client_id AND c.created_by = auth.uid()\n    ) OR\n    EXISTS (\n      SELECT 1 FROM public.leads l \n      WHERE l.id = homes.lead_id AND (l.created_by = auth.uid() OR l.assigned_to = auth.uid())\n    ) OR\n    EXISTS (\n      SELECT 1 FROM public.users \n      WHERE id = auth.uid() AND role IN ('admin', 'manager')\n    )\n  )","-- Enhanced policies for specialty_items\nDROP POLICY IF EXISTS \\"Users can view specialty items they have access to\\" ON public.specialty_items","CREATE POLICY \\"Users can view specialty items they have access to\\" ON public.specialty_items\n  FOR SELECT USING (\n    created_by = auth.uid() OR\n    EXISTS (\n      SELECT 1 FROM public.clients c \n      WHERE c.id = specialty_items.client_id \n      AND (c.created_by = auth.uid() OR \n           EXISTS (SELECT 1 FROM public.leads l WHERE l.client_id = c.id AND (l.created_by = auth.uid() OR l.assigned_to = auth.uid())))\n    ) OR\n    EXISTS (\n      SELECT 1 FROM public.leads l \n      WHERE l.id = specialty_items.lead_id AND (l.created_by = auth.uid() OR l.assigned_to = auth.uid())\n    ) OR\n    EXISTS (\n      SELECT 1 FROM public.users \n      WHERE id = auth.uid() AND role IN ('admin', 'manager')\n    )\n  )","CREATE POLICY \\"Users can update specialty items they have access to\\" ON public.specialty_items\n  FOR UPDATE USING (\n    created_by = auth.uid() OR\n    EXISTS (\n      SELECT 1 FROM public.clients c \n      WHERE c.id = specialty_items.client_id AND c.created_by = auth.uid()\n    ) OR\n    EXISTS (\n      SELECT 1 FROM public.leads l \n      WHERE l.id = specialty_items.lead_id AND (l.created_by = auth.uid() OR l.assigned_to = auth.uid())\n    ) OR\n    EXISTS (\n      SELECT 1 FROM public.users \n      WHERE id = auth.uid() AND role IN ('admin', 'manager')\n    )\n  )","-- Enhanced policies for quotes\nDROP POLICY IF EXISTS \\"Users can view quotes they have access to\\" ON public.quotes","CREATE POLICY \\"Users can view quotes they have access to\\" ON public.quotes\n  FOR SELECT USING (\n    created_by = auth.uid() OR\n    EXISTS (\n      SELECT 1 FROM public.leads l \n      WHERE l.id = quotes.lead_id AND (l.created_by = auth.uid() OR l.assigned_to = auth.uid())\n    ) OR\n    EXISTS (\n      SELECT 1 FROM public.users \n      WHERE id = auth.uid() AND role IN ('admin', 'manager')\n    )\n  )","CREATE POLICY \\"Users can update quotes they have access to\\" ON public.quotes\n  FOR UPDATE USING (\n    created_by = auth.uid() OR\n    EXISTS (\n      SELECT 1 FROM public.leads l \n      WHERE l.id = quotes.lead_id AND (l.created_by = auth.uid() OR l.assigned_to = auth.uid())\n    ) OR\n    EXISTS (\n      SELECT 1 FROM public.users \n      WHERE id = auth.uid() AND role IN ('admin', 'manager')\n    )\n  )","-- =============================================================================\n-- ROLE-BASED ACCESS CONTROL FUNCTIONS\n-- =============================================================================\n\n-- Function to check if user can access a specific client\nCREATE OR REPLACE FUNCTION public.user_can_access_client(client_id_param UUID)\nRETURNS BOOLEAN AS $$\nBEGIN\n  RETURN EXISTS (\n    SELECT 1 FROM public.clients c\n    WHERE c.id = client_id_param\n    AND (\n      c.created_by = auth.uid() OR\n      EXISTS (\n        SELECT 1 FROM public.leads l \n        WHERE l.client_id = c.id AND (l.created_by = auth.uid() OR l.assigned_to = auth.uid())\n      ) OR\n      EXISTS (\n        SELECT 1 FROM public.users \n        WHERE id = auth.uid() AND role IN ('admin', 'manager')\n      )\n    )\n  );\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER","-- Function to check if user can access a specific lead\nCREATE OR REPLACE FUNCTION public.user_can_access_lead(lead_id_param UUID)\nRETURNS BOOLEAN AS $$\nBEGIN\n  RETURN EXISTS (\n    SELECT 1 FROM public.leads l\n    WHERE l.id = lead_id_param\n    AND (\n      l.created_by = auth.uid() OR\n      l.assigned_to = auth.uid() OR\n      EXISTS (\n        SELECT 1 FROM public.users \n        WHERE id = auth.uid() AND role IN ('admin', 'manager')\n      )\n    )\n  );\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER","-- Function to get user's accessible client IDs\nCREATE OR REPLACE FUNCTION public.get_user_accessible_client_ids()\nRETURNS UUID[] AS $$\nBEGIN\n  RETURN ARRAY(\n    SELECT c.id \n    FROM public.clients c\n    WHERE c.created_by = auth.uid() OR\n          EXISTS (\n            SELECT 1 FROM public.leads l \n            WHERE l.client_id = c.id AND (l.created_by = auth.uid() OR l.assigned_to = auth.uid())\n          ) OR\n          EXISTS (\n            SELECT 1 FROM public.users \n            WHERE id = auth.uid() AND role IN ('admin', 'manager')\n          )\n  );\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER","-- Function to get user's accessible lead IDs\nCREATE OR REPLACE FUNCTION public.get_user_accessible_lead_ids()\nRETURNS UUID[] AS $$\nBEGIN\n  RETURN ARRAY(\n    SELECT l.id \n    FROM public.leads l\n    WHERE l.created_by = auth.uid() OR\n          l.assigned_to = auth.uid() OR\n          EXISTS (\n            SELECT 1 FROM public.users \n            WHERE id = auth.uid() AND role IN ('admin', 'manager')\n          )\n  );\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER","-- =============================================================================\n-- DATA ISOLATION POLICIES\n-- =============================================================================\n\n-- Policy to prevent data leakage through foreign key relationships\nCREATE OR REPLACE FUNCTION public.validate_client_lead_relationship()\nRETURNS TRIGGER AS $$\nBEGIN\n  -- Ensure that if both client_id and lead_id are provided, they are related\n  IF NEW.client_id IS NOT NULL AND NEW.lead_id IS NOT NULL THEN\n    IF NOT EXISTS (\n      SELECT 1 FROM public.leads l \n      WHERE l.id = NEW.lead_id AND l.client_id = NEW.client_id\n    ) THEN\n      RAISE EXCEPTION 'Client and lead are not related';\n    END IF;\n  END IF;\n  \n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql","-- Apply relationship validation to relevant tables\nCREATE TRIGGER validate_vehicles_client_lead_relationship\n  BEFORE INSERT OR UPDATE ON public.vehicles\n  FOR EACH ROW EXECUTE FUNCTION public.validate_client_lead_relationship()","CREATE TRIGGER validate_homes_client_lead_relationship\n  BEFORE INSERT OR UPDATE ON public.homes\n  FOR EACH ROW EXECUTE FUNCTION public.validate_client_lead_relationship()","CREATE TRIGGER validate_specialty_items_client_lead_relationship\n  BEFORE INSERT OR UPDATE ON public.specialty_items\n  FOR EACH ROW EXECUTE FUNCTION public.validate_client_lead_relationship()","CREATE TRIGGER validate_communications_client_lead_relationship\n  BEFORE INSERT OR UPDATE ON public.communications\n  FOR EACH ROW EXECUTE FUNCTION public.validate_client_lead_relationship()","-- =============================================================================\n-- AUDIT AND COMPLIANCE POLICIES\n-- =============================================================================\n\n-- Function to log sensitive data access\nCREATE OR REPLACE FUNCTION public.log_sensitive_data_access()\nRETURNS TRIGGER AS $$\nBEGIN\n  -- Log access to sensitive tables for compliance\n  INSERT INTO public.ai_interactions (\n    type,\n    source,\n    content,\n    user_id,\n    metadata,\n    created_at\n  ) VALUES (\n    'Data Access',\n    'RLS Policy',\n    'Accessed ' || TG_TABLE_NAME || ' record: ' || NEW.id::TEXT,\n    auth.uid(),\n    jsonb_build_object(\n      'table', TG_TABLE_NAME,\n      'operation', TG_OP,\n      'record_id', NEW.id\n    ),\n    NOW()\n  );\n  \n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER","-- Apply audit logging to sensitive tables (optional - can be enabled for compliance)\n-- CREATE TRIGGER log_clients_access\n--   AFTER SELECT ON public.clients\n--   FOR EACH ROW EXECUTE FUNCTION public.log_sensitive_data_access();\n\n-- =============================================================================\n-- PERFORMANCE OPTIMIZATION FOR RLS\n-- =============================================================================\n\n-- Create indexes to optimize RLS policy performance\nCREATE INDEX IF NOT EXISTS idx_leads_created_by_assigned_to ON public.leads(created_by, assigned_to)","CREATE INDEX IF NOT EXISTS idx_clients_created_by ON public.clients(created_by)","CREATE INDEX IF NOT EXISTS idx_users_role ON public.users(role)","-- Composite indexes for common RLS queries\nCREATE INDEX IF NOT EXISTS idx_vehicles_client_lead_created_by ON public.vehicles(client_id, lead_id, created_by)","CREATE INDEX IF NOT EXISTS idx_homes_client_lead_created_by ON public.homes(client_id, lead_id, created_by)","CREATE INDEX IF NOT EXISTS idx_specialty_items_client_lead_created_by ON public.specialty_items(client_id, lead_id, created_by)","CREATE INDEX IF NOT EXISTS idx_communications_client_lead_created_by ON public.communications(client_id, lead_id, created_by)","-- =============================================================================\n-- COMMENTS\n-- =============================================================================\n\nCOMMENT ON FUNCTION public.user_can_access_client(UUID) IS 'Check if current user can access a specific client'","COMMENT ON FUNCTION public.user_can_access_lead(UUID) IS 'Check if current user can access a specific lead'","COMMENT ON FUNCTION public.get_user_accessible_client_ids() IS 'Get array of client IDs accessible to current user'","COMMENT ON FUNCTION public.get_user_accessible_lead_ids() IS 'Get array of lead IDs accessible to current user'","-- =============================================================================\n-- GRANTS\n-- =============================================================================\n\nGRANT EXECUTE ON FUNCTION public.user_can_access_client(UUID) TO authenticated","GRANT EXECUTE ON FUNCTION public.user_can_access_lead(UUID) TO authenticated","GRANT EXECUTE ON FUNCTION public.get_user_accessible_client_ids() TO authenticated","GRANT EXECUTE ON FUNCTION public.get_user_accessible_lead_ids() TO authenticated"}	comprehensive_rls_policies
20250112000010	{"-- =============================================================================\n-- MIGRATION: Database Functions and Triggers\n-- =============================================================================\n-- Description: Create utility functions for timestamps, AI processing, and automated workflows\n-- Version: 1.0.0\n-- Created: 2025-01-12\n\n-- =============================================================================\n-- UTILITY FUNCTIONS\n-- =============================================================================\n\n-- Function to generate a unique identifier for imports\nCREATE OR REPLACE FUNCTION public.generate_import_batch_id()\nRETURNS UUID AS $$\nBEGIN\n  RETURN uuid_generate_v4();\nEND;\n$$ LANGUAGE plpgsql","-- Function to calculate business days between two dates\nCREATE OR REPLACE FUNCTION public.business_days_between(start_date DATE, end_date DATE)\nRETURNS INTEGER AS $$\nDECLARE\n  days INTEGER := 0;\n  current_day DATE := start_date;\nBEGIN\n  WHILE current_day <= end_date LOOP\n    -- Check if it's a weekday (Monday = 1, Sunday = 7)\n    IF EXTRACT(DOW FROM current_day) BETWEEN 1 AND 5 THEN\n      days := days + 1;\n    END IF;\n    current_day := current_day + INTERVAL '1 day';\n  END LOOP;\n\n  RETURN days;\nEND;\n$$ LANGUAGE plpgsql IMMUTABLE","-- Function to calculate next business day\nCREATE OR REPLACE FUNCTION public.next_business_day(input_date DATE, days_to_add INTEGER DEFAULT 1)\nRETURNS DATE AS $$\nDECLARE\n  result_date DATE := input_date;\n  days_added INTEGER := 0;\nBEGIN\n  WHILE days_added < days_to_add LOOP\n    result_date := result_date + INTERVAL '1 day';\n    -- Check if it's a weekday\n    IF EXTRACT(DOW FROM result_date) BETWEEN 1 AND 5 THEN\n      days_added := days_added + 1;\n    END IF;\n  END LOOP;\n\n  RETURN result_date;\nEND;\n$$ LANGUAGE plpgsql IMMUTABLE","-- Function to format phone numbers\nCREATE OR REPLACE FUNCTION public.format_phone_number(phone TEXT)\nRETURNS TEXT AS $$\nBEGIN\n  -- Remove all non-digit characters\n  phone := regexp_replace(phone, '[^0-9]', '', 'g');\n  \n  -- Handle different phone number lengths\n  CASE LENGTH(phone)\n    WHEN 10 THEN\n      RETURN '(' || SUBSTRING(phone, 1, 3) || ') ' || SUBSTRING(phone, 4, 3) || '-' || SUBSTRING(phone, 7, 4);\n    WHEN 11 THEN\n      IF SUBSTRING(phone, 1, 1) = '1' THEN\n        RETURN '+1 (' || SUBSTRING(phone, 2, 3) || ') ' || SUBSTRING(phone, 5, 3) || '-' || SUBSTRING(phone, 8, 4);\n      ELSE\n        RETURN phone; -- Return as-is if not US number\n      END IF;\n    ELSE\n      RETURN phone; -- Return as-is for other formats\n  END CASE;\nEND;\n$$ LANGUAGE plpgsql IMMUTABLE","-- Function to extract digits from phone number\nCREATE OR REPLACE FUNCTION public.extract_phone_digits(phone TEXT)\nRETURNS TEXT AS $$\nBEGIN\n  RETURN regexp_replace(COALESCE(phone, ''), '[^0-9]', '', 'g');\nEND;\n$$ LANGUAGE plpgsql IMMUTABLE","-- Function to validate email format\nCREATE OR REPLACE FUNCTION public.is_valid_email(email TEXT)\nRETURNS BOOLEAN AS $$\nBEGIN\n  RETURN email ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,}$';\nEND;\n$$ LANGUAGE plpgsql IMMUTABLE","-- =============================================================================\n-- AI PROCESSING FUNCTIONS\n-- =============================================================================\n\n-- Function to calculate lead score based on various factors\nCREATE OR REPLACE FUNCTION public.calculate_lead_score(lead_id_param UUID)\nRETURNS INTEGER AS $$\nDECLARE\n  score INTEGER := 0;\n  lead_record RECORD;\n  days_since_created INTEGER;\n  communication_count INTEGER;\nBEGIN\n  -- Get lead details\n  SELECT * INTO lead_record FROM public.leads WHERE id = lead_id_param;\n  \n  IF lead_record IS NULL THEN\n    RETURN 0;\n  END IF;\n  \n  -- Base score factors\n  score := 50; -- Base score\n  \n  -- Age factor (newer leads get higher scores)\n  days_since_created := EXTRACT(DAY FROM NOW() - lead_record.created_at);\n  IF days_since_created <= 7 THEN\n    score := score + 20;\n  ELSIF days_since_created <= 30 THEN\n    score := score + 10;\n  END IF;\n  \n  -- Premium factor\n  IF lead_record.premium IS NOT NULL AND lead_record.premium > 0 THEN\n    score := score + 15;\n  END IF;\n  \n  -- Communication engagement\n  SELECT COUNT(*) INTO communication_count \n  FROM public.communications \n  WHERE lead_id = lead_id_param AND direction = 'Inbound';\n  \n  score := score + (communication_count * 5);\n  \n  -- Status factor\n  CASE lead_record.status\n    WHEN 'Qualified' THEN score := score + 25;\n    WHEN 'Contacted' THEN score := score + 15;\n    WHEN 'New' THEN score := score + 10;\n    WHEN 'Lost' THEN score := score - 50;\n    ELSE score := score;\n  END CASE;\n  \n  -- Ensure score is within bounds\n  score := GREATEST(0, LEAST(100, score));\n  \n  RETURN score;\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER","-- Function to suggest next action for a lead\nCREATE OR REPLACE FUNCTION public.suggest_next_action(lead_id_param UUID)\nRETURNS TEXT AS $$\nDECLARE\n  lead_record RECORD;\n  last_communication RECORD;\n  days_since_last_contact INTEGER;\n  suggested_action TEXT;\nBEGIN\n  -- Get lead details\n  SELECT * INTO lead_record FROM public.leads WHERE id = lead_id_param;\n  \n  IF lead_record IS NULL THEN\n    RETURN 'Lead not found';\n  END IF;\n  \n  -- Get last communication\n  SELECT * INTO last_communication \n  FROM public.communications \n  WHERE lead_id = lead_id_param \n  ORDER BY created_at DESC \n  LIMIT 1;\n  \n  -- Calculate days since last contact\n  IF last_communication IS NOT NULL THEN\n    days_since_last_contact := EXTRACT(DAY FROM NOW() - last_communication.created_at);\n  ELSE\n    days_since_last_contact := EXTRACT(DAY FROM NOW() - lead_record.created_at);\n  END IF;\n  \n  -- Suggest action based on status and time\n  CASE lead_record.status\n    WHEN 'New' THEN\n      IF days_since_last_contact >= 1 THEN\n        suggested_action := 'Make initial contact call';\n      ELSE\n        suggested_action := 'Send welcome email';\n      END IF;\n    WHEN 'Contacted' THEN\n      IF days_since_last_contact >= 3 THEN\n        suggested_action := 'Follow up with quote information';\n      ELSE\n        suggested_action := 'Wait for response';\n      END IF;\n    WHEN 'Qualified' THEN\n      suggested_action := 'Prepare and send quote';\n    WHEN 'Quoted' THEN\n      IF days_since_last_contact >= 7 THEN\n        suggested_action := 'Follow up on quote status';\n      ELSE\n        suggested_action := 'Wait for quote response';\n      END IF;\n    WHEN 'Sold' THEN\n      suggested_action := 'Process policy and send welcome package';\n    WHEN 'Lost' THEN\n      suggested_action := 'Add to nurture campaign';\n    ELSE\n      suggested_action := 'Review lead status';\n  END CASE;\n  \n  RETURN suggested_action;\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER","-- Function to auto-assign leads based on workload\nCREATE OR REPLACE FUNCTION public.auto_assign_lead(lead_id_param UUID)\nRETURNS UUID AS $$\nDECLARE\n  assigned_user_id UUID;\n  min_lead_count INTEGER;\nBEGIN\n  -- Find user with least number of active leads\n  SELECT u.id INTO assigned_user_id\n  FROM public.users u\n  LEFT JOIN public.leads l ON l.assigned_to = u.id AND l.status NOT IN ('Sold', 'Lost')\n  WHERE u.role IN ('agent', 'manager') AND u.is_active = TRUE\n  GROUP BY u.id\n  ORDER BY COUNT(l.id) ASC, RANDOM()\n  LIMIT 1;\n  \n  -- Update the lead with assignment\n  IF assigned_user_id IS NOT NULL THEN\n    UPDATE public.leads \n    SET assigned_to = assigned_user_id, updated_at = NOW()\n    WHERE id = lead_id_param;\n  END IF;\n  \n  RETURN assigned_user_id;\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER","-- =============================================================================\n-- WORKFLOW AUTOMATION FUNCTIONS\n-- =============================================================================\n\n-- Function to create follow-up task\nCREATE OR REPLACE FUNCTION public.create_follow_up_task(\n  lead_id_param UUID,\n  task_type TEXT,\n  due_date TIMESTAMP WITH TIME ZONE,\n  description TEXT DEFAULT NULL\n)\nRETURNS UUID AS $$\nDECLARE\n  task_id UUID;\nBEGIN\n  -- Insert into communications as a scheduled task\n  INSERT INTO public.communications (\n    lead_id,\n    type,\n    direction,\n    subject,\n    content,\n    status,\n    scheduled_at,\n    created_by\n  ) VALUES (\n    lead_id_param,\n    task_type,\n    'Outbound',\n    'Follow-up: ' || task_type,\n    COALESCE(description, 'Automated follow-up task'),\n    'Pending',\n    due_date,\n    auth.uid()\n  ) RETURNING id INTO task_id;\n  \n  RETURN task_id;\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER","-- Function to process expired quotes\nCREATE OR REPLACE FUNCTION public.process_expired_quotes()\nRETURNS INTEGER AS $$\nDECLARE\n  expired_count INTEGER := 0;\n  quote_record RECORD;\nBEGIN\n  -- Find and process expired quotes\n  FOR quote_record IN \n    SELECT q.*, l.id as lead_id\n    FROM public.quotes q\n    JOIN public.leads l ON l.id = q.lead_id\n    WHERE q.status = 'Approved' \n    AND q.expiration_date < CURRENT_DATE\n    AND q.expired_at IS NULL\n  LOOP\n    -- Mark quote as expired\n    UPDATE public.quotes \n    SET status = 'Expired', expired_at = NOW()\n    WHERE id = quote_record.id;\n    \n    -- Create follow-up task\n    PERFORM public.create_follow_up_task(\n      quote_record.lead_id,\n      'call',\n      NOW() + INTERVAL '1 day',\n      'Quote expired - follow up for renewal'\n    );\n    \n    expired_count := expired_count + 1;\n  END LOOP;\n  \n  RETURN expired_count;\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER","-- Function to clean up old data\nCREATE OR REPLACE FUNCTION public.cleanup_old_data()\nRETURNS INTEGER AS $$\nDECLARE\n  cleanup_count INTEGER := 0;\nBEGIN\n  -- Archive old agent memory (older than 1 year)\n  UPDATE public.agent_memory \n  SET is_archived = TRUE\n  WHERE created_at < NOW() - INTERVAL '1 year'\n  AND is_archived = FALSE\n  AND memory_type NOT IN ('preference', 'fact');\n  \n  GET DIAGNOSTICS cleanup_count = ROW_COUNT;\n  \n  -- Delete old AI interactions (older than 6 months, except important ones)\n  DELETE FROM public.ai_interactions\n  WHERE created_at < NOW() - INTERVAL '6 months'\n  AND type NOT IN ('Summary', 'Prediction')\n  AND quality_score < 3;\n  \n  RETURN cleanup_count;\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER","-- =============================================================================\n-- TRIGGER FUNCTIONS\n-- =============================================================================\n\n-- Function to automatically set next contact date\nCREATE OR REPLACE FUNCTION public.set_next_contact_date()\nRETURNS TRIGGER AS $$\nBEGIN\n  -- Set next contact date based on status\n  CASE NEW.status\n    WHEN 'New' THEN\n      NEW.next_contact_at := NOW() + INTERVAL '1 day';\n    WHEN 'Contacted' THEN\n      NEW.next_contact_at := NOW() + INTERVAL '3 days';\n    WHEN 'Qualified' THEN\n      NEW.next_contact_at := NOW() + INTERVAL '2 days';\n    WHEN 'Quoted' THEN\n      NEW.next_contact_at := NOW() + INTERVAL '7 days';\n    WHEN 'Sold', 'Lost' THEN\n      NEW.next_contact_at := NULL;\n    ELSE\n      -- Keep existing date if status doesn't change\n      IF OLD.status = NEW.status THEN\n        NEW.next_contact_at := OLD.next_contact_at;\n      END IF;\n  END CASE;\n  \n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql","-- Function to update lead last_contact_at when communication is created\nCREATE OR REPLACE FUNCTION public.update_lead_last_contact()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF NEW.lead_id IS NOT NULL THEN\n    UPDATE public.leads \n    SET last_contact_at = NEW.created_at\n    WHERE id = NEW.lead_id;\n  END IF;\n  \n  IF NEW.client_id IS NOT NULL THEN\n    UPDATE public.clients \n    SET last_contact_at = NEW.created_at\n    WHERE id = NEW.client_id;\n  END IF;\n  \n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER","-- =============================================================================\n-- APPLY TRIGGERS\n-- =============================================================================\n\n-- Trigger to set next contact date on lead status change\nCREATE TRIGGER set_lead_next_contact_date\n  BEFORE INSERT OR UPDATE ON public.leads\n  FOR EACH ROW EXECUTE FUNCTION public.set_next_contact_date()","-- Trigger to update last contact when communication is created\nCREATE TRIGGER update_last_contact_on_communication\n  AFTER INSERT ON public.communications\n  FOR EACH ROW EXECUTE FUNCTION public.update_lead_last_contact()","-- =============================================================================\n-- SCHEDULED FUNCTIONS (for use with pg_cron or external schedulers)\n-- =============================================================================\n\n-- Function to run daily maintenance tasks\nCREATE OR REPLACE FUNCTION public.daily_maintenance()\nRETURNS TEXT AS $$\nDECLARE\n  result TEXT := '';\n  expired_quotes INTEGER;\n  cleaned_records INTEGER;\nBEGIN\n  -- Process expired quotes\n  expired_quotes := public.process_expired_quotes();\n  result := result || 'Processed ' || expired_quotes || ' expired quotes. ';\n  \n  -- Clean up old data\n  cleaned_records := public.cleanup_old_data();\n  result := result || 'Cleaned up ' || cleaned_records || ' old records. ';\n  \n  -- Update AI insights (placeholder for future AI integration)\n  result := result || 'AI insights updated. ';\n  \n  RETURN result;\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER","-- =============================================================================\n-- COMMENTS\n-- =============================================================================\n\nCOMMENT ON FUNCTION public.calculate_lead_score(UUID) IS 'Calculate lead score based on various factors'","COMMENT ON FUNCTION public.suggest_next_action(UUID) IS 'Suggest next action for a lead based on status and history'","COMMENT ON FUNCTION public.auto_assign_lead(UUID) IS 'Auto-assign lead to user with least workload'","COMMENT ON FUNCTION public.daily_maintenance() IS 'Run daily maintenance tasks including cleanup and processing'","-- =============================================================================\n-- GRANTS\n-- =============================================================================\n\nGRANT EXECUTE ON FUNCTION public.calculate_lead_score(UUID) TO authenticated","GRANT EXECUTE ON FUNCTION public.suggest_next_action(UUID) TO authenticated","GRANT EXECUTE ON FUNCTION public.auto_assign_lead(UUID) TO authenticated","GRANT EXECUTE ON FUNCTION public.create_follow_up_task(UUID, TEXT, TIMESTAMP WITH TIME ZONE, TEXT) TO authenticated","GRANT EXECUTE ON FUNCTION public.format_phone_number(TEXT) TO authenticated","GRANT EXECUTE ON FUNCTION public.is_valid_email(TEXT) TO authenticated","GRANT EXECUTE ON FUNCTION public.business_days_between(DATE, DATE) TO authenticated","GRANT EXECUTE ON FUNCTION public.next_business_day(DATE, INTEGER) TO authenticated"}	database_functions_and_triggers
20250112000011	{"-- =============================================================================\n-- MIGRATION: Real-time Subscriptions Setup\n-- =============================================================================\n-- Description: Configure Supabase real-time for live updates on leads, communications, and pipeline changes\n-- Version: 1.0.0\n-- Created: 2025-01-12\n\n-- =============================================================================\n-- ENABLE REAL-TIME FOR TABLES\n-- =============================================================================\n\n-- Enable real-time for core business tables\nALTER PUBLICATION supabase_realtime ADD TABLE public.leads","ALTER PUBLICATION supabase_realtime ADD TABLE public.clients","ALTER PUBLICATION supabase_realtime ADD TABLE public.communications","ALTER PUBLICATION supabase_realtime ADD TABLE public.quotes","ALTER PUBLICATION supabase_realtime ADD TABLE public.ai_interactions","ALTER PUBLICATION supabase_realtime ADD TABLE public.call_logs","ALTER PUBLICATION supabase_realtime ADD TABLE public.sms_logs","ALTER PUBLICATION supabase_realtime ADD TABLE public.lead_status_history","ALTER PUBLICATION supabase_realtime ADD TABLE public.customer_touchpoints","-- Enable real-time for configuration tables that might change\nALTER PUBLICATION supabase_realtime ADD TABLE public.pipelines","ALTER PUBLICATION supabase_realtime ADD TABLE public.pipeline_statuses","ALTER PUBLICATION supabase_realtime ADD TABLE public.lead_statuses","ALTER PUBLICATION supabase_realtime ADD TABLE public.campaigns","ALTER PUBLICATION supabase_realtime ADD TABLE public.ab_tests","-- Enable real-time for user-related tables\nALTER PUBLICATION supabase_realtime ADD TABLE public.users","ALTER PUBLICATION supabase_realtime ADD TABLE public.user_phone_preferences","-- =============================================================================\n-- REAL-TIME NOTIFICATION FUNCTIONS\n-- =============================================================================\n\n-- Function to send real-time notifications for lead changes\nCREATE OR REPLACE FUNCTION public.notify_lead_change()\nRETURNS TRIGGER AS $$\nDECLARE\n  notification_payload JSONB;\n  channel_name TEXT;\nBEGIN\n  -- Determine the operation type\n  IF TG_OP = 'DELETE' THEN\n    notification_payload := jsonb_build_object(\n      'operation', 'DELETE',\n      'table', 'leads',\n      'id', OLD.id,\n      'old_record', row_to_json(OLD)\n    );\n  ELSE\n    notification_payload := jsonb_build_object(\n      'operation', TG_OP,\n      'table', 'leads',\n      'id', COALESCE(NEW.id, OLD.id),\n      'new_record', CASE WHEN NEW IS NOT NULL THEN row_to_json(NEW) ELSE NULL END,\n      'old_record', CASE WHEN OLD IS NOT NULL THEN row_to_json(OLD) ELSE NULL END\n    );\n  END IF;\n  \n  -- Send notification to general leads channel\n  PERFORM pg_notify('leads_changes', notification_payload::TEXT);\n  \n  -- Send notification to user-specific channel if assigned\n  IF (TG_OP = 'DELETE' AND OLD.assigned_to IS NOT NULL) OR \n     (TG_OP != 'DELETE' AND NEW.assigned_to IS NOT NULL) THEN\n    channel_name := 'user_' || COALESCE(NEW.assigned_to, OLD.assigned_to)::TEXT || '_leads';\n    PERFORM pg_notify(channel_name, notification_payload::TEXT);\n  END IF;\n  \n  -- Send notification to pipeline-specific channel\n  IF (TG_OP = 'DELETE' AND OLD.pipeline_id IS NOT NULL) OR \n     (TG_OP != 'DELETE' AND NEW.pipeline_id IS NOT NULL) THEN\n    channel_name := 'pipeline_' || COALESCE(NEW.pipeline_id, OLD.pipeline_id)::TEXT || '_leads';\n    PERFORM pg_notify(channel_name, notification_payload::TEXT);\n  END IF;\n  \n  RETURN COALESCE(NEW, OLD);\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER","-- Function to send real-time notifications for communication changes\nCREATE OR REPLACE FUNCTION public.notify_communication_change()\nRETURNS TRIGGER AS $$\nDECLARE\n  notification_payload JSONB;\n  channel_name TEXT;\nBEGIN\n  -- Build notification payload\n  IF TG_OP = 'DELETE' THEN\n    notification_payload := jsonb_build_object(\n      'operation', 'DELETE',\n      'table', 'communications',\n      'id', OLD.id,\n      'lead_id', OLD.lead_id,\n      'client_id', OLD.client_id,\n      'old_record', row_to_json(OLD)\n    );\n  ELSE\n    notification_payload := jsonb_build_object(\n      'operation', TG_OP,\n      'table', 'communications',\n      'id', COALESCE(NEW.id, OLD.id),\n      'lead_id', COALESCE(NEW.lead_id, OLD.lead_id),\n      'client_id', COALESCE(NEW.client_id, OLD.client_id),\n      'new_record', CASE WHEN NEW IS NOT NULL THEN row_to_json(NEW) ELSE NULL END,\n      'old_record', CASE WHEN OLD IS NOT NULL THEN row_to_json(OLD) ELSE NULL END\n    );\n  END IF;\n  \n  -- Send to general communications channel\n  PERFORM pg_notify('communications_changes', notification_payload::TEXT);\n  \n  -- Send to lead-specific channel\n  IF COALESCE(NEW.lead_id, OLD.lead_id) IS NOT NULL THEN\n    channel_name := 'lead_' || COALESCE(NEW.lead_id, OLD.lead_id)::TEXT || '_communications';\n    PERFORM pg_notify(channel_name, notification_payload::TEXT);\n  END IF;\n  \n  -- Send to client-specific channel\n  IF COALESCE(NEW.client_id, OLD.client_id) IS NOT NULL THEN\n    channel_name := 'client_' || COALESCE(NEW.client_id, OLD.client_id)::TEXT || '_communications';\n    PERFORM pg_notify(channel_name, notification_payload::TEXT);\n  END IF;\n  \n  RETURN COALESCE(NEW, OLD);\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER","-- Function to send real-time notifications for quote changes\nCREATE OR REPLACE FUNCTION public.notify_quote_change()\nRETURNS TRIGGER AS $$\nDECLARE\n  notification_payload JSONB;\n  channel_name TEXT;\nBEGIN\n  -- Build notification payload\n  IF TG_OP = 'DELETE' THEN\n    notification_payload := jsonb_build_object(\n      'operation', 'DELETE',\n      'table', 'quotes',\n      'id', OLD.id,\n      'lead_id', OLD.lead_id,\n      'old_record', row_to_json(OLD)\n    );\n  ELSE\n    notification_payload := jsonb_build_object(\n      'operation', TG_OP,\n      'table', 'quotes',\n      'id', COALESCE(NEW.id, OLD.id),\n      'lead_id', COALESCE(NEW.lead_id, OLD.lead_id),\n      'new_record', CASE WHEN NEW IS NOT NULL THEN row_to_json(NEW) ELSE NULL END,\n      'old_record', CASE WHEN OLD IS NOT NULL THEN row_to_json(OLD) ELSE NULL END\n    );\n  END IF;\n  \n  -- Send to general quotes channel\n  PERFORM pg_notify('quotes_changes', notification_payload::TEXT);\n  \n  -- Send to lead-specific channel\n  IF COALESCE(NEW.lead_id, OLD.lead_id) IS NOT NULL THEN\n    channel_name := 'lead_' || COALESCE(NEW.lead_id, OLD.lead_id)::TEXT || '_quotes';\n    PERFORM pg_notify(channel_name, notification_payload::TEXT);\n  END IF;\n  \n  RETURN COALESCE(NEW, OLD);\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER","-- Function to send real-time notifications for AI interactions\nCREATE OR REPLACE FUNCTION public.notify_ai_interaction_change()\nRETURNS TRIGGER AS $$\nDECLARE\n  notification_payload JSONB;\n  channel_name TEXT;\nBEGIN\n  -- Only notify on INSERT and UPDATE for AI interactions\n  IF TG_OP = 'DELETE' THEN\n    RETURN OLD;\n  END IF;\n  \n  -- Build notification payload\n  notification_payload := jsonb_build_object(\n    'operation', TG_OP,\n    'table', 'ai_interactions',\n    'id', NEW.id,\n    'agent_id', NEW.agent_id,\n    'lead_id', NEW.lead_id,\n    'client_id', NEW.client_id,\n    'user_id', NEW.user_id,\n    'type', NEW.type,\n    'summary', NEW.summary\n  );\n  \n  -- Send to general AI interactions channel\n  PERFORM pg_notify('ai_interactions_changes', notification_payload::TEXT);\n  \n  -- Send to user-specific channel\n  IF NEW.user_id IS NOT NULL THEN\n    channel_name := 'user_' || NEW.user_id::TEXT || '_ai_interactions';\n    PERFORM pg_notify(channel_name, notification_payload::TEXT);\n  END IF;\n  \n  -- Send to lead-specific channel\n  IF NEW.lead_id IS NOT NULL THEN\n    channel_name := 'lead_' || NEW.lead_id::TEXT || '_ai_interactions';\n    PERFORM pg_notify(channel_name, notification_payload::TEXT);\n  END IF;\n  \n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER","-- Function to send real-time notifications for call logs\nCREATE OR REPLACE FUNCTION public.notify_call_log_change()\nRETURNS TRIGGER AS $$\nDECLARE\n  notification_payload JSONB;\n  channel_name TEXT;\nBEGIN\n  -- Build notification payload\n  notification_payload := jsonb_build_object(\n    'operation', TG_OP,\n    'table', 'call_logs',\n    'id', NEW.id,\n    'user_id', NEW.user_id,\n    'lead_id', NEW.lead_id,\n    'client_id', NEW.client_id,\n    'direction', NEW.direction,\n    'status', NEW.status,\n    'from_number', NEW.from_number,\n    'to_number', NEW.to_number,\n    'duration', NEW.duration\n  );\n  \n  -- Send to general call logs channel\n  PERFORM pg_notify('call_logs_changes', notification_payload::TEXT);\n  \n  -- Send to user-specific channel\n  IF NEW.user_id IS NOT NULL THEN\n    channel_name := 'user_' || NEW.user_id::TEXT || '_calls';\n    PERFORM pg_notify(channel_name, notification_payload::TEXT);\n  END IF;\n  \n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER","-- =============================================================================\n-- CREATE TRIGGERS FOR REAL-TIME NOTIFICATIONS\n-- =============================================================================\n\n-- Triggers for leads table\nCREATE TRIGGER notify_leads_changes\n  AFTER INSERT OR UPDATE OR DELETE ON public.leads\n  FOR EACH ROW EXECUTE FUNCTION public.notify_lead_change()","-- Triggers for communications table\nCREATE TRIGGER notify_communications_changes\n  AFTER INSERT OR UPDATE OR DELETE ON public.communications\n  FOR EACH ROW EXECUTE FUNCTION public.notify_communication_change()","-- Triggers for quotes table\nCREATE TRIGGER notify_quotes_changes\n  AFTER INSERT OR UPDATE OR DELETE ON public.quotes\n  FOR EACH ROW EXECUTE FUNCTION public.notify_quote_change()","-- Triggers for AI interactions table\nCREATE TRIGGER notify_ai_interactions_changes\n  AFTER INSERT OR UPDATE ON public.ai_interactions\n  FOR EACH ROW EXECUTE FUNCTION public.notify_ai_interaction_change()","-- Triggers for call logs table\nCREATE TRIGGER notify_call_logs_changes\n  AFTER INSERT OR UPDATE ON public.call_logs\n  FOR EACH ROW EXECUTE FUNCTION public.notify_call_log_change()","-- =============================================================================\n-- REAL-TIME HELPER FUNCTIONS\n-- =============================================================================\n\n-- Function to subscribe to user-specific channels\nCREATE OR REPLACE FUNCTION public.subscribe_to_user_channels(user_id_param UUID)\nRETURNS TEXT[] AS $$\nDECLARE\n  channels TEXT[];\nBEGIN\n  -- Build array of channels for the user\n  channels := ARRAY[\n    'user_' || user_id_param::TEXT || '_leads',\n    'user_' || user_id_param::TEXT || '_ai_interactions',\n    'user_' || user_id_param::TEXT || '_calls'\n  ];\n  \n  RETURN channels;\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER","-- Function to get real-time channels for a lead\nCREATE OR REPLACE FUNCTION public.get_lead_channels(lead_id_param UUID)\nRETURNS TEXT[] AS $$\nDECLARE\n  channels TEXT[];\n  lead_record RECORD;\nBEGIN\n  -- Get lead details\n  SELECT * INTO lead_record FROM public.leads WHERE id = lead_id_param;\n  \n  IF lead_record IS NULL THEN\n    RETURN ARRAY[]::TEXT[];\n  END IF;\n  \n  -- Build array of channels for the lead\n  channels := ARRAY[\n    'lead_' || lead_id_param::TEXT || '_communications',\n    'lead_' || lead_id_param::TEXT || '_quotes',\n    'lead_' || lead_id_param::TEXT || '_ai_interactions'\n  ];\n  \n  -- Add pipeline-specific channel\n  IF lead_record.pipeline_id IS NOT NULL THEN\n    channels := channels || ('pipeline_' || lead_record.pipeline_id::TEXT || '_leads');\n  END IF;\n  \n  RETURN channels;\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER","-- Function to broadcast system-wide notifications\nCREATE OR REPLACE FUNCTION public.broadcast_system_notification(\n  message TEXT,\n  notification_type TEXT DEFAULT 'info',\n  target_roles TEXT[] DEFAULT ARRAY['admin', 'manager', 'agent', 'user']\n)\nRETURNS VOID AS $$\nDECLARE\n  notification_payload JSONB;\nBEGIN\n  notification_payload := jsonb_build_object(\n    'type', notification_type,\n    'message', message,\n    'target_roles', target_roles,\n    'timestamp', NOW()\n  );\n  \n  PERFORM pg_notify('system_notifications', notification_payload::TEXT);\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER","-- =============================================================================\n-- REAL-TIME PRESENCE FUNCTIONS\n-- =============================================================================\n\n-- Function to update user presence\nCREATE OR REPLACE FUNCTION public.update_user_presence(\n  status TEXT DEFAULT 'online',\n  activity TEXT DEFAULT NULL\n)\nRETURNS VOID AS $$\nDECLARE\n  presence_payload JSONB;\nBEGIN\n  -- Update user's last activity\n  UPDATE public.users \n  SET \n    last_login_at = NOW(),\n    metadata = COALESCE(metadata, '{}'::JSONB) || jsonb_build_object(\n      'presence_status', status,\n      'last_activity', activity,\n      'last_seen', NOW()\n    )\n  WHERE id = auth.uid();\n  \n  -- Broadcast presence update\n  presence_payload := jsonb_build_object(\n    'user_id', auth.uid(),\n    'status', status,\n    'activity', activity,\n    'timestamp', NOW()\n  );\n  \n  PERFORM pg_notify('user_presence', presence_payload::TEXT);\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER","-- =============================================================================\n-- REAL-TIME DASHBOARD FUNCTIONS\n-- =============================================================================\n\n-- Function to get real-time dashboard data\nCREATE OR REPLACE FUNCTION public.get_dashboard_stats()\nRETURNS JSONB AS $$\nDECLARE\n  stats JSONB;\n  user_role TEXT;\nBEGIN\n  -- Get current user role\n  SELECT role INTO user_role FROM public.users WHERE id = auth.uid();\n  \n  -- Build dashboard statistics\n  stats := jsonb_build_object(\n    'leads', jsonb_build_object(\n      'total', (SELECT COUNT(*) FROM public.leads WHERE \n        CASE \n          WHEN user_role IN ('admin', 'manager') THEN TRUE\n          ELSE created_by = auth.uid() OR assigned_to = auth.uid()\n        END),\n      'new', (SELECT COUNT(*) FROM public.leads WHERE status = 'New' AND\n        CASE \n          WHEN user_role IN ('admin', 'manager') THEN TRUE\n          ELSE created_by = auth.uid() OR assigned_to = auth.uid()\n        END),\n      'qualified', (SELECT COUNT(*) FROM public.leads WHERE status = 'Qualified' AND\n        CASE \n          WHEN user_role IN ('admin', 'manager') THEN TRUE\n          ELSE created_by = auth.uid() OR assigned_to = auth.uid()\n        END)\n    ),\n    'communications', jsonb_build_object(\n      'today', (SELECT COUNT(*) FROM public.communications WHERE \n        DATE(created_at) = CURRENT_DATE AND\n        CASE \n          WHEN user_role IN ('admin', 'manager') THEN TRUE\n          ELSE created_by = auth.uid()\n        END)\n    ),\n    'quotes', jsonb_build_object(\n      'pending', (SELECT COUNT(*) FROM public.quotes WHERE status = 'Pending' AND\n        EXISTS (SELECT 1 FROM public.leads l WHERE l.id = quotes.lead_id AND\n          CASE \n            WHEN user_role IN ('admin', 'manager') THEN TRUE\n            ELSE l.created_by = auth.uid() OR l.assigned_to = auth.uid()\n          END))\n    ),\n    'timestamp', NOW()\n  );\n  \n  RETURN stats;\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER","-- =============================================================================\n-- COMMENTS\n-- =============================================================================\n\nCOMMENT ON FUNCTION public.subscribe_to_user_channels(UUID) IS 'Get list of real-time channels for a specific user'","COMMENT ON FUNCTION public.get_lead_channels(UUID) IS 'Get list of real-time channels for a specific lead'","COMMENT ON FUNCTION public.broadcast_system_notification(TEXT, TEXT, TEXT[]) IS 'Broadcast system-wide notifications'","COMMENT ON FUNCTION public.update_user_presence(TEXT, TEXT) IS 'Update user presence status for real-time features'","COMMENT ON FUNCTION public.get_dashboard_stats() IS 'Get real-time dashboard statistics'","-- =============================================================================\n-- GRANTS\n-- =============================================================================\n\nGRANT EXECUTE ON FUNCTION public.subscribe_to_user_channels(UUID) TO authenticated","GRANT EXECUTE ON FUNCTION public.get_lead_channels(UUID) TO authenticated","GRANT EXECUTE ON FUNCTION public.broadcast_system_notification(TEXT, TEXT, TEXT[]) TO authenticated","GRANT EXECUTE ON FUNCTION public.update_user_presence(TEXT, TEXT) TO authenticated","GRANT EXECUTE ON FUNCTION public.get_dashboard_stats() TO authenticated"}	setup_realtime_subscriptions
20250112000012	{"-- =============================================================================\n-- MIGRATION: Seed Data\n-- =============================================================================\n-- Description: Create migration with initial lookup data for statuses, insurance types, pipelines, and AI agents\n-- Version: 1.0.0\n-- Created: 2025-01-12\n\n-- =============================================================================\n-- LEAD STATUSES SEED DATA\n-- =============================================================================\n\nINSERT INTO public.lead_statuses (value, description, is_final, display_order, color_hex, icon_name, ai_action_template) VALUES\n('New', 'Newly created lead requiring initial contact', FALSE, 1, '#3B82F6', 'user-plus', 'Make initial contact within 24 hours. Introduce yourself and gather basic information about their insurance needs.'),\n('Contacted', 'Initial contact has been made', FALSE, 2, '#F59E0B', 'phone', 'Follow up within 3 days. Ask qualifying questions and schedule a detailed needs assessment.'),\n('Qualified', 'Lead has been qualified and shows genuine interest', FALSE, 3, '#8B5CF6', 'check-circle', 'Prepare a customized quote based on their specific needs and risk profile.'),\n('Quoted', 'Quote has been provided to the prospect', FALSE, 4, '#06B6D4', 'document-text', 'Follow up within 7 days to discuss the quote and address any questions or concerns.'),\n('Negotiating', 'In active negotiations about terms or pricing', FALSE, 5, '#F97316', 'chat-bubble-left-right', 'Work with the prospect to find mutually acceptable terms. Consider alternative coverage options.'),\n('Sold', 'Lead has been successfully converted to a client', TRUE, 6, '#10B981', 'check-badge', 'Process the policy, send welcome materials, and schedule onboarding call.'),\n('Lost', 'Lead was not converted - no longer pursuing', TRUE, 7, '#EF4444', 'x-circle', 'Document the reason for loss and add to nurture campaign for future opportunities.'),\n('Hibernated', 'Lead is temporarily inactive but may be revisited', FALSE, 8, '#6B7280', 'pause', 'Set reminder to follow up in 3-6 months. Keep in nurture campaign.')","-- =============================================================================\n-- INSURANCE TYPES SEED DATA\n-- =============================================================================\n\nINSERT INTO public.insurance_types (name, is_personal, is_commercial, description, icon_name, form_schema, ai_prompt_template) VALUES\n('Auto', TRUE, FALSE, 'Personal automobile insurance coverage', 'truck', \n'{\\"required_fields\\": [\\"vehicles\\", \\"drivers\\", \\"coverage_preferences\\"], \\"optional_fields\\": [\\"current_carrier\\", \\"policy_expiry\\"]}',\n'Focus on vehicle safety features, driving history, and coverage needs. Ask about current coverage gaps and desired protection levels.'),\n\n('Home', TRUE, FALSE, 'Homeowners and dwelling insurance', 'home', \n'{\\"required_fields\\": [\\"property_details\\", \\"coverage_amount\\", \\"deductible_preference\\"], \\"optional_fields\\": [\\"mortgage_info\\", \\"home_security\\"]}',\n'Assess property value, replacement cost, and liability needs. Consider location-specific risks like floods or earthquakes.'),\n\n('Renters', TRUE, FALSE, 'Renters insurance for personal property and liability', 'building-office', \n'{\\"required_fields\\": [\\"personal_property_value\\", \\"liability_coverage\\"], \\"optional_fields\\": [\\"additional_living_expenses\\"]}',\n'Focus on personal property protection and liability coverage. Explain the importance of coverage for temporary living expenses.'),\n\n('Specialty', TRUE, FALSE, 'High-value items and specialty coverage', 'sparkles', \n'{\\"required_fields\\": [\\"item_details\\", \\"appraisal_values\\"], \\"optional_fields\\": [\\"storage_location\\", \\"security_measures\\"]}',\n'Identify valuable items requiring special coverage. Discuss appraisal requirements and coverage options for collectibles, jewelry, art.'),\n\n('Commercial Auto', FALSE, TRUE, 'Business vehicle insurance coverage', 'truck', \n'{\\"required_fields\\": [\\"fleet_details\\", \\"business_use\\", \\"driver_info\\"], \\"optional_fields\\": [\\"cargo_coverage\\", \\"hired_auto\\"]}',\n'Assess business vehicle needs, driver qualifications, and commercial use patterns. Consider cargo and hired auto coverage.'),\n\n('General Liability', FALSE, TRUE, 'Business general liability insurance', 'shield-check', \n'{\\"required_fields\\": [\\"business_type\\", \\"revenue\\", \\"employee_count\\"], \\"optional_fields\\": [\\"professional_services\\", \\"product_liability\\"]}',\n'Evaluate business operations, liability exposures, and industry-specific risks. Consider professional liability needs.'),\n\n('Commercial Property', FALSE, TRUE, 'Business property and equipment coverage', 'building-office-2', \n'{\\"required_fields\\": [\\"property_value\\", \\"business_personal_property\\", \\"location_details\\"], \\"optional_fields\\": [\\"business_interruption\\", \\"equipment_breakdown\\"]}',\n'Assess property values, business interruption needs, and equipment coverage requirements. Consider location-specific risks.'),\n\n('Workers Compensation', FALSE, TRUE, 'Workers compensation insurance for employees', 'user-group', \n'{\\"required_fields\\": [\\"employee_count\\", \\"job_classifications\\", \\"payroll\\"], \\"optional_fields\\": [\\"safety_programs\\", \\"claims_history\\"]}',\n'Review employee classifications, payroll information, and safety programs. Assess experience modification factors.')","-- =============================================================================\n-- PIPELINES SEED DATA\n-- =============================================================================\n\nINSERT INTO public.pipelines (name, description, is_default, display_order, lead_type, insurance_types, conversion_goals, target_conversion_rate) VALUES\n('Personal Insurance Pipeline', 'Standard pipeline for individual insurance prospects', TRUE, 1, 'Personal', \nARRAY[1, 2, 3, 4], -- Auto, Home, Renters, Specialty\n'{\\"primary_goal\\": \\"policy_sale\\", \\"secondary_goals\\": [\\"cross_sell\\", \\"referral\\"]}', 25.0),\n\n('Commercial Insurance Pipeline', 'Pipeline for business insurance prospects', FALSE, 2, 'Business', \nARRAY[5, 6, 7, 8], -- Commercial Auto, General Liability, Commercial Property, Workers Comp\n'{\\"primary_goal\\": \\"policy_sale\\", \\"secondary_goals\\": [\\"multi_line\\", \\"renewal\\"]}', 20.0),\n\n('High-Value Personal Pipeline', 'Specialized pipeline for high-net-worth individuals', FALSE, 3, 'Personal', \nARRAY[2, 4], -- Home, Specialty\n'{\\"primary_goal\\": \\"comprehensive_coverage\\", \\"secondary_goals\\": [\\"umbrella_policy\\", \\"trust_services\\"]}', 35.0)","-- =============================================================================\n-- PIPELINE STATUSES SEED DATA\n-- =============================================================================\n\n-- Personal Insurance Pipeline Statuses\nINSERT INTO public.pipeline_statuses (pipeline_id, name, description, is_final, display_order, color_hex, icon_name, stage_type, target_duration, ai_action_template, conversion_probability) VALUES\n((SELECT id FROM public.pipelines WHERE name = 'Personal Insurance Pipeline'), 'New Lead', 'Fresh prospect in the system', FALSE, 1, '#3B82F6', 'user-plus', 'active', 1, 'Contact within 24 hours to introduce services and schedule needs assessment.', 15.0),\n((SELECT id FROM public.pipelines WHERE name = 'Personal Insurance Pipeline'), 'Initial Contact', 'First contact made, gathering information', FALSE, 2, '#F59E0B', 'phone', 'active', 2, 'Complete needs assessment and gather detailed information about current coverage.', 25.0),\n((SELECT id FROM public.pipelines WHERE name = 'Personal Insurance Pipeline'), 'Needs Assessment', 'Understanding coverage requirements', FALSE, 3, '#8B5CF6', 'clipboard-document-list', 'active', 3, 'Analyze coverage gaps and prepare customized quote recommendations.', 40.0),\n((SELECT id FROM public.pipelines WHERE name = 'Personal Insurance Pipeline'), 'Quote Preparation', 'Preparing customized quote', FALSE, 4, '#06B6D4', 'document-text', 'active', 2, 'Present quote options and explain coverage benefits and value proposition.', 60.0),\n((SELECT id FROM public.pipelines WHERE name = 'Personal Insurance Pipeline'), 'Quote Presented', 'Quote delivered to prospect', FALSE, 5, '#10B981', 'presentation-chart-line', 'waiting', 7, 'Follow up to address questions and guide toward decision.', 75.0),\n((SELECT id FROM public.pipelines WHERE name = 'Personal Insurance Pipeline'), 'Policy Sold', 'Successfully converted to client', TRUE, 6, '#059669', 'check-badge', 'final', 0, 'Process policy and begin onboarding. Look for cross-sell opportunities.', 100.0),\n((SELECT id FROM public.pipelines WHERE name = 'Personal Insurance Pipeline'), 'Lost', 'Prospect decided not to proceed', TRUE, 7, '#EF4444', 'x-circle', 'final', 0, 'Document loss reason and add to nurture campaign for future opportunities.', 0.0)","-- Commercial Insurance Pipeline Statuses\nINSERT INTO public.pipeline_statuses (pipeline_id, name, description, is_final, display_order, color_hex, icon_name, stage_type, target_duration, ai_action_template, conversion_probability) VALUES\n((SELECT id FROM public.pipelines WHERE name = 'Commercial Insurance Pipeline'), 'Business Inquiry', 'Initial business insurance inquiry', FALSE, 1, '#3B82F6', 'building-office', 'active', 2, 'Schedule business review meeting to understand operations and risk exposures.', 10.0),\n((SELECT id FROM public.pipelines WHERE name = 'Commercial Insurance Pipeline'), 'Risk Assessment', 'Evaluating business risks and exposures', FALSE, 2, '#F59E0B', 'shield-exclamation', 'active', 5, 'Complete comprehensive risk assessment and identify coverage needs.', 20.0),\n((SELECT id FROM public.pipelines WHERE name = 'Commercial Insurance Pipeline'), 'Proposal Development', 'Creating comprehensive insurance proposal', FALSE, 3, '#8B5CF6', 'document-duplicate', 'active', 7, 'Develop multi-line proposal with competitive pricing and comprehensive coverage.', 35.0),\n((SELECT id FROM public.pipelines WHERE name = 'Commercial Insurance Pipeline'), 'Proposal Presented', 'Formal proposal delivered', FALSE, 4, '#06B6D4', 'presentation-chart-bar', 'waiting', 14, 'Schedule follow-up meeting to review proposal and address any concerns.', 50.0),\n((SELECT id FROM public.pipelines WHERE name = 'Commercial Insurance Pipeline'), 'Negotiation', 'Discussing terms and adjustments', FALSE, 5, '#F97316', 'chat-bubble-left-right', 'active', 10, 'Work with prospect to refine coverage and terms to meet their needs and budget.', 70.0),\n((SELECT id FROM public.pipelines WHERE name = 'Commercial Insurance Pipeline'), 'Policy Bound', 'Commercial policy successfully bound', TRUE, 6, '#059669', 'check-badge', 'final', 0, 'Complete policy setup and schedule risk management consultation.', 100.0),\n((SELECT id FROM public.pipelines WHERE name = 'Commercial Insurance Pipeline'), 'Lost', 'Business decided not to proceed', TRUE, 7, '#EF4444', 'x-circle', 'final', 0, 'Document loss reason and maintain relationship for future opportunities.', 0.0)","-- High-Value Personal Pipeline Statuses\nINSERT INTO public.pipeline_statuses (pipeline_id, name, description, is_final, display_order, color_hex, icon_name, stage_type, target_duration, ai_action_template, conversion_probability) VALUES\n((SELECT id FROM public.pipelines WHERE name = 'High-Value Personal Pipeline'), 'Referral Received', 'High-value prospect referral', FALSE, 1, '#3B82F6', 'user-group', 'active', 1, 'Contact within 24 hours. Acknowledge referral source and schedule private consultation.', 20.0),\n((SELECT id FROM public.pipelines WHERE name = 'High-Value Personal Pipeline'), 'Private Consultation', 'Detailed wealth protection review', FALSE, 2, '#F59E0B', 'academic-cap', 'active', 7, 'Conduct comprehensive wealth and asset review. Identify protection gaps.', 35.0),\n((SELECT id FROM public.pipelines WHERE name = 'High-Value Personal Pipeline'), 'Asset Appraisal', 'Valuing high-value assets', FALSE, 3, '#8B5CF6', 'currency-dollar', 'active', 14, 'Coordinate professional appraisals and document asset values for coverage.', 50.0),\n((SELECT id FROM public.pipelines WHERE name = 'High-Value Personal Pipeline'), 'Custom Proposal', 'Tailored high-value coverage proposal', FALSE, 4, '#06B6D4', 'document-chart-bar', 'active', 10, 'Present comprehensive protection strategy with specialized coverage options.', 65.0),\n((SELECT id FROM public.pipelines WHERE name = 'High-Value Personal Pipeline'), 'Coverage Bound', 'High-value policy successfully bound', TRUE, 5, '#059669', 'shield-check', 'final', 0, 'Implement coverage and establish ongoing wealth protection relationship.', 100.0),\n((SELECT id FROM public.pipelines WHERE name = 'High-Value Personal Pipeline'), 'Lost', 'Prospect decided not to proceed', TRUE, 6, '#EF4444', 'x-circle', 'final', 0, 'Maintain relationship and continue to provide value through market insights.', 0.0)","-- =============================================================================\n-- AI AGENTS SEED DATA\n-- =============================================================================\n\nINSERT INTO public.ai_agents (name, description, role, agent_type, model_provider, model_name, temperature, capabilities, system_prompt, config) VALUES\n('Lead Follow-up Assistant', 'Automated follow-up agent for lead nurturing and engagement', 'follow_up', 'assistant', 'deepinfra', 'deepseek-ai/DeepSeek-V3-0324', 0.7,\n'{\\"email_generation\\": true, \\"sms_generation\\": true, \\"call_script_generation\\": true, \\"scheduling\\": true}',\n'You are a professional insurance follow-up assistant. Your role is to help agents maintain consistent communication with leads through personalized, timely follow-ups. Always maintain a professional, helpful tone while being persistent but not pushy.',\n'{\\"max_follow_ups\\": 5, \\"follow_up_intervals\\": [1, 3, 7, 14, 30], \\"personalization_level\\": \\"high\\"}'),\n\n('Lead Insight Analyzer', 'AI agent that analyzes lead data to provide insights and recommendations', 'insight', 'analyzer', 'deepinfra', 'deepseek-ai/DeepSeek-V3-0324', 0.3,\n'{\\"data_analysis\\": true, \\"pattern_recognition\\": true, \\"risk_assessment\\": true, \\"recommendation_generation\\": true}',\n'You are an insurance data analyst AI. Analyze lead information, communication history, and behavioral patterns to provide actionable insights for agents. Focus on conversion probability, risk factors, and optimization opportunities.',\n'{\\"analysis_depth\\": \\"comprehensive\\", \\"confidence_threshold\\": 0.8, \\"update_frequency\\": \\"daily\\"}'),\n\n('Quote Recommendation Engine', 'AI agent specialized in generating personalized insurance quote recommendations', 'sales', 'generator', 'deepinfra', 'deepseek-ai/DeepSeek-V3-0324', 0.5,\n'{\\"quote_generation\\": true, \\"coverage_optimization\\": true, \\"competitive_analysis\\": true, \\"pricing_strategy\\": true}',\n'You are an insurance quote specialist AI. Generate personalized quote recommendations based on customer needs, risk profile, and market conditions. Always prioritize appropriate coverage while considering budget constraints.',\n'{\\"quote_accuracy\\": \\"high\\", \\"coverage_optimization\\": true, \\"competitive_pricing\\": true}'),\n\n('Customer Support Assistant', 'AI agent for handling customer inquiries and support requests', 'support', 'assistant', 'deepinfra', 'deepseek-ai/DeepSeek-V3-0324', 0.6,\n'{\\"inquiry_handling\\": true, \\"policy_information\\": true, \\"claims_guidance\\": true, \\"escalation_management\\": true}',\n'You are a helpful insurance customer support assistant. Provide accurate information about policies, coverage, and procedures. Always be empathetic and solution-focused when helping customers with their insurance needs.',\n'{\\"response_time\\": \\"immediate\\", \\"escalation_threshold\\": \\"complex_issues\\", \\"knowledge_base\\": \\"comprehensive\\"}'),\n\n('Marketing Campaign Optimizer', 'AI agent for optimizing marketing campaigns and content performance', 'marketing', 'analyzer', 'deepinfra', 'deepseek-ai/DeepSeek-V3-0324', 0.4,\n'{\\"campaign_analysis\\": true, \\"content_optimization\\": true, \\"audience_segmentation\\": true, \\"performance_tracking\\": true}',\n'You are a marketing optimization AI for insurance campaigns. Analyze campaign performance, optimize content for better engagement, and provide recommendations for improving conversion rates and ROI.',\n'{\\"optimization_focus\\": \\"conversion_rate\\", \\"testing_framework\\": \\"ab_testing\\", \\"reporting_frequency\\": \\"weekly\\"}')","-- =============================================================================\n-- CONTENT TEMPLATES SEED DATA\n-- =============================================================================\n\nINSERT INTO public.content_templates (name, description, template_type, category, subject, content, variables, personalization_fields) VALUES\n('Welcome Email - New Lead', 'Initial welcome email for new insurance leads', 'Email', 'Lead Nurturing', \n'Welcome to {{company_name}} - Your Insurance Protection Starts Here',\n'Dear {{first_name}},\n\nThank you for your interest in insurance coverage with {{company_name}}. We''re excited to help you find the perfect protection for your needs.\n\nAs your dedicated insurance advisor, I''m here to:\n• Understand your unique coverage needs\n• Provide personalized quote options\n• Explain coverage benefits in simple terms\n• Answer any questions you may have\n\nI''ll be reaching out within 24 hours to schedule a brief consultation. In the meantime, feel free to reply to this email or call me directly at {{agent_phone}}.\n\nLooking forward to protecting what matters most to you!\n\nBest regards,\n{{agent_name}}\n{{company_name}}\n{{agent_email}} | {{agent_phone}}',\n'{\\"first_name\\": \\"Lead first name\\", \\"company_name\\": \\"Insurance company name\\", \\"agent_name\\": \\"Agent full name\\", \\"agent_phone\\": \\"Agent phone number\\", \\"agent_email\\": \\"Agent email\\"}',\nARRAY['first_name', 'company_name', 'agent_name']),\n\n('Quote Follow-up SMS', 'SMS template for following up on delivered quotes', 'SMS', 'Quote Follow-up',\nNULL,\n'Hi {{first_name}}! This is {{agent_name}} from {{company_name}}. I wanted to follow up on the insurance quote I sent you. Do you have any questions? Reply STOP to opt out.',\n'{\\"first_name\\": \\"Lead first name\\", \\"agent_name\\": \\"Agent first name\\", \\"company_name\\": \\"Company name\\"}',\nARRAY['first_name', 'agent_name']),\n\n('Initial Contact Call Script', 'Script for making initial contact with new leads', 'Call Script', 'Lead Contact',\nNULL,\n'Hi {{first_name}}, this is {{agent_name}} from {{company_name}}. Thank you for your interest in insurance coverage.\n\nI have about 5 minutes to learn about your current insurance situation and see how we might be able to help you save money or improve your coverage.\n\nIs now a good time to chat, or would you prefer I call back at a more convenient time?\n\n[If yes, continue with needs assessment questions]\n[If no, schedule callback]\n\nKey questions to ask:\n1. What type of insurance are you looking for?\n2. Do you currently have coverage?\n3. When does your current policy expire?\n4. What''s most important to you - price, coverage, or service?\n5. Have you had any claims in the past 3 years?',\n'{\\"first_name\\": \\"Lead first name\\", \\"agent_name\\": \\"Agent full name\\", \\"company_name\\": \\"Company name\\"}',\nARRAY['first_name', 'agent_name'])","-- =============================================================================\n-- CAMPAIGNS SEED DATA\n-- =============================================================================\n\nINSERT INTO public.campaigns (name, description, campaign_type, status, start_date, end_date, budget, target_audience, goals) VALUES\n('New Lead Welcome Series', 'Automated email series for new insurance leads', 'Email', 'Active', \nNOW(), NOW() + INTERVAL '1 year', 5000.00,\n'{\\"lead_status\\": [\\"New\\", \\"Contacted\\"], \\"insurance_types\\": [\\"Auto\\", \\"Home\\"], \\"demographics\\": \\"all\\"}',\n'{\\"primary\\": \\"engagement\\", \\"secondary\\": \\"conversion\\", \\"kpis\\": [\\"open_rate\\", \\"click_rate\\", \\"response_rate\\"]}'),\n\n('Quote Follow-up Campaign', 'Multi-channel follow-up for delivered quotes', 'Email', 'Active',\nNOW(), NOW() + INTERVAL '6 months', 3000.00,\n'{\\"lead_status\\": [\\"Quoted\\"], \\"days_since_quote\\": [3, 7, 14]}',\n'{\\"primary\\": \\"conversion\\", \\"secondary\\": \\"objection_handling\\", \\"kpis\\": [\\"conversion_rate\\", \\"response_rate\\"]}'),\n\n('Referral Incentive Program', 'Campaign to encourage client referrals', 'Email', 'Draft',\nNOW() + INTERVAL '1 month', NOW() + INTERVAL '1 year', 10000.00,\n'{\\"client_status\\": \\"Active\\", \\"policy_age\\": \\">6 months\\", \\"satisfaction_score\\": \\">8\\"}',\n'{\\"primary\\": \\"referrals\\", \\"secondary\\": \\"retention\\", \\"kpis\\": [\\"referral_count\\", \\"referral_conversion\\"]}')","-- =============================================================================\n-- SCHEMA VERSION TRACKING\n-- =============================================================================\n\n-- Create schema_versions table if it doesn't exist\nCREATE TABLE IF NOT EXISTS public.schema_versions (\n  id SERIAL PRIMARY KEY,\n  version TEXT NOT NULL UNIQUE,\n  description TEXT,\n  applied_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n)","INSERT INTO public.schema_versions (version, description) VALUES\n('1.0.0', 'Initial insurance CRM schema with comprehensive seed data - Production ready')\nON CONFLICT (version) DO NOTHING","-- =============================================================================\n-- COMMENTS\n-- =============================================================================\n\nCOMMENT ON TABLE public.lead_statuses IS 'Seeded with standard insurance sales process statuses'","COMMENT ON TABLE public.insurance_types IS 'Seeded with common personal and commercial insurance types'","COMMENT ON TABLE public.pipelines IS 'Seeded with standard insurance sales pipelines'","COMMENT ON TABLE public.pipeline_statuses IS 'Seeded with pipeline-specific status progressions'","COMMENT ON TABLE public.ai_agents IS 'Seeded with specialized AI agents for insurance operations'"}	seed_data
20250112000013	{"-- =============================================================================\n-- MIGRATION: Production Configuration\n-- =============================================================================\n-- Description: Configure CORS, rate limiting, and monitoring for production deployment\n-- Version: 1.0.0\n-- Created: 2025-01-12\n\n-- =============================================================================\n-- ENABLE pg_stat_statements FOR MONITORING\n-- =============================================================================\n\n-- Enable pg_stat_statements extension for query performance monitoring\nCREATE EXTENSION IF NOT EXISTS pg_stat_statements","-- Create a function to get top slow queries (for admins only)\nCREATE OR REPLACE FUNCTION public.get_slow_queries(limit_count INTEGER DEFAULT 10)\nRETURNS TABLE(\n  query TEXT,\n  calls BIGINT,\n  total_time DOUBLE PRECISION,\n  mean_time DOUBLE PRECISION,\n  rows BIGINT\n) AS $$\nBEGIN\n  -- Only allow admins to view query statistics\n  IF NOT EXISTS (\n    SELECT 1 FROM public.users \n    WHERE id = auth.uid() AND role = 'admin'\n  ) THEN\n    RAISE EXCEPTION 'Access denied. Admin role required.';\n  END IF;\n\n  RETURN QUERY\n  SELECT \n    pss.query,\n    pss.calls,\n    pss.total_exec_time as total_time,\n    pss.mean_exec_time as mean_time,\n    pss.rows\n  FROM pg_stat_statements pss\n  ORDER BY pss.mean_exec_time DESC\n  LIMIT limit_count;\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER","-- Function to get database connection statistics\nCREATE OR REPLACE FUNCTION public.get_db_stats()\nRETURNS JSONB AS $$\nDECLARE\n  stats JSONB;\nBEGIN\n  -- Only allow admins to view database statistics\n  IF NOT EXISTS (\n    SELECT 1 FROM public.users \n    WHERE id = auth.uid() AND role = 'admin'\n  ) THEN\n    RAISE EXCEPTION 'Access denied. Admin role required.';\n  END IF;\n\n  SELECT jsonb_build_object(\n    'active_connections', (\n      SELECT count(*) \n      FROM pg_stat_activity \n      WHERE state = 'active'\n    ),\n    'total_connections', (\n      SELECT count(*) \n      FROM pg_stat_activity\n    ),\n    'database_size', (\n      SELECT pg_size_pretty(pg_database_size(current_database()))\n    ),\n    'cache_hit_ratio', (\n      SELECT round(\n        (sum(blks_hit) * 100.0 / sum(blks_hit + blks_read))::numeric, 2\n      )\n      FROM pg_stat_database\n      WHERE datname = current_database()\n    )\n  ) INTO stats;\n\n  RETURN stats;\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER","-- =============================================================================\n-- RATE LIMITING SETUP\n-- =============================================================================\n\n-- Create a table to track API rate limits\nCREATE TABLE IF NOT EXISTS public.api_rate_limits (\n  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n  user_id UUID REFERENCES public.users(id),\n  ip_address INET,\n  endpoint TEXT NOT NULL,\n  request_count INTEGER DEFAULT 1,\n  window_start TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n)","-- Create indexes for rate limiting queries\nCREATE INDEX IF NOT EXISTS idx_api_rate_limits_user_endpoint ON public.api_rate_limits(user_id, endpoint, window_start)","CREATE INDEX IF NOT EXISTS idx_api_rate_limits_ip_endpoint ON public.api_rate_limits(ip_address, endpoint, window_start)","CREATE INDEX IF NOT EXISTS idx_api_rate_limits_window_start ON public.api_rate_limits(window_start)","-- Enable RLS on rate limits table\nALTER TABLE public.api_rate_limits ENABLE ROW LEVEL SECURITY","-- RLS policy: Users can only see their own rate limit records\nCREATE POLICY \\"Users can view own rate limits\\" ON public.api_rate_limits\n  FOR SELECT USING (user_id = auth.uid())","-- RLS policy: System can insert rate limit records\nCREATE POLICY \\"System can insert rate limits\\" ON public.api_rate_limits\n  FOR INSERT WITH CHECK (true)","-- RLS policy: System can update rate limit records\nCREATE POLICY \\"System can update rate limits\\" ON public.api_rate_limits\n  FOR UPDATE USING (true)","-- Function to check and update rate limits\nCREATE OR REPLACE FUNCTION public.check_rate_limit(\n  endpoint_param TEXT,\n  ip_address_param INET DEFAULT NULL,\n  max_requests INTEGER DEFAULT 100,\n  window_minutes INTEGER DEFAULT 60\n)\nRETURNS JSONB AS $$\nDECLARE\n  current_user_id UUID := auth.uid();\n  window_start_time TIMESTAMP WITH TIME ZONE;\n  current_count INTEGER;\n  rate_limit_record RECORD;\n  result JSONB;\nBEGIN\n  -- Calculate window start time (round to nearest window)\n  window_start_time := date_trunc('hour', NOW()) + \n    (EXTRACT(MINUTE FROM NOW())::INTEGER / window_minutes) * \n    (window_minutes || ' minutes')::INTERVAL;\n\n  -- Check existing rate limit record\n  SELECT * INTO rate_limit_record\n  FROM public.api_rate_limits\n  WHERE (\n    (current_user_id IS NOT NULL AND user_id = current_user_id) OR\n    (current_user_id IS NULL AND ip_address = ip_address_param)\n  )\n  AND endpoint = endpoint_param\n  AND window_start = window_start_time;\n\n  IF rate_limit_record IS NOT NULL THEN\n    current_count := rate_limit_record.request_count + 1;\n    \n    -- Update existing record\n    UPDATE public.api_rate_limits\n    SET request_count = current_count, updated_at = NOW()\n    WHERE id = rate_limit_record.id;\n  ELSE\n    current_count := 1;\n    \n    -- Insert new record\n    INSERT INTO public.api_rate_limits (\n      user_id, ip_address, endpoint, request_count, window_start\n    ) VALUES (\n      current_user_id, ip_address_param, endpoint_param, current_count, window_start_time\n    );\n  END IF;\n\n  -- Build result\n  result := jsonb_build_object(\n    'allowed', current_count <= max_requests,\n    'current_count', current_count,\n    'max_requests', max_requests,\n    'window_start', window_start_time,\n    'reset_time', window_start_time + (window_minutes || ' minutes')::INTERVAL,\n    'remaining', GREATEST(0, max_requests - current_count)\n  );\n\n  RETURN result;\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER","-- Function to clean up old rate limit records\nCREATE OR REPLACE FUNCTION public.cleanup_rate_limits()\nRETURNS INTEGER AS $$\nDECLARE\n  deleted_count INTEGER;\nBEGIN\n  -- Delete rate limit records older than 24 hours\n  DELETE FROM public.api_rate_limits\n  WHERE window_start < NOW() - INTERVAL '24 hours';\n  \n  GET DIAGNOSTICS deleted_count = ROW_COUNT;\n  RETURN deleted_count;\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER","-- =============================================================================\n-- CORS CONFIGURATION HELPERS\n-- =============================================================================\n\n-- Function to validate CORS origins (for admin configuration)\nCREATE OR REPLACE FUNCTION public.validate_cors_origin(origin_url TEXT)\nRETURNS BOOLEAN AS $$\nBEGIN\n  -- Basic URL validation\n  IF origin_url IS NULL OR origin_url = '' THEN\n    RETURN FALSE;\n  END IF;\n  \n  -- Check if it's a valid URL format\n  IF origin_url !~ '^https?://[a-zA-Z0-9.-]+' THEN\n    RETURN FALSE;\n  END IF;\n  \n  RETURN TRUE;\nEND;\n$$ LANGUAGE plpgsql IMMUTABLE","-- =============================================================================\n-- GRANTS\n-- =============================================================================\n\nGRANT SELECT, INSERT, UPDATE ON public.api_rate_limits TO authenticated","GRANT EXECUTE ON FUNCTION public.check_rate_limit(TEXT, INET, INTEGER, INTEGER) TO authenticated","GRANT EXECUTE ON FUNCTION public.get_slow_queries(INTEGER) TO authenticated","GRANT EXECUTE ON FUNCTION public.get_db_stats() TO authenticated","GRANT EXECUTE ON FUNCTION public.cleanup_rate_limits() TO authenticated","GRANT EXECUTE ON FUNCTION public.validate_cors_origin(TEXT) TO authenticated","-- =============================================================================\n-- COMMENTS\n-- =============================================================================\n\nCOMMENT ON EXTENSION pg_stat_statements IS 'Query performance monitoring extension'","COMMENT ON TABLE public.api_rate_limits IS 'API rate limiting tracking table'","COMMENT ON FUNCTION public.check_rate_limit(TEXT, INET, INTEGER, INTEGER) IS 'Check and enforce API rate limits per user/IP and endpoint'","COMMENT ON FUNCTION public.get_slow_queries(INTEGER) IS 'Get slowest database queries for performance monitoring (admin only)'","COMMENT ON FUNCTION public.get_db_stats() IS 'Get database performance statistics (admin only)'","COMMENT ON FUNCTION public.cleanup_rate_limits() IS 'Clean up old rate limit records (call periodically)'","COMMENT ON FUNCTION public.validate_cors_origin(TEXT) IS 'Validate CORS origin URL format'"}	configure_production_settings
20250112000017	{"-- =============================================================================\n-- AUTHENTICATION ENHANCEMENTS FOR EXISTING SCHEMA\n-- =============================================================================\n-- This migration adds authentication enhancements to the existing database\n-- without modifying existing tables.\n\n-- Enable UUID extension if not already enabled\nCREATE EXTENSION IF NOT EXISTS \\"uuid-ossp\\"","-- =============================================================================\n-- PERMISSIONS SYSTEM\n-- =============================================================================\n\n-- Define standard permissions for insurance CRM\nCREATE TABLE IF NOT EXISTS public.permissions (\n  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n  name TEXT UNIQUE NOT NULL,\n  description TEXT,\n  category TEXT NOT NULL, -- 'leads', 'clients', 'quotes', 'admin', etc.\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n)","-- Insert standard permissions\nINSERT INTO public.permissions (name, description, category) VALUES\n-- Lead management\n('leads.view', 'View leads', 'leads'),\n('leads.create', 'Create new leads', 'leads'),\n('leads.edit', 'Edit lead information', 'leads'),\n('leads.delete', 'Delete leads', 'leads'),\n('leads.assign', 'Assign leads to agents', 'leads'),\n('leads.view_all', 'View all organization leads', 'leads'),\n\n-- Client management\n('clients.view', 'View clients', 'clients'),\n('clients.create', 'Create new clients', 'clients'),\n('clients.edit', 'Edit client information', 'clients'),\n('clients.delete', 'Delete clients', 'clients'),\n('clients.view_all', 'View all organization clients', 'clients'),\n\n-- Quote management\n('quotes.view', 'View quotes', 'quotes'),\n('quotes.create', 'Create new quotes', 'quotes'),\n('quotes.edit', 'Edit quotes', 'quotes'),\n('quotes.delete', 'Delete quotes', 'quotes'),\n('quotes.approve', 'Approve quotes', 'quotes'),\n\n-- Communication\n('communications.view', 'View communications', 'communications'),\n('communications.create', 'Create communications', 'communications'),\n('communications.edit', 'Edit communications', 'communications'),\n('communications.delete', 'Delete communications', 'communications'),\n\n-- Reporting\n('reports.view', 'View reports', 'reports'),\n('reports.create', 'Create custom reports', 'reports'),\n('reports.export', 'Export report data', 'reports'),\n\n-- User management\n('users.view', 'View organization users', 'users'),\n('users.invite', 'Invite new users', 'users'),\n('users.edit', 'Edit user information', 'users'),\n('users.deactivate', 'Deactivate users', 'users'),\n('users.manage_roles', 'Manage user roles', 'users'),\n\n-- Organization management\n('organization.view', 'View organization settings', 'organization'),\n('organization.edit', 'Edit organization settings', 'organization'),\n('organization.billing', 'Manage billing and subscriptions', 'organization'),\n('organization.integrations', 'Manage integrations', 'organization'),\n\n-- System administration\n('system.admin', 'Full system administration', 'system'),\n('system.audit', 'View audit logs', 'system'),\n('system.backup', 'Manage backups', 'system')\nON CONFLICT (name) DO NOTHING","-- =============================================================================\n-- ORGANIZATION ROLES (if organizations table exists)\n-- =============================================================================\n\n-- Create organization roles table (only if organizations exists)\nDO $$\nBEGIN\n  IF EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'organizations') THEN\n    CREATE TABLE IF NOT EXISTS public.organization_roles (\n      id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n      organization_id UUID NOT NULL REFERENCES public.organizations(id) ON DELETE CASCADE,\n      name TEXT NOT NULL,\n      description TEXT,\n      permissions JSONB NOT NULL DEFAULT '{}',\n      is_system_role BOOLEAN DEFAULT FALSE,\n      created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n      updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n      \n      UNIQUE(organization_id, name)\n    );\n  END IF;\nEND $$","-- =============================================================================\n-- USER ORGANIZATION MEMBERSHIPS (if organizations table exists)\n-- =============================================================================\n\n-- Create user organization memberships table\nDO $$\nBEGIN\n  IF EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'organizations') THEN\n    CREATE TABLE IF NOT EXISTS public.user_organization_memberships (\n      id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n      user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,\n      organization_id UUID NOT NULL REFERENCES public.organizations(id) ON DELETE CASCADE,\n      role_id UUID REFERENCES public.organization_roles(id) ON DELETE SET NULL,\n      \n      -- Direct role assignment (fallback if role_id is null)\n      role TEXT DEFAULT 'user' CHECK (role IN ('user', 'agent', 'manager', 'admin', 'owner')),\n      \n      -- Membership status\n      status TEXT DEFAULT 'active' CHECK (status IN ('active', 'inactive', 'pending', 'suspended')),\n      \n      -- Invitation details\n      invited_by UUID REFERENCES auth.users(id),\n      invited_at TIMESTAMP WITH TIME ZONE,\n      joined_at TIMESTAMP WITH TIME ZONE,\n      \n      -- Timestamps\n      created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n      updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n      \n      UNIQUE(user_id, organization_id)\n    );\n  END IF;\nEND $$","-- =============================================================================\n-- AUDIT LOGGING SYSTEM\n-- =============================================================================\n\n-- Create audit log table\nCREATE TABLE IF NOT EXISTS public.audit_logs (\n  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n  \n  -- Event details\n  event_type TEXT NOT NULL, -- 'login', 'logout', 'create', 'update', 'delete', 'permission_change'\n  table_name TEXT,\n  record_id UUID,\n  \n  -- User context\n  user_id UUID REFERENCES auth.users(id),\n  \n  -- Event data\n  old_values JSONB,\n  new_values JSONB,\n  changes JSONB,\n  \n  -- Request context\n  ip_address INET,\n  user_agent TEXT,\n  request_id TEXT,\n  \n  -- Metadata\n  metadata JSONB DEFAULT '{}',\n  \n  -- Timestamp\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n)","-- =============================================================================\n-- PASSWORD SECURITY\n-- =============================================================================\n\n-- Create password history table to prevent reuse\nCREATE TABLE IF NOT EXISTS public.password_history (\n  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,\n  password_hash TEXT NOT NULL,\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n)","-- =============================================================================\n-- SESSION MANAGEMENT\n-- =============================================================================\n\n-- Create active sessions table for tracking\nCREATE TABLE IF NOT EXISTS public.user_sessions (\n  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,\n  session_token TEXT NOT NULL UNIQUE,\n  \n  -- Session details\n  ip_address INET,\n  user_agent TEXT,\n  device_info JSONB,\n  \n  -- Location (optional)\n  country TEXT,\n  city TEXT,\n  \n  -- Session status\n  is_active BOOLEAN DEFAULT TRUE,\n  last_activity TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  \n  -- Timestamps\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  expires_at TIMESTAMP WITH TIME ZONE DEFAULT (NOW() + INTERVAL '24 hours')\n)","-- =============================================================================\n-- USER INVITATIONS\n-- =============================================================================\n\n-- Create user invitations table\nCREATE TABLE IF NOT EXISTS public.user_invitations (\n  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n  \n  -- User details\n  email TEXT NOT NULL,\n  \n  -- Role assignment\n  role TEXT NOT NULL DEFAULT 'user' CHECK (role IN ('user', 'agent', 'manager', 'admin', 'owner')),\n  \n  -- Invitation details\n  invited_by UUID NOT NULL REFERENCES auth.users(id),\n  invitation_token TEXT UNIQUE NOT NULL,\n  custom_message TEXT,\n  \n  -- Status and timing\n  status TEXT DEFAULT 'pending' CHECK (status IN ('pending', 'accepted', 'expired', 'cancelled')),\n  invited_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  expires_at TIMESTAMP WITH TIME ZONE NOT NULL,\n  \n  -- Acceptance details\n  accepted_at TIMESTAMP WITH TIME ZONE,\n  accepted_by UUID REFERENCES auth.users(id),\n  \n  -- Metadata\n  metadata JSONB DEFAULT '{}',\n  \n  -- Timestamps\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n)","-- =============================================================================\n-- HELPER FUNCTIONS\n-- =============================================================================\n\n-- Function to validate password strength\nCREATE OR REPLACE FUNCTION public.validate_password_strength(password TEXT)\nRETURNS JSONB AS $$\nDECLARE\n  result JSONB := '{\\"valid\\": true, \\"errors\\": []}'::jsonb;\n  errors TEXT[] := '{}';\n  score INTEGER := 0;\nBEGIN\n  -- Check minimum length\n  IF LENGTH(password) < 8 THEN\n    errors := array_append(errors, 'Password must be at least 8 characters long');\n  END IF;\n  \n  -- Check maximum length\n  IF LENGTH(password) > 128 THEN\n    errors := array_append(errors, 'Password must be no more than 128 characters long');\n  END IF;\n  \n  -- Check for uppercase letter\n  IF password !~ '[A-Z]' THEN\n    errors := array_append(errors, 'Password must contain at least one uppercase letter');\n  END IF;\n  \n  -- Check for lowercase letter\n  IF password !~ '[a-z]' THEN\n    errors := array_append(errors, 'Password must contain at least one lowercase letter');\n  END IF;\n  \n  -- Check for number\n  IF password !~ '[0-9]' THEN\n    errors := array_append(errors, 'Password must contain at least one number');\n  END IF;\n  \n  -- Check for special character\n  IF password !~ '[^A-Za-z0-9]' THEN\n    errors := array_append(errors, 'Password must contain at least one special character');\n  END IF;\n  \n  -- Check against common passwords\n  IF LOWER(password) IN (\n    'password', 'password123', '123456', '123456789', 'qwerty',\n    'abc123', 'password1', 'admin', 'letmein', 'welcome', '111111'\n  ) THEN\n    errors := array_append(errors, 'Password is too common, please choose a more secure password');\n  END IF;\n  \n  -- Build result\n  IF array_length(errors, 1) > 0 THEN\n    result := jsonb_build_object(\n      'valid', false,\n      'errors', to_jsonb(errors),\n      'score', 0\n    );\n  ELSE\n    -- Calculate password strength score (0-100)\n    score := 60; -- Base score for meeting requirements\n    \n    -- Bonus for length\n    IF LENGTH(password) >= 12 THEN\n      score := score + 10;\n    ELSIF LENGTH(password) >= 10 THEN\n      score := score + 5;\n    END IF;\n    \n    -- Bonus for character variety\n    IF password ~ '[!@#$%^&*()_+\\\\-=\\\\[\\\\]{};:\\"\\\\\\\\|,.<>\\\\?]' THEN\n      score := score + 10;\n    END IF;\n    \n    -- Bonus for mixed case and numbers\n    IF password ~ '[A-Z]' AND password ~ '[a-z]' AND password ~ '[0-9]' THEN\n      score := score + 10;\n    END IF;\n    \n    -- Bonus for no repeated characters\n    IF NOT (password ~ '(.)\\\\1{2,}') THEN\n      score := score + 10;\n    END IF;\n    \n    result := jsonb_build_object(\n      'valid', true,\n      'errors', '[]'::jsonb,\n      'score', LEAST(score, 100)\n    );\n  END IF;\n  \n  RETURN result;\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER","-- =============================================================================\n-- ROW LEVEL SECURITY\n-- =============================================================================\n\n-- Enable RLS on new tables\nALTER TABLE public.permissions ENABLE ROW LEVEL SECURITY","ALTER TABLE public.audit_logs ENABLE ROW LEVEL SECURITY","ALTER TABLE public.password_history ENABLE ROW LEVEL SECURITY","ALTER TABLE public.user_sessions ENABLE ROW LEVEL SECURITY","ALTER TABLE public.user_invitations ENABLE ROW LEVEL SECURITY","-- Basic policies for permissions (read-only for all authenticated users)\nCREATE POLICY \\"Authenticated users can view permissions\\" ON public.permissions\n  FOR SELECT USING (auth.role() = 'authenticated')","-- Basic policies for audit logs (users can view their own)\nCREATE POLICY \\"Users can view their own audit logs\\" ON public.audit_logs\n  FOR SELECT USING (user_id = auth.uid())","-- Basic policies for password history (users can view their own)\nCREATE POLICY \\"Users can view their own password history\\" ON public.password_history\n  FOR SELECT USING (user_id = auth.uid())","-- Basic policies for user sessions (users can view their own)\nCREATE POLICY \\"Users can view their own sessions\\" ON public.user_sessions\n  FOR SELECT USING (user_id = auth.uid())","CREATE POLICY \\"Users can update their own sessions\\" ON public.user_sessions\n  FOR UPDATE USING (user_id = auth.uid())","-- Basic policies for user invitations (authenticated users can view)\nCREATE POLICY \\"Authenticated users can view invitations\\" ON public.user_invitations\n  FOR SELECT USING (auth.role() = 'authenticated')","-- =============================================================================\n-- INDEXES\n-- =============================================================================\n\n-- Permissions indexes\nCREATE INDEX IF NOT EXISTS idx_permissions_category ON public.permissions(category)","-- Audit logs indexes\nCREATE INDEX IF NOT EXISTS idx_audit_logs_user_id ON public.audit_logs(user_id)","CREATE INDEX IF NOT EXISTS idx_audit_logs_event_type ON public.audit_logs(event_type)","CREATE INDEX IF NOT EXISTS idx_audit_logs_table_name ON public.audit_logs(table_name)","CREATE INDEX IF NOT EXISTS idx_audit_logs_created_at ON public.audit_logs(created_at)","-- Password history indexes\nCREATE INDEX IF NOT EXISTS idx_password_history_user_id ON public.password_history(user_id)","CREATE INDEX IF NOT EXISTS idx_password_history_created_at ON public.password_history(created_at)","-- User sessions indexes\nCREATE INDEX IF NOT EXISTS idx_user_sessions_user_id ON public.user_sessions(user_id)","CREATE INDEX IF NOT EXISTS idx_user_sessions_token ON public.user_sessions(session_token)","CREATE INDEX IF NOT EXISTS idx_user_sessions_active ON public.user_sessions(is_active)","CREATE INDEX IF NOT EXISTS idx_user_sessions_expires_at ON public.user_sessions(expires_at)","-- User invitations indexes\nCREATE INDEX IF NOT EXISTS idx_user_invitations_email ON public.user_invitations(email)","CREATE INDEX IF NOT EXISTS idx_user_invitations_token ON public.user_invitations(invitation_token)","CREATE INDEX IF NOT EXISTS idx_user_invitations_status ON public.user_invitations(status)","CREATE INDEX IF NOT EXISTS idx_user_invitations_expires_at ON public.user_invitations(expires_at)","-- =============================================================================\n-- COMMENTS\n-- =============================================================================\n\nCOMMENT ON TABLE public.permissions IS 'System-wide permission definitions'","COMMENT ON TABLE public.audit_logs IS 'Comprehensive audit logging for all system events'","COMMENT ON TABLE public.password_history IS 'Password history to prevent reuse'","COMMENT ON TABLE public.user_sessions IS 'Active user session tracking'","COMMENT ON TABLE public.user_invitations IS 'User invitations for system access'","COMMENT ON FUNCTION public.validate_password_strength IS 'Validates password meets security requirements'"}	auth_enhancements_only
\.


--
-- Data for Name: seed_files; Type: TABLE DATA; Schema: supabase_migrations; Owner: postgres
--

COPY supabase_migrations.seed_files (path, hash) FROM stdin;
\.


--
-- Data for Name: secrets; Type: TABLE DATA; Schema: vault; Owner: supabase_admin
--

COPY vault.secrets (id, name, description, secret, key_id, nonce, created_at, updated_at) FROM stdin;
\.


--
-- Name: refresh_tokens_id_seq; Type: SEQUENCE SET; Schema: auth; Owner: supabase_auth_admin
--

SELECT pg_catalog.setval('auth.refresh_tokens_id_seq', 16, true);


--
-- Name: _version_info_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public._version_info_id_seq', 1, true);


--
-- Name: insurance_types_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.insurance_types_id_seq', 24, true);


--
-- Name: lead_statuses_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.lead_statuses_id_seq', 24, true);


--
-- Name: pipeline_statuses_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.pipeline_statuses_id_seq', 47, true);


--
-- Name: pipelines_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.pipelines_id_seq', 10, true);


--
-- Name: schema_versions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.schema_versions_id_seq', 1, true);


--
-- Name: subscription_id_seq; Type: SEQUENCE SET; Schema: realtime; Owner: supabase_admin
--

SELECT pg_catalog.setval('realtime.subscription_id_seq', 1, false);


--
-- PostgreSQL database dump complete
--

