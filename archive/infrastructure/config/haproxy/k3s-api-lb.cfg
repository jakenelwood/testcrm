# üåê HAProxy Configuration for K3s API Load Balancing
# Part of the GardenOS high-availability CRM stack on Hetzner
# Load balances traffic to K3s control plane nodes

global
    log stdout local0
    chroot /var/lib/haproxy
    stats socket /run/haproxy/admin.sock mode 660 level admin
    stats timeout 30s
    user haproxy
    group haproxy
    daemon

    # Default SSL material locations
    ca-base /etc/ssl/certs
    crt-base /etc/ssl/private

    # Intermediate configuration
    ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
    ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

defaults
    mode http
    log global
    option httplog
    option dontlognull
    option log-health-checks
    option forwardfor except 127.0.0.0/8
    option redispatch
    retries 3
    timeout http-request 10s
    timeout queue 1m
    timeout connect 10s
    timeout client 1m
    timeout server 1m
    timeout http-keep-alive 10s
    timeout check 10s
    maxconn 3000

# Statistics interface
listen stats
    bind *:8404
    stats enable
    stats uri /stats
    stats refresh 30s
    stats admin if LOCALHOST

# K3s API Server Load Balancer
frontend k3s-api-frontend
    bind *:6443
    mode tcp
    option tcplog
    default_backend k3s-api-servers

backend k3s-api-servers
    mode tcp
    balance roundrobin

    # Simple TCP health check - just verify the port is open
    # K3s Control Plane Nodes
    server k3s-control-1 5.78.103.224:6443 check inter 5s rise 2 fall 3
    server k3s-control-2 5.161.110.205:6443 check inter 5s rise 2 fall 3
    server k3s-control-3 178.156.186.10:6443 check inter 5s rise 2 fall 3

# PostgreSQL Load Balancer
frontend postgres-frontend
    bind *:5432
    mode tcp
    option tcplog
    default_backend postgres-servers

backend postgres-servers
    mode tcp
    balance roundrobin

    # Simple TCP health check - just verify the port is open
    # Patroni PostgreSQL nodes (Docker containers)
    server postgres-1 127.0.0.1:5435 check inter 5s rise 2 fall 3
    server postgres-2 127.0.0.1:5433 check inter 5s rise 2 fall 3
    server postgres-3 127.0.0.1:5434 check inter 5s rise 2 fall 3

# HTTP Health Check Endpoint (for external monitoring)
frontend health-check
    bind *:8080
    mode http
    monitor-uri /health

# Optional: Ingress Controller Load Balancer
# Uncomment if you want to load balance ingress traffic
#frontend k3s-ingress-http
#    bind *:80
#    mode tcp
#    default_backend k3s-ingress-http-servers
#
#frontend k3s-ingress-https
#    bind *:443
#    mode tcp
#    default_backend k3s-ingress-https-servers
#
#backend k3s-ingress-http-servers
#    mode tcp
#    balance roundrobin
#    option tcp-check
#    
#    # Add your worker nodes with ingress controllers here
#    server k3s-worker-1 5.78.103.224:80 check inter 5s rise 2 fall 3
#    server k3s-worker-2 5.161.110.205:80 check inter 5s rise 2 fall 3
#    server k3s-worker-3 178.156.186.10:80 check inter 5s rise 2 fall 3
#
#backend k3s-ingress-https-servers
#    mode tcp
#    balance roundrobin
#    option tcp-check
#    
#    # Add your worker nodes with ingress controllers here
#    server k3s-worker-1 5.78.103.224:443 check inter 5s rise 2 fall 3
#    server k3s-worker-2 5.161.110.205:443 check inter 5s rise 2 fall 3
#    server k3s-worker-3 178.156.186.10:443 check inter 5s rise 2 fall 3
