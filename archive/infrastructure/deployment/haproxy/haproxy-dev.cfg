# ðŸ”„ HAProxy Configuration for Development PostgreSQL Cluster
# Load balancer for Patroni PostgreSQL cluster - Development Environment

global
    maxconn 1024
    log stdout local0
    chroot /var/lib/haproxy
    # stats socket /run/haproxy/admin.sock mode 660 level admin
    stats timeout 30s
    user haproxy
    group haproxy
    daemon

defaults
    mode tcp
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms
    option dontlognull
    option log-health-checks
    option redispatch
    retries 3
    maxconn 500

# Statistics interface (Development - no auth needed)
listen stats
    bind *:7000
    mode http
    stats enable
    stats uri /stats
    stats refresh 10s
    stats show-legends
    stats show-node
    stats admin if TRUE
    stats realm HAProxy\ Development\ Statistics

# PostgreSQL Primary (Read/Write) - Development
listen postgres-primary
    bind *:5000
    mode tcp
    option httpchk GET /primary
    http-check expect status 200
    default-server inter 3s fall 3 rise 2 on-marked-down shutdown-sessions

    # Development connection limits (smaller)
    server postgres-1 postgres-1:5432 maxconn 50 check port 8008 weight 100
    server postgres-2 postgres-2:5432 maxconn 50 check port 8009 backup weight 100
    server postgres-3 postgres-3:5432 maxconn 50 check port 8010 backup weight 100

# PostgreSQL Replicas (Read Only) - Development
listen postgres-replicas
    bind *:5001
    mode tcp
    option httpchk GET /replica
    http-check expect status 200
    balance roundrobin
    default-server inter 3s fall 3 rise 2 on-marked-down shutdown-sessions

    # All nodes can serve read queries
    server postgres-1 postgres-1:5432 maxconn 50 check port 8008 weight 100
    server postgres-2 postgres-2:5432 maxconn 50 check port 8009 weight 100
    server postgres-3 postgres-3:5432 maxconn 50 check port 8010 weight 100

# Health check endpoints for development monitoring
listen health-check
    bind *:8080
    mode http
    monitor-uri /health

    # Simple health check for development
    http-request return status 200 content-type text/plain string "HAProxy Development OK" if TRUE

# Development cluster status endpoint
listen cluster-status
    bind *:8081
    mode http

    # Development cluster status
    http-request return status 200 content-type application/json string "{\"status\":\"healthy\",\"environment\":\"development\",\"cluster\":\"gardenos-dev-cluster\"}" if TRUE

# Development logging configuration
global
    log 127.0.0.1:514 local0 debug

# Simple rate limiting for development (very permissive)
frontend dev_rate_limit
    bind *:9000
    mode http

    # Very permissive rate limiting for development
    stick-table type ip size 10k expire 30s store http_req_rate(10s)
    http-request track-sc0 src
    http-request reject if { sc_http_req_rate(0) gt 100 }

    default_backend postgres_api_dev

backend postgres_api_dev
    mode http
    balance roundrobin

    # Health checks for API endpoints
    option httpchk GET /
    http-check expect status 200

    server api1 postgres-1:8008 check
    server api2 postgres-2:8008 check
    server api3 postgres-3:8008 check
