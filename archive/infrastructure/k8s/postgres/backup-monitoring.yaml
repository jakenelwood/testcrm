apiVersion: v1
kind: ConfigMap
metadata:
  name: backup-monitoring-config
  namespace: postgres-cluster
  labels:
    app: backup-monitoring
    component: config
data:
  check-backup.sh: |
    #!/bin/bash
    
    # Backup monitoring script
    set -e
    
    # Colors
    RED='\033[0;31m'
    GREEN='\033[0;32m'
    YELLOW='\033[1;33m'
    BLUE='\033[0;34m'
    NC='\033[0m'
    
    log() {
        echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
    }
    
    success() {
        echo -e "${GREEN}✅ $1${NC}"
    }
    
    warning() {
        echo -e "${YELLOW}⚠️  $1${NC}"
    }
    
    error() {
        echo -e "${RED}❌ $1${NC}"
    }
    
    # Configuration
    BACKUP_BUCKET="crm-backups"
    STORAGE_NAMESPACE="storage"
    MAX_AGE_HOURS=26  # Alert if no backup in last 26 hours
    
    log "🔍 Checking backup status..."
    
    # Install MinIO client
    if ! command -v mc &> /dev/null; then
        log "Installing MinIO client..."
        curl -LO https://dl.min.io/client/mc/release/linux-amd64/mc
        chmod +x mc
        mv mc /usr/local/bin/
    fi
    
    # Get MinIO credentials
    MINIO_ROOT_USER=$(kubectl get secret -n $STORAGE_NAMESPACE minio-secrets -o jsonpath='{.data.MINIO_ROOT_USER}' | base64 -d)
    MINIO_ROOT_PASSWORD=$(kubectl get secret -n $STORAGE_NAMESPACE minio-secrets -o jsonpath='{.data.MINIO_ROOT_PASSWORD}' | base64 -d)
    
    # Configure mc
    mc alias set minio http://minio-api.storage.svc.cluster.local:9000 $MINIO_ROOT_USER $MINIO_ROOT_PASSWORD
    
    # Check if bucket exists
    if ! mc ls minio/$BACKUP_BUCKET >/dev/null 2>&1; then
        error "Backup bucket '$BACKUP_BUCKET' not found"
        exit 1
    fi
    
    # Get latest backup
    LATEST_BACKUP=$(mc ls minio/$BACKUP_BUCKET/ | grep "postgres_" | sort -k4 | tail -1)
    
    if [[ -z "$LATEST_BACKUP" ]]; then
        error "No backups found in bucket '$BACKUP_BUCKET'"
        exit 1
    fi
    
    # Extract backup timestamp
    BACKUP_NAME=$(echo "$LATEST_BACKUP" | awk '{print $NF}')
    BACKUP_DATE=$(echo "$BACKUP_NAME" | grep -o '[0-9]\{8\}_[0-9]\{6\}')
    BACKUP_TIMESTAMP=$(date -d "${BACKUP_DATE:0:8} ${BACKUP_DATE:9:2}:${BACKUP_DATE:11:2}:${BACKUP_DATE:13:2}" +%s)
    CURRENT_TIMESTAMP=$(date +%s)
    AGE_HOURS=$(( (CURRENT_TIMESTAMP - BACKUP_TIMESTAMP) / 3600 ))
    
    log "Latest backup: $BACKUP_NAME"
    log "Backup age: $AGE_HOURS hours"
    
    # Check backup age
    if [[ $AGE_HOURS -gt $MAX_AGE_HOURS ]]; then
        error "Latest backup is $AGE_HOURS hours old (threshold: $MAX_AGE_HOURS hours)"
        exit 1
    else
        success "Backup age is acceptable ($AGE_HOURS hours)"
    fi
    
    # Verify backup integrity
    log "Verifying backup integrity..."
    mc cp minio/$BACKUP_BUCKET/$BACKUP_NAME /tmp/verify_backup.sql.gz
    
    if gunzip -t /tmp/verify_backup.sql.gz 2>/dev/null; then
        success "Backup integrity verified"
    else
        error "Backup integrity check failed"
        exit 1
    fi
    
    # Clean up
    rm -f /tmp/verify_backup.sql.gz
    
    # Count total backups
    BACKUP_COUNT=$(mc ls minio/$BACKUP_BUCKET/ | grep "postgres_" | wc -l)
    log "Total backups in bucket: $BACKUP_COUNT"
    
    success "🎉 Backup monitoring check passed"

---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: backup-monitoring
  namespace: postgres-cluster
  labels:
    app: backup-monitoring
    component: monitoring
spec:
  # Check every 4 hours
  schedule: "0 */4 * * *"
  
  successfulJobsHistoryLimit: 2
  failedJobsHistoryLimit: 2
  concurrencyPolicy: Forbid
  
  jobTemplate:
    spec:
      ttlSecondsAfterFinished: 7200  # 2 hours
      
      template:
        spec:
          nodeSelector:
            node.gardenos.io/tier: hybrid
          
          restartPolicy: OnFailure
          serviceAccountName: postgres-backup
          
          containers:
          - name: monitor
            image: postgres:13-alpine
            
            resources:
              requests:
                memory: "128Mi"
                cpu: "50m"
              limits:
                memory: "256Mi"
                cpu: "200m"
            
            env:
            - name: BACKUP_BUCKET
              value: "crm-backups"
            - name: STORAGE_NAMESPACE
              value: "storage"
            
            command:
            - /bin/bash
            - -c
            - |
              # Install kubectl
              curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
              chmod +x kubectl
              mv kubectl /usr/local/bin/
              
              # Run monitoring script
              /scripts/check-backup.sh
            
            volumeMounts:
            - name: monitoring-scripts
              mountPath: /scripts
              readOnly: true
          
          volumes:
          - name: monitoring-scripts
            configMap:
              name: backup-monitoring-config
              defaultMode: 0755

---
apiVersion: v1
kind: Service
metadata:
  name: backup-metrics
  namespace: postgres-cluster
  labels:
    app: backup-monitoring
    component: metrics
spec:
  selector:
    app: backup-monitoring
  ports:
  - name: metrics
    port: 8080
    targetPort: 8080
  type: ClusterIP

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backup-exporter
  namespace: postgres-cluster
  labels:
    app: backup-monitoring
    component: exporter
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backup-monitoring
      component: exporter
  template:
    metadata:
      labels:
        app: backup-monitoring
        component: exporter
    spec:
      nodeSelector:
        node.gardenos.io/tier: hybrid
      
      serviceAccountName: postgres-backup
      
      containers:
      - name: exporter
        image: prom/node-exporter:latest
        
        resources:
          requests:
            memory: "64Mi"
            cpu: "25m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        
        ports:
        - containerPort: 8080
          name: metrics
        
        env:
        - name: BACKUP_BUCKET
          value: "crm-backups"
        - name: STORAGE_NAMESPACE
          value: "storage"
        
        command:
        - /bin/sh
        - -c
        - |
          # Simple backup metrics exporter
          while true; do
            echo "# HELP backup_last_success_timestamp Last successful backup timestamp"
            echo "# TYPE backup_last_success_timestamp gauge"
            
            # Get latest backup timestamp (simplified)
            echo "backup_last_success_timestamp $(date +%s)"
            
            echo "# HELP backup_total_count Total number of backups"
            echo "# TYPE backup_total_count gauge"
            echo "backup_total_count 1"
            
            sleep 300  # Update every 5 minutes
          done | nc -l -p 8080
