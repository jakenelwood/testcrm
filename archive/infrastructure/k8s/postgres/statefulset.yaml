apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: postgres-cluster
  labels:
    app: postgres
    component: database
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/part-of: gardenos
spec:
  serviceName: postgres-cluster
  replicas: 3
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
        component: database
    spec:
      serviceAccountName: patroni
      automountServiceAccountToken: true
      nodeSelector:
        node.gardenos.io/tier: hybrid
      securityContext:
        fsGroup: 101
      initContainers:
      - name: fix-permissions
        image: busybox:1.35
        command: ['sh', '-c']
        args:
        - |
          chown -R 101:101 /var/lib/postgresql/data
          chmod 700 /var/lib/postgresql/data
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        securityContext:
          runAsUser: 0
      containers:
      - name: postgres
        image: ghcr.io/zalando/spilo-17:4.0-p2
        ports:
        - containerPort: 5432
          name: postgres
        - containerPort: 8008
          name: patroni
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: PGUSER
          value: "postgres"
        - name: POSTGRES_USER
          value: "postgres"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secrets
              key: POSTGRES_PASSWORD
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secrets
              key: POSTGRES_PASSWORD
        - name: PATRONI_CONFIGURATION
          valueFrom:
            configMapKeyRef:
              name: patroni-config
              key: patroni.yml
        - name: PATRONI_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: PATRONI_SCOPE
          value: "postgres-cluster"
        - name: PATRONI_KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: PATRONI_KUBERNETES_LABELS
          value: '{"app": "postgres", "component": "database", "role": "{role}"}'
        - name: PATRONI_RESTAPI_LISTEN
          value: "0.0.0.0:8008"
        - name: PATRONI_RESTAPI_CONNECT_ADDRESS
          value: "$(POD_IP):8008"
        - name: PATRONI_POSTGRESQL_LISTEN
          value: "0.0.0.0:5432"
        - name: PATRONI_POSTGRESQL_CONNECT_ADDRESS
          value: "$(POD_IP):5432"
        - name: PATRONI_POSTGRESQL_DATA_DIR
          value: "/var/lib/postgresql/data"
        - name: PATRONI_ETCD3_HOSTS
          value: "5.78.103.224:2379,5.161.110.205:2379,178.156.186.10:2379"
        - name: PGUSER_STANDBY
          value: "standby"
        - name: PGPASSWORD_STANDBY
          value: "standby"
        # Enable Kubernetes integration for Spilo
        - name: PATRONI_KUBERNETES_USE_ENDPOINTS
          value: "true"
        - name: KUBERNETES_SERVICE_HOST
          value: "kubernetes.default.svc.cluster.local"
        - name: KUBERNETES_SERVICE_PORT
          value: "443"
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        - name: patroni-config
          mountPath: /etc/patroni
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /liveness
            port: 8008
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /readiness
            port: 8008
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
      # ⬇️ DISCOVERY SIDECAR CONTAINER ⬇️
      - name: discovery-sidecar
        image: alpine/k8s:1.28.4
        command: ["/bin/sh", "/app/discovery.sh"]
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        volumeMounts:
        - name: discovery-script
          mountPath: /app
        resources:
          requests:
            memory: "32Mi"
            cpu: "50m"
          limits:
            memory: "64Mi"
            cpu: "100m"
        securityContext:
          runAsNonRoot: true
          runAsUser: 1001
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: patroni-config
        configMap:
          name: patroni-config
      - name: discovery-script
        configMap:
          name: discovery-sidecar-script
          defaultMode: 0755
  volumeClaimTemplates:
  - metadata:
      name: postgres-data
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: local-path
      resources:
        requests:
          storage: 10Gi
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-cluster
  namespace: postgres-cluster
  labels:
    app: postgres
    component: database
spec:
  # No selector - Patroni will manage the endpoints directly
  ports:
  - port: 5432
    targetPort: 5432
    name: postgres
  - port: 8008
    targetPort: 8008
    name: patroni
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-primary
  namespace: postgres-cluster
  labels:
    app: postgres
    component: database
    role: primary
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  # No selector - Discovery sidecar will manage the endpoints directly
  ports:
  - port: 5432
    targetPort: 5432
    name: postgres
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-replica
  namespace: postgres-cluster
  labels:
    app: postgres
    component: database
    role: replica
spec:
  selector:
    app: postgres
    role: replica
  ports:
  - port: 5432
    targetPort: 5432
    name: postgres
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-external
  namespace: postgres-cluster
  labels:
    app: postgres
    component: database
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
    name: postgres
    nodePort: 30432
  type: NodePort
