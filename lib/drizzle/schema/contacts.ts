import { pgTable, uuid, text, date, integer, numeric, jsonb, timestamp, boolean } from 'drizzle-orm/pg-core';
import { sql } from 'drizzle-orm';

export const contacts = pgTable('contacts', {
  id: uuid().notNull().primaryKey().default('gen_random_uuid()'),
  workspace_id: uuid().notNull().unique(),
  account_id: uuid(),
  first_name: text(),
  last_name: text(),
  email: text().unique(),
  phone: text(),
  mobile_phone: text(),
  address: text(),
  city: text(),
  state: text(),
  zip_code: text(),
  date_of_birth: date(),
  gender: text(),
  marital_status: text(),
  occupation: text(),
  job_title: text(),
  department: text(),
  drivers_license: text(),
  license_state: text(),
  ssn_last_four: text(),
  lifecycle_stage: text().notNull().default('\'lead\'::contact_lifecycle_stage'),
  lead_source: text(),
  referred_by: uuid(),
  summary_embedding: text(),
  ai_risk_score: integer(),
  ai_lifetime_value: numeric({ precision: 15, scale: 2 }),
  ai_churn_probability: numeric({ precision: 5, scale: 2 }),
  ai_insights: jsonb().default('{}'),
  preferred_contact_method: text().default('email'),
  communication_preferences: jsonb().default('{}'),
  custom_fields: jsonb().default('{}'),
  tags: text().array(),
  last_contact_at: timestamp({ withTimezone: true }),
  next_contact_at: timestamp({ withTimezone: true }),
  owner_id: uuid(),
  created_at: timestamp({ withTimezone: true }).notNull().default(sql`now()`),
  updated_at: timestamp({ withTimezone: true }).notNull().default(sql`now()`),
  current_campaign_id: uuid(),
  campaign_assigned_at: timestamp({ withTimezone: true }).default(sql`now()`),
  hold_until: timestamp({ withTimezone: true }),
  hold_reason: text(),
  hold_requested_by: text(),
  hold_notes: text(),
  auto_reengagement_enabled: boolean().default(true),
});

export type Contacts = typeof contacts.$inferSelect;
export type NewContacts = typeof contacts.$inferInsert;
