import { pgTable, uuid, text, numeric, integer, date, jsonb, timestamp } from 'drizzle-orm/pg-core';
import { sql } from 'drizzle-orm';

export const opportunities = pgTable('opportunities', {
  id: uuid().notNull().primaryKey().default('gen_random_uuid()'),
  workspace_id: uuid().notNull(),
  name: text().notNull(),
  account_id: uuid(),
  contact_id: uuid(),
  stage: text().notNull().default('\'prospecting\'::opportunity_stage'),
  amount: numeric({ precision: 12, scale: 2 }),
  probability: integer().default(50),
  close_date: date(),
  insurance_types: text().array(),
  policy_term: integer().default(12),
  effective_date: date(),
  expiration_date: date(),
  premium_breakdown: jsonb().default('{}'),
  coverage_details: jsonb().default('{}'),
  competing_carriers: text().array(),
  current_carrier: text(),
  current_premium: numeric({ precision: 10, scale: 2 }),
  ai_win_probability: numeric({ precision: 5, scale: 2 }),
  ai_recommended_actions: jsonb().default('[]'),
  ai_risk_factors: jsonb().default('[]'),
  custom_fields: jsonb().default('{}'),
  tags: text().array(),
  notes: text(),
  owner_id: uuid(),
  source: text(),
  created_at: timestamp({ withTimezone: true }).notNull().default(sql`now()`),
  updated_at: timestamp({ withTimezone: true }).notNull().default(sql`now()`),
  stage_changed_at: timestamp({ withTimezone: true }).default(sql`now()`),
  campaign_id: uuid(),
  ab_test_id: uuid(),
  variant_shown: text(),
  contact_attempts: integer().default(0),
  max_contact_attempts: integer().default(7),
  last_contact_attempt: timestamp({ withTimezone: true }),
  next_contact_date: timestamp({ withTimezone: true }),
  paused_until: timestamp({ withTimezone: true }),
  pause_duration_days: integer().default(49),
  quote_sent_at: timestamp({ withTimezone: true }),
  quote_response_at: timestamp({ withTimezone: true }),
  maybe_followup_days: integer().default(7),
  ai_summary: text(),
  ai_next_action: text(),
  ai_quote_recommendation: text(),
  ai_follow_up_priority: integer(),
  premium: numeric({ precision: 10, scale: 2 }),
  quote_premium: numeric({ precision: 10, scale: 2 }),
  quote_expires_at: timestamp({ withTimezone: true }),
});

export type Opportunities = typeof opportunities.$inferSelect;
export type NewOpportunities = typeof opportunities.$inferInsert;
